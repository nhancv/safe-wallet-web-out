{"version":3,"file":"static/chunks/1333-9d4908de60541094.js","mappings":"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","sources":["webpack://_N_E/./src/components/transactions/TxNavigation/index.tsx","webpack://_N_E/./src/components/transactions/TxHeader/index.tsx","webpack://_N_E/./src/components/common/DatePickerInput/index.tsx","webpack://_N_E/./src/components/transactions/TxFilterForm/index.tsx","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/transactions/TrustedToggle/TrustedToggleButton.tsx","webpack://_N_E/./src/components/transactions/TrustedToggle/index.tsx","webpack://_N_E/./src/pages/transactions/history.tsx","webpack://_N_E/./src/components/transactions/TxFilterForm/styles.module.css","webpack://_N_E/./src/components/common/NavTabs/index.tsx","webpack://_N_E/./src/components/common/NavTabs/styles.module.css","webpack://_N_E/./src/components/common/PageHeader/index.tsx","webpack://_N_E/./src/components/common/PageHeader/styles.module.css"],"sourcesContent":["import NavTabs from '@/components/common/NavTabs'\nimport { transactionNavItems } from '@/components/sidebar/SidebarNavigation/config'\nimport { AppRoutes } from '@/config/routes'\nimport { useHasFeature } from '@/hooks/useChains'\n\nimport { FEATURES } from '@safe-global/utils/utils/chains'\n\nconst TxNavigation = () => {\n  const isEIP1271 = useHasFeature(FEATURES.EIP1271)\n\n  const navItems = isEIP1271\n    ? transactionNavItems\n    : transactionNavItems.filter((item) => item.href !== AppRoutes.transactions.messages)\n\n  return <NavTabs tabs={navItems} />\n}\n\nexport default TxNavigation\n","import type { ReactElement, ReactNode } from 'react'\n\nimport PageHeader from '@/components/common/PageHeader'\nimport css from '@/components/common/PageHeader/styles.module.css'\nimport TxNavigation from '@/components/transactions/TxNavigation'\n\nconst TxHeader = ({ children }: { children?: ReactNode }): ReactElement => {\n  return (\n    <PageHeader\n      title=\"Transactions\"\n      action={\n        <div className={css.pageHeader}>\n          <div className={css.navWrapper}>\n            <TxNavigation />\n          </div>\n          {children && <div className={css.actionsWrapper}>{children}</div>}\n        </div>\n      }\n    />\n  )\n}\n\nexport default TxHeader\n","import { useFormContext, Controller } from 'react-hook-form'\nimport { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider'\nimport { DatePicker } from '@mui/x-date-pickers/DatePicker'\nimport { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns'\nimport { isFuture, isValid, startOfDay } from 'date-fns'\n\nimport inputCss from '@/styles/inputs.module.css'\n\nconst DatePickerInput = ({\n  name,\n  label,\n  deps,\n  disableFuture = true,\n  validate,\n}: {\n  name: string\n  label: string\n  deps?: string[]\n  disableFuture?: boolean\n  validate?: (value: Date | null) => string | undefined\n}) => {\n  const { control } = useFormContext()\n\n  return (\n    <Controller\n      name={name}\n      control={control}\n      rules={{\n        deps,\n        validate: (val) => {\n          if (!val) {\n            return\n          }\n\n          if (!isValid(val)) {\n            return 'Invalid date'\n          }\n\n          // Compare days using `startOfDay` to ignore timezone offset\n          if (disableFuture && isFuture(startOfDay(val))) {\n            return 'Date cannot be in the future'\n          }\n\n          return validate?.(val)\n        },\n      }}\n      render={({ field, fieldState }) => (\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n          <DatePicker\n            className={inputCss.input}\n            label={label}\n            format=\"dd/MM/yyyy\"\n            {...field}\n            disableFuture={disableFuture}\n            slotProps={{\n              textField: { fullWidth: true, label: fieldState.error?.message || label, error: !!fieldState.error },\n            }}\n          />\n        </LocalizationProvider>\n      )}\n    />\n  )\n}\n\nexport default DatePickerInput\n","import Paper from '@mui/material/Paper'\nimport Grid from '@mui/material/Grid'\nimport FormControl from '@mui/material/FormControl'\nimport RadioGroup from '@mui/material/RadioGroup'\nimport FormLabel from '@mui/material/FormLabel'\nimport FormControlLabel from '@mui/material/FormControlLabel'\nimport Radio from '@mui/material/Radio'\nimport Button from '@mui/material/Button'\nimport Divider from '@mui/material/Divider'\nimport { isBefore, isAfter, startOfDay } from 'date-fns'\nimport { Controller, FormProvider, useForm, useFormState, type DefaultValues } from 'react-hook-form'\nimport { useMemo, type ReactElement } from 'react'\n\nimport AddressBookInput from '@/components/common/AddressBookInput'\nimport DatePickerInput from '@/components/common/DatePickerInput'\nimport { validateAmount } from '@safe-global/utils/utils/validation'\nimport { trackEvent } from '@/services/analytics'\nimport { TX_LIST_EVENTS } from '@/services/analytics/events/txList'\nimport { txFilter, useTxFilter, TxFilterType, type TxFilter } from '@/utils/tx-history-filter'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport NumberField from '@/components/common/NumberField'\n\nimport css from './styles.module.css'\nimport inputCss from '@/styles/inputs.module.css'\nimport AddressInput from '@/components/common/AddressInput'\n\nenum TxFilterFormFieldNames {\n  FILTER_TYPE = 'type',\n  DATE_FROM = 'execution_date__gte',\n  DATE_TO = 'execution_date__lte',\n  RECIPIENT = 'to',\n  AMOUNT = 'value',\n  TOKEN_ADDRESS = 'token_address',\n  MODULE = 'module',\n  NONCE = 'nonce',\n}\n\nexport type TxFilterFormState = {\n  [TxFilterFormFieldNames.FILTER_TYPE]: TxFilterType\n  [TxFilterFormFieldNames.DATE_FROM]: Date | null\n  [TxFilterFormFieldNames.DATE_TO]: Date | null\n  [TxFilterFormFieldNames.RECIPIENT]: string\n  [TxFilterFormFieldNames.AMOUNT]: string\n  [TxFilterFormFieldNames.TOKEN_ADDRESS]: string\n  [TxFilterFormFieldNames.MODULE]: string\n  [TxFilterFormFieldNames.NONCE]: string\n}\n\nconst defaultValues: DefaultValues<TxFilterFormState> = {\n  [TxFilterFormFieldNames.FILTER_TYPE]: TxFilterType.INCOMING,\n  [TxFilterFormFieldNames.DATE_FROM]: null,\n  [TxFilterFormFieldNames.DATE_TO]: null,\n  [TxFilterFormFieldNames.RECIPIENT]: '',\n  [TxFilterFormFieldNames.AMOUNT]: '',\n  [TxFilterFormFieldNames.TOKEN_ADDRESS]: '',\n  [TxFilterFormFieldNames.MODULE]: '',\n  [TxFilterFormFieldNames.NONCE]: '',\n}\n\nconst getInitialFormValues = (filter: TxFilter | null): DefaultValues<TxFilterFormState> => {\n  return filter\n    ? {\n        ...defaultValues,\n        ...txFilter.formatFormData(filter),\n      }\n    : defaultValues\n}\n\nconst TxFilterForm = ({ toggleFilter }: { toggleFilter: () => void }): ReactElement => {\n  const [filter, setFilter] = useTxFilter()\n  const chain = useCurrentChain()\n\n  const formMethods = useForm<TxFilterFormState>({\n    mode: 'onChange',\n    shouldUnregister: true,\n    defaultValues: getInitialFormValues(filter),\n  })\n\n  const { control, watch, handleSubmit, reset, getValues } = formMethods\n\n  const filterType = watch(TxFilterFormFieldNames.FILTER_TYPE)\n\n  const isIncomingFilter = filterType === TxFilterType.INCOMING\n  const isMultisigFilter = filterType === TxFilterType.MULTISIG\n  const isModuleFilter = filterType === TxFilterType.MODULE\n\n  // Only subscribe to relevant `formState`\n  const { dirtyFields, isValid } = useFormState({ control })\n\n  const dirtyFieldNames = Object.keys(dirtyFields)\n\n  const canClear = useMemo(() => {\n    const isFormDirty = dirtyFieldNames.some((name) => name !== TxFilterFormFieldNames.FILTER_TYPE)\n    const hasFilterInQuery = !!filter?.type\n    return !isValid || isFormDirty || hasFilterInQuery\n  }, [dirtyFieldNames, filter?.type, isValid])\n\n  const clearFilter = () => {\n    setFilter(null)\n\n    reset({\n      ...defaultValues,\n      // Persist the current type\n      [TxFilterFormFieldNames.FILTER_TYPE]: getValues(TxFilterFormFieldNames.FILTER_TYPE),\n    })\n  }\n\n  const onSubmit = (data: TxFilterFormState) => {\n    for (const name of dirtyFieldNames) {\n      trackEvent({ ...TX_LIST_EVENTS.FILTER, label: name })\n    }\n\n    const filterData = txFilter.parseFormData(data)\n\n    setFilter(filterData)\n\n    toggleFilter()\n  }\n\n  return (\n    <Paper elevation={0} variant=\"outlined\" className={css.filterWrapper}>\n      <FormProvider {...formMethods}>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <Grid data-testid=\"filter-modal\" container>\n            <Grid item xs={12} md={3} sx={{ p: 4 }}>\n              <FormControl>\n                <FormLabel sx={{ mb: 2, color: ({ palette }) => palette.primary.light }}>Transaction type</FormLabel>\n                <Controller\n                  name={TxFilterFormFieldNames.FILTER_TYPE}\n                  control={control}\n                  render={({ field }) => (\n                    <RadioGroup {...field}>\n                      {Object.values(TxFilterType).map((value) => (\n                        <FormControlLabel value={value} control={<Radio />} label={value} key={value} />\n                      ))}\n                    </RadioGroup>\n                  )}\n                />\n              </FormControl>\n            </Grid>\n\n            <Divider orientation=\"vertical\" flexItem />\n\n            <Grid item xs={12} md={8} sx={{ p: 4 }}>\n              <FormControl sx={{ width: '100%' }}>\n                <FormLabel sx={{ mb: 3, color: ({ palette }) => palette.primary.light }}>Parameters</FormLabel>\n                <Grid container item spacing={2} xs={12}>\n                  {!isModuleFilter && (\n                    <>\n                      <Grid data-testid=\"start-date\" item xs={12} md={6}>\n                        <DatePickerInput\n                          name={TxFilterFormFieldNames.DATE_FROM}\n                          label=\"From\"\n                          deps={[TxFilterFormFieldNames.DATE_TO]}\n                          validate={(val: TxFilterFormState[TxFilterFormFieldNames.DATE_FROM]) => {\n                            const toDate = getValues(TxFilterFormFieldNames.DATE_TO)\n                            if (val && toDate && isBefore(startOfDay(toDate), startOfDay(val))) {\n                              return 'Must be before \"To\" date'\n                            }\n                          }}\n                        />\n                      </Grid>\n                      <Grid data-testid=\"end-date\" item xs={12} md={6}>\n                        <DatePickerInput\n                          name={TxFilterFormFieldNames.DATE_TO}\n                          label=\"To\"\n                          deps={[TxFilterFormFieldNames.DATE_FROM]}\n                          validate={(val: TxFilterFormState[TxFilterFormFieldNames.DATE_FROM]) => {\n                            const fromDate = getValues(TxFilterFormFieldNames.DATE_FROM)\n                            if (val && fromDate && isAfter(startOfDay(fromDate), startOfDay(val))) {\n                              return 'Must be after \"From\" date'\n                            }\n                          }}\n                        />\n                      </Grid>\n\n                      <Grid item xs={12} md={6}>\n                        <Controller\n                          name={TxFilterFormFieldNames.AMOUNT}\n                          control={control}\n                          rules={{\n                            validate: (val: TxFilterFormState[TxFilterFormFieldNames.AMOUNT]) => {\n                              if (val?.length > 0) {\n                                return validateAmount(val)\n                              }\n                            },\n                          }}\n                          render={({ field, fieldState }) => (\n                            <NumberField\n                              data-testid=\"amount-input\"\n                              className={inputCss.input}\n                              label={\n                                fieldState.error?.message ||\n                                (isIncomingFilter ? 'Amount' : `Amount (only ${chain?.nativeCurrency.symbol || 'ETH'})`)\n                              }\n                              error={!!fieldState.error}\n                              {...field}\n                              fullWidth\n                            />\n                          )}\n                        />\n                      </Grid>\n                    </>\n                  )}\n\n                  {isIncomingFilter && (\n                    <Grid item xs={12} md={6}>\n                      <AddressInput\n                        data-testid=\"token-input\"\n                        label=\"Token address\"\n                        name={TxFilterFormFieldNames.TOKEN_ADDRESS}\n                        required={false}\n                        fullWidth\n                      />\n                    </Grid>\n                  )}\n\n                  {isMultisigFilter && (\n                    <>\n                      <Grid item xs={12} md={6}>\n                        <AddressBookInput\n                          label=\"Recipient\"\n                          name={TxFilterFormFieldNames.RECIPIENT}\n                          required={false}\n                          fullWidth\n                        />\n                      </Grid>\n                      <Grid item xs={12} md={6}>\n                        <Controller\n                          name={TxFilterFormFieldNames.NONCE}\n                          control={control}\n                          rules={{\n                            validate: (val: TxFilterFormState[TxFilterFormFieldNames.NONCE]) => {\n                              if (val?.length > 0) {\n                                return validateAmount(val)\n                              }\n                            },\n                          }}\n                          render={({ field, fieldState }) => (\n                            <NumberField\n                              data-testid=\"nonce-input\"\n                              className={inputCss.input}\n                              label={fieldState.error?.message || 'Nonce'}\n                              error={!!fieldState.error}\n                              {...field}\n                              fullWidth\n                            />\n                          )}\n                        />\n                      </Grid>\n                    </>\n                  )}\n\n                  {isModuleFilter && (\n                    <Grid item xs={12} md={6}>\n                      <AddressBookInput\n                        label=\"Module\"\n                        name={TxFilterFormFieldNames.MODULE}\n                        required={false}\n                        fullWidth\n                      />\n                    </Grid>\n                  )}\n                </Grid>\n              </FormControl>\n\n              <Grid item container md={6} sx={{ gap: 2, mt: 3 }}>\n                <Button data-testid=\"clear-btn\" variant=\"contained\" onClick={clearFilter} disabled={!canClear}>\n                  Clear\n                </Button>\n                <Button data-testid=\"apply-btn\" type=\"submit\" variant=\"contained\" color=\"primary\" disabled={!isValid}>\n                  Apply\n                </Button>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      </FormProvider>\n    </Paper>\n  )\n}\n\nexport default TxFilterForm\n","export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import { type ReactElement } from 'react'\nimport { FormControlLabel, Switch } from '@mui/material'\nimport { TX_LIST_EVENTS } from '@/services/analytics'\nimport Track from '@/components/common/Track'\n\nconst _TrustedToggleButton = ({\n  onlyTrusted,\n  setOnlyTrusted,\n  hasDefaultTokenlist,\n}: {\n  onlyTrusted: boolean\n  setOnlyTrusted: (on: boolean) => void\n  hasDefaultTokenlist?: boolean\n}): ReactElement | null => {\n  const onClick = () => {\n    setOnlyTrusted(!onlyTrusted)\n  }\n\n  if (!hasDefaultTokenlist) {\n    return null\n  }\n\n  return (\n    <Track {...TX_LIST_EVENTS.TOGGLE_UNTRUSTED} label={onlyTrusted ? 'show' : 'hide'}>\n      <FormControlLabel\n        data-testid=\"toggle-untrusted\"\n        control={<Switch checked={onlyTrusted} onChange={onClick} />}\n        label={<>Hide suspicious</>}\n      />\n    </Track>\n  )\n}\n\nexport default _TrustedToggleButton\n","import { useHasFeature } from '@/hooks/useChains'\nimport { useAppDispatch, useAppSelector } from '@/store'\nimport { selectSettings, hideSuspiciousTransactions } from '@/store/settingsSlice'\nimport madProps from '@/utils/mad-props'\nimport _TrustedToggleButton from './TrustedToggleButton'\nimport { FEATURES } from '@safe-global/utils/utils/chains'\n\nconst useOnlyTrusted = () => {\n  const userSettings = useAppSelector(selectSettings)\n  return userSettings.hideSuspiciousTransactions || false\n}\n\nconst useHasDefaultTokenList = () => {\n  return useHasFeature(FEATURES.DEFAULT_TOKENLIST)\n}\n\nconst useSetOnlyTrusted = () => {\n  const dispatch = useAppDispatch()\n  return (isOn: boolean) => {\n    dispatch(hideSuspiciousTransactions(isOn))\n  }\n}\n\nconst TrustedToggle = madProps(_TrustedToggleButton, {\n  onlyTrusted: useOnlyTrusted,\n  setOnlyTrusted: useSetOnlyTrusted,\n  hasDefaultTokenlist: useHasDefaultTokenList,\n})\n\nexport default TrustedToggle\n","import type { NextPage } from 'next'\nimport Head from 'next/head'\nimport useTxHistory from '@/hooks/useTxHistory'\nimport PaginatedTxns from '@/components/common/PaginatedTxns'\nimport TxHeader from '@/components/transactions/TxHeader'\nimport { Box } from '@mui/material'\nimport { useState } from 'react'\nimport Button from '@mui/material/Button'\nimport ExpandLessIcon from '@mui/icons-material/ExpandLess'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport TxFilterForm from '@/components/transactions/TxFilterForm'\nimport TrustedToggle from '@/components/transactions/TrustedToggle'\nimport { useTxFilter } from '@/utils/tx-history-filter'\nimport { BRAND_NAME } from '@/config/constants'\n\nconst History: NextPage = () => {\n  const [filter] = useTxFilter()\n\n  const [showFilter, setShowFilter] = useState(false)\n\n  const toggleFilter = () => {\n    setShowFilter((prev) => !prev)\n  }\n\n  const ExpandIcon = showFilter ? ExpandLessIcon : ExpandMoreIcon\n  return (\n    <>\n      <Head>\n        <title>{`${BRAND_NAME} – Transaction history`}</title>\n      </Head>\n\n      <TxHeader>\n        <TrustedToggle />\n\n        <Button variant=\"outlined\" onClick={toggleFilter} size=\"small\" endIcon={<ExpandIcon />}>\n          {filter?.type ?? 'Filter'}\n        </Button>\n      </TxHeader>\n\n      <main>\n        {showFilter && <TxFilterForm toggleFilter={toggleFilter} />}\n\n        <Box mb={4}>\n          <PaginatedTxns useTxns={useTxHistory} />\n        </Box>\n      </main>\n    </>\n  )\n}\n\nexport default History\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterWrapper\":\"styles_filterWrapper__0CTgt\"};","import React from 'react'\nimport NextLink from 'next/link'\nimport { Tab, Tabs, Typography } from '@mui/material'\nimport { useRouter } from 'next/router'\nimport type { NavItem } from '@/components/sidebar/SidebarNavigation/config'\nimport css from './styles.module.css'\n\nconst NavTabs = ({ tabs }: { tabs: NavItem[] }) => {\n  const router = useRouter()\n  const activeTab = Math.max(0, tabs.map((tab) => tab.href).indexOf(router.pathname))\n  const query = router.query.safe ? { safe: router.query.safe } : undefined\n\n  return (\n    <Tabs value={activeTab} variant=\"scrollable\" allowScrollButtonsMobile className={css.tabs}>\n      {tabs.map((tab, idx) => (\n        <Tab\n          key={tab.href}\n          href={{ pathname: tab.href, query }}\n          component={NextLink}\n          tabIndex={0}\n          className={css.tab}\n          label={\n            <Typography\n              variant=\"body2\"\n              fontWeight={700}\n              color={activeTab === idx ? 'primary' : 'primary.light'}\n              className={css.label}\n            >\n              {tab.label}\n            </Typography>\n          }\n        />\n      ))}\n    </Tabs>\n  )\n}\n\nexport default NavTabs\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabs\":\"styles_tabs__8AoqD\",\"tab\":\"styles_tab__WjqMe\",\"label\":\"styles_label__D53iN\"};","import { Box, Typography } from '@mui/material'\nimport classNames from 'classnames'\n\nimport type { ReactElement } from 'react'\n\nimport css from './styles.module.css'\n\nconst PageHeader = ({\n  title,\n  action,\n  noBorder,\n}: {\n  title: string\n  action?: ReactElement\n  noBorder?: boolean\n}): ReactElement => {\n  return (\n    <Box className={classNames(css.container, { [css.border]: !noBorder })}>\n      <Typography variant=\"h3\" className={css.title}>\n        {title}\n      </Typography>\n      {action}\n    </Box>\n  )\n}\n\nexport default PageHeader\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sGid8\",\"title\":\"styles_title___s0jt\",\"border\":\"styles_border__BkX1U\",\"pageHeader\":\"styles_pageHeader__fRL7d\",\"actionsWrapper\":\"styles_actionsWrapper__g_Tq2\",\"navWrapper\":\"styles_navWrapper__XNqgs\"};"],"names":["navItems","isEIP1271","useHasFeature","FEATURES","EIP1271","TxNavigation","transactionNavItems","filter","item","href","AppRoutes","transactions","messages","NavTabs","tabs","children","TxHeader","PageHeader","title","action","div","className","css","name","label","DatePickerInput","deps","disableFuture","validate","control","useFormContext","Controller","rules","isValid","val","isFuture","startOfDay","render","fieldState","field","LocalizationProvider","dateAdapter","AdapterDateFns","DatePicker","inputCss","format","slotProps","textField","fullWidth","error","message","TxFilterFormFieldNames","defaultValues","TxFilterType","INCOMING","getInitialFormValues","txFilter","formatFormData","toggleFilter","setFilter","useTxFilter","chain","useCurrentChain","formMethods","useForm","mode","shouldUnregister","watch","handleSubmit","reset","getValues","filterType","isIncomingFilter","isMultisigFilter","MULTISIG","isModuleFilter","MODULE","dirtyFields","useFormState","dirtyFieldNames","Object","keys","canClear","useMemo","isFormDirty","some","hasFilterInQuery","type","Paper","elevation","variant","FormProvider","form","onSubmit","trackEvent","TX_LIST_EVENTS","FILTER","parseFormData","filterData","data","Grid","data-testid","container","xs","md","sx","p","FormControl","FormLabel","mb","color","palette","primary","light","RadioGroup","values","map","FormControlLabel","value","Radio","Divider","orientation","flexItem","width","spacing","toDate","isBefore","fromDate","isAfter","length","validateAmount","NumberField","nativeCurrency","symbol","AddressInput","required","AddressBookInput","gap","mt","Button","onClick","clearFilter","disabled","TrustedToggle","madProps","_TrustedToggleButton","onlyTrusted","setOnlyTrusted","hasDefaultTokenlist","Track","TOGGLE_UNTRUSTED","Switch","checked","onChange","useOnlyTrusted","useAppSelector","selectSettings","hideSuspiciousTransactions","useSetOnlyTrusted","dispatch","useAppDispatch","isOn","useHasDefaultTokenList","DEFAULT_TOKENLIST","History","showFilter","setShowFilter","useState","prev","ExpandIcon","ExpandLessIcon","ExpandMoreIcon","Head","BRAND_NAME","size","endIcon","main","TxFilterForm","Box","PaginatedTxns","useTxns","useTxHistory","router","useRouter","activeTab","Math","max","tab","indexOf","pathname","query","safe","undefined","Tabs","allowScrollButtonsMobile","idx","Tab","component","NextLink","tabIndex","Typography","fontWeight","noBorder","classNames"],"sourceRoot":"","ignoreList":[]}