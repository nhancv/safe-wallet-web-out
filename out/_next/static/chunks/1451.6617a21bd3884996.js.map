{"version":3,"file":"static/chunks/1451.6617a21bd3884996.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/NftTransfer/SendNftBatch.tsx","webpack://_N_E/./src/components/tx-flow/flows/NftTransfer/ReviewNftBatch.tsx","webpack://_N_E/./src/components/tx-flow/flows/NftTransfer/index.tsx","webpack://_N_E/./public/images/common/nft.svg"],"sourcesContent":["export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import { Box, Button, CardActions, Divider, FormControl, Stack, SvgIcon, Typography } from '@mui/material'\nimport { type SafeCollectibleResponse } from '@safe-global/safe-gateway-typescript-sdk'\nimport { FormProvider, useForm } from 'react-hook-form'\nimport NftIcon from '@/public/images/common/nft.svg'\nimport AddressBookInput from '@/components/common/AddressBookInput'\nimport type { NftTransferParams } from '.'\nimport ImageFallback from '@/components/common/ImageFallback'\nimport TxCard from '../../common/TxCard'\nimport commonCss from '@/components/tx-flow/common/styles.module.css'\nimport { useContext } from 'react'\nimport { TxFlowContext, type TxFlowContextType } from '../../TxFlowProvider'\n\nenum Field {\n  recipient = 'recipient',\n}\n\ntype FormData = Pick<NftTransferParams, Field.recipient>\n\nconst NftItem = ({ image, name, description }: { image: string; name: string; description?: string }) => (\n  <Stack direction=\"row\" spacing={1} flexWrap=\"nowrap\" alignItems=\"flex-start\">\n    <Box flex={0}>\n      <ImageFallback\n        src={image}\n        fallbackSrc=\"\"\n        fallbackComponent={<SvgIcon component={NftIcon} inheritViewBox sx={{ width: 1, height: 1 }} />}\n        alt={name}\n        height={40}\n      />\n    </Box>\n\n    <Box flex={1} minWidth={0} maxWidth={{ xl: 'calc(100% - 200px)' }}>\n      <Typography\n        data-testid=\"nft-item-name\"\n        variant=\"body2\"\n        fontWeight={700}\n        whiteSpace=\"nowrap\"\n        overflow=\"hidden\"\n        textOverflow=\"ellipsis\"\n      >\n        {name}\n      </Typography>\n\n      {description && (\n        <Typography\n          variant=\"body2\"\n          color=\"text.secondary\"\n          display=\"block\"\n          whiteSpace=\"nowrap\"\n          overflow=\"hidden\"\n          textOverflow=\"ellipsis\"\n        >\n          {description}\n        </Typography>\n      )}\n    </Box>\n  </Stack>\n)\n\nexport const NftItems = ({ tokens }: { tokens: SafeCollectibleResponse[] }) => {\n  return (\n    <Stack\n      data-testid=\"nft-item-list\"\n      sx={{\n        gap: 2,\n        overflow: 'auto',\n        maxHeight: '20vh',\n        minHeight: '40px',\n      }}\n    >\n      {tokens.map((token) => (\n        <NftItem\n          key={`${token.address}-${token.id}`}\n          image={token.imageUri || token.logoUri}\n          name={`${token.tokenName || token.tokenSymbol || ''} #${token.id}`}\n          description={`Token ID: ${token.id}${token.name ? ` - ${token.name}` : ''}`}\n        />\n      ))}\n    </Stack>\n  )\n}\n\nconst SendNftBatch = () => {\n  const { data, onNext } = useContext<TxFlowContextType<NftTransferParams>>(TxFlowContext)\n  const { tokens = [] } = data || {}\n\n  const formMethods = useForm<FormData>({\n    defaultValues: {\n      [Field.recipient]: data?.recipient,\n    },\n  })\n  const {\n    handleSubmit,\n    watch,\n    formState: { errors },\n  } = formMethods\n\n  const recipient = watch(Field.recipient)\n  const isAddressValid = !!recipient && !errors[Field.recipient]\n\n  const onFormSubmit = (data: FormData) => {\n    onNext({\n      recipient: data.recipient,\n      tokens,\n    })\n  }\n\n  return (\n    <TxCard>\n      <FormProvider {...formMethods}>\n        <form onSubmit={handleSubmit(onFormSubmit)}>\n          <FormControl fullWidth sx={{ mb: 3, mt: 1 }}>\n            <AddressBookInput name={Field.recipient} canAdd={isAddressValid} />\n          </FormControl>\n\n          <Typography\n            data-testid=\"selected-nfts\"\n            variant=\"body2\"\n            sx={{\n              color: 'text.secondary',\n              mb: 2,\n            }}\n          >\n            Selected NFTs\n          </Typography>\n\n          <NftItems tokens={tokens} />\n\n          <Divider className={commonCss.nestedDivider} sx={{ pt: 3 }} />\n\n          <CardActions>\n            <Button variant=\"contained\" type=\"submit\">\n              Next\n            </Button>\n          </CardActions>\n        </form>\n      </FormProvider>\n    </TxCard>\n  )\n}\n\nexport default SendNftBatch\n","import { type ReactElement, useEffect, useContext } from 'react'\nimport SendToBlock from '@/components/tx/SendToBlock'\nimport { createNftTransferParams } from '@/services/tx/tokenTransferParams'\nimport type { NftTransferParams } from '.'\nimport useSafeAddress from '@/hooks/useSafeAddress'\nimport { createMultiSendCallOnlyTx, createTx } from '@/services/tx/tx-sender'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport { NftItems } from '@/components/tx-flow/flows/NftTransfer/SendNftBatch'\nimport ReviewTransaction, { type ReviewTransactionProps } from '@/components/tx/ReviewTransactionV2'\nimport { maybePlural } from '@safe-global/utils/utils/formatters'\nimport FieldsGrid from '@/components/tx/FieldsGrid'\nimport { TxFlowContext, type TxFlowContextType } from '../../TxFlowProvider'\n\nconst ReviewNftBatch = ({ onSubmit, children }: ReviewTransactionProps): ReactElement => {\n  const { data } = useContext<TxFlowContextType<NftTransferParams>>(TxFlowContext)\n  const { setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n  const safeAddress = useSafeAddress()\n  const { tokens = [] } = data || {}\n\n  useEffect(() => {\n    if (!safeAddress || !data) return\n\n    const calls = tokens.map((token) => {\n      return createNftTransferParams(safeAddress, data.recipient, token.id, token.address)\n    })\n\n    const promise = calls.length > 1 ? createMultiSendCallOnlyTx(calls) : createTx(calls[0])\n\n    promise.then(setSafeTx).catch(setSafeTxError)\n  }, [safeAddress, tokens, data, setSafeTx, setSafeTxError])\n\n  return (\n    <ReviewTransaction onSubmit={onSubmit} withDecodedData={false}>\n      <SendToBlock address={data?.recipient || ''} />\n\n      <FieldsGrid title={`NFT${maybePlural(tokens)}`}>\n        <NftItems tokens={tokens} />\n      </FieldsGrid>\n\n      {children}\n    </ReviewTransaction>\n  )\n}\n\nexport default ReviewNftBatch\n","import type { SafeCollectibleResponse } from '@safe-global/safe-gateway-typescript-sdk'\nimport NftIcon from '@/public/images/common/nft.svg'\nimport SendNftBatch from './SendNftBatch'\nimport ReviewNftBatch from './ReviewNftBatch'\nimport { TxFlowType } from '@/services/analytics'\nimport { TxFlow } from '../../TxFlow'\nimport { TxFlowStep } from '../../TxFlowStep'\n\nexport type NftTransferParams = {\n  recipient: string\n  tokens: SafeCollectibleResponse[]\n}\n\ntype NftTransferFlowProps = Partial<NftTransferParams>\n\nconst defaultParams: NftTransferParams = {\n  recipient: '',\n  tokens: [],\n}\n\nconst NftTransferFlow = (params: NftTransferFlowProps) => (\n  <TxFlow\n    initialData={{\n      ...defaultParams,\n      ...params,\n    }}\n    icon={NftIcon}\n    subtitle=\"Send NFTs\"\n    eventCategory={TxFlowType.NFT_TRANSFER}\n    ReviewTransactionComponent={ReviewNftBatch}\n  >\n    <TxFlowStep title=\"New transaction\">\n      <SendNftBatch />\n    </TxFlowStep>\n  </TxFlow>\n)\n\nexport default NftTransferFlow\n","var _path, _path2;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nvar SvgNft = function SvgNft(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 64,\n    height: 64,\n    viewBox: \"0 0 64 64\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M54.9688 20.9422H8.87817V25.5644H54.9688V20.9422Z\",\n    fill: \"currentColor\"\n  })), _path2 || (_path2 = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M56.4301 23.84L55.8541 23.3991C55.2354 22.9262 55.111 22.0444 55.5768 21.4222L56.0141 20.8356C56.7252 19.9004 56.4123 18.752 55.5946 17.7884L49.6355 9.44356C48.7395 8.18844 47.2923 7.44178 45.7492 7.44178H18.2328C16.6897 7.44178 15.2426 8.18844 14.3466 9.44356L8.40167 17.7884C7.58389 18.752 7.27456 19.8969 7.98212 20.8356L8.41945 21.4222C8.88167 22.048 8.76078 22.9262 8.14212 23.3991L7.56612 23.84C6.63101 24.5511 6.44612 25.8844 7.15723 26.8196L28.0994 55.9787C28.4123 56.3876 28.8959 56.6293 29.4115 56.6293H34.5777C35.0932 56.6293 35.5768 56.3876 35.8897 55.9787L56.8426 26.8196C57.5537 25.8844 57.3688 24.5476 56.4337 23.84H56.4301ZM32.4657 52.3982C32.2274 52.7111 31.7581 52.7111 31.5199 52.3982L10.5706 23.6729C10.3323 23.36 10.4106 22.9049 10.6417 22.5956L17.2657 13.312C17.8239 12.5262 18.727 12.064 19.6906 12.064H44.2915C45.255 12.064 46.1581 12.5298 46.7163 13.312L53.351 22.5956C53.5857 22.9049 53.6603 23.3636 53.4221 23.6729L32.4621 52.3982H32.4657Z\",\n    fill: \"currentColor\"\n  })));\n};\nexport default SvgNft;"],"names":["Field","NftItem","image","name","description","Stack","direction","spacing","flexWrap","alignItems","Box","flex","ImageFallback","src","fallbackSrc","fallbackComponent","SvgIcon","component","NftIcon","inheritViewBox","sx","width","height","alt","minWidth","maxWidth","xl","Typography","data-testid","variant","fontWeight","whiteSpace","overflow","textOverflow","color","display","NftItems","tokens","gap","maxHeight","minHeight","map","token","imageUri","logoUri","tokenName","tokenSymbol","id","address","data","onNext","useContext","SendNftBatch","TxFlowContext","formMethods","useForm","defaultValues","recipient","handleSubmit","watch","formState","errors","isAddressValid","TxCard","FormProvider","form","onSubmit","onFormSubmit","FormControl","fullWidth","mb","mt","AddressBookInput","canAdd","Divider","className","commonCss","pt","CardActions","Button","type","children","setSafeTx","setSafeTxError","SafeTxContext","safeAddress","useSafeAddress","useEffect","calls","createNftTransferParams","promise","length","createMultiSendCallOnlyTx","createTx","then","catch","ReviewTransaction","withDecodedData","SendToBlock","FieldsGrid","title","maybePlural","defaultParams","TxFlow","initialData","NftTransferFlow","params","icon","subtitle","eventCategory","TxFlowType","NFT_TRANSFER","ReviewTransactionComponent","ReviewNftBatch","TxFlowStep"],"sourceRoot":"","ignoreList":[]}