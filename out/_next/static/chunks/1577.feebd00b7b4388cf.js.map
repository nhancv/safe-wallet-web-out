{"version":3,"file":"static/chunks/1577.feebd00b7b4388cf.js","mappings":"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","sources":["webpack://_N_E/./src/components/tx-flow/common/constants.ts","webpack://_N_E/./src/features/recovery/services/recoveryEvents.ts","webpack://_N_E/./src/features/recovery/services/transaction.ts","webpack://_N_E/./src/features/recovery/hooks/useIsValidRecoveryExecution.ts","webpack://_N_E/./src/features/recovery/services/recovery-sender.ts","webpack://_N_E/./src/components/tx-flow/flows/RecoverAccount/RecoverAccountFlowReview.tsx","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/RecoverAccount/RecoverAccountFlowSetup.tsx","webpack://_N_E/./src/components/tx-flow/flows/RecoverAccount/index.tsx","webpack://_N_E/./src/hooks/useClock.ts","webpack://_N_E/./src/features/recovery/hooks/useRecoveryTxState.ts","webpack://_N_E/./src/services/analytics/events/recovery.ts"],"sourcesContent":["export const TOOLTIP_TITLES = {\n  THRESHOLD:\n    'The threshold of a Safe Account specifies how many signers need to confirm a Safe Account transaction before it can be executed.',\n  REVIEW_WINDOW:\n    'A period that begins after a recovery is submitted on-chain, during which the Safe Account signers can review the proposal and cancel it before it is executable.',\n  PROPOSAL_EXPIRY: 'A period after which the recovery proposal will expire and can no longer be executed.',\n} as const\n","import EventBus from '../../../services/EventBus'\n\nexport enum RecoveryEvent {\n  PROCESSING_BY_SMART_CONTRACT_WALLET = 'PROCESSING_BY_SMART_CONTRACT_WALLET',\n  PROCESSING = 'PROCESSING', // Submitted to the blockchain\n  PROCESSED = 'PROCESSED', // Executed on the blockchain\n  SUCCESS = 'SUCCESS', // Loaded from the blockchain\n  FAILED = 'FAILED',\n  REVERTED = 'REVERTED',\n}\n\nexport enum RecoveryTxType {\n  PROPOSAL = 'PROPOSAL',\n  EXECUTION = 'EXECUTION',\n  SKIP_EXPIRED = 'SKIP_EXPIRED',\n}\n\nexport interface RecoveryEvents {\n  [RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.PROCESSING]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.REVERTED]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    error: Error\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.PROCESSED]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.FAILED]: {\n    moduleAddress: string\n    txHash?: string\n    recoveryTxHash?: string\n    error: Error\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.SUCCESS]: {\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n}\n\nconst recoveryEventBus = new EventBus<RecoveryEvents>()\n\nexport const recoveryDispatch = recoveryEventBus.dispatch.bind(recoveryEventBus)\n\nexport const recoverySubscribe = recoveryEventBus.subscribe.bind(recoveryEventBus)\n\n// Log all events\nObject.values(RecoveryEvent).forEach((event: RecoveryEvent) => {\n  recoverySubscribe<RecoveryEvent>(event, (detail) => {\n    console.info(`Recovery ${event} event received`, detail)\n  })\n})\n","import { Interface } from 'ethers'\nimport { getSafeSingletonDeployment } from '@safe-global/safe-deployments'\nimport { SENTINEL_ADDRESS } from '@safe-global/protocol-kit/dist/src/utils/constants'\nimport { OperationType } from '@safe-global/safe-core-sdk-types'\nimport { sameAddress } from '@safe-global/utils/utils/addresses'\nimport { getModuleInstance, KnownContracts } from '@gnosis.pm/zodiac'\nimport type { MetaTransactionData } from '@safe-global/safe-core-sdk-types'\nimport { type SafeState, type AddressInfo } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\nimport type { Provider } from 'ethers'\n\nexport function getRecoveryProposalTransactions({\n  safe,\n  newThreshold,\n  newOwners,\n}: {\n  safe: SafeState\n  newThreshold: number\n  newOwners: Array<AddressInfo>\n}): Array<MetaTransactionData> {\n  const safeDeployment = getSafeSingletonDeployment({ network: safe.chainId, version: safe.version ?? undefined })\n\n  if (!safeDeployment) {\n    throw new Error('Safe deployment not found')\n  }\n\n  const safeInterface = new Interface(safeDeployment.abi)\n\n  // Cache owner changes to determine prevOwner\n  let _owners = safe.owners.map((owner) => owner.value)\n\n  // Don't add/remove same owners\n  const ownersToAdd = newOwners\n    .filter((newOwner) => !_owners.some((oldOwner) => sameAddress(oldOwner, newOwner.value)))\n    .map((owner) => owner.value)\n  const ownersToRemove = _owners.filter(\n    (oldOwner) => !newOwners.some((newOwner) => sameAddress(newOwner.value, oldOwner)),\n  )\n\n  // Check whether threshold should be changed after owner management\n  let changeThreshold = newThreshold !== safe.threshold\n\n  // Owner management transaction data\n  const txData: Array<string> = []\n\n  // Iterate of existing/new owners and swap, add, remove accordingly\n  for (let index = 0; index < Math.max(ownersToAdd.length, ownersToRemove.length); index++) {\n    const ownerToAdd = ownersToAdd[index]\n    const ownerToRemove = ownersToRemove[index]\n\n    const prevOwner = (() => {\n      const ownerIndex = _owners.findIndex((owner) => sameAddress(owner, ownerToRemove))\n      return ownerIndex === 0 ? SENTINEL_ADDRESS : _owners[ownerIndex - 1]\n    })()\n\n    // Swap existing owner with new one\n    if (ownerToRemove && ownerToAdd) {\n      const swapOwner = safeInterface.encodeFunctionData('swapOwner', [prevOwner, ownerToRemove, ownerToAdd])\n      txData.push(swapOwner)\n\n      // Swap owner in cache\n      _owners = _owners.map((owner) => (sameAddress(owner, ownerToRemove) ? ownersToAdd[index] : owner))\n    }\n    // Add new owner and set threshold\n    else if (ownerToAdd) {\n      const threshold = Math.min(newThreshold, _owners.length + 1)\n\n      const addOwnerWithThreshold = safeInterface.encodeFunctionData('addOwnerWithThreshold', [ownerToAdd, threshold])\n      txData.push(addOwnerWithThreshold)\n\n      changeThreshold = false\n\n      // Add owner to cache\n      _owners.push(ownerToAdd)\n    }\n    // Remove existing owner and set threshold\n    else if (ownerToRemove) {\n      const threshold = Math.min(newThreshold, _owners.length - 1)\n\n      const removeOwner = safeInterface.encodeFunctionData('removeOwner', [prevOwner, ownerToRemove, threshold])\n      txData.push(removeOwner)\n\n      changeThreshold = false\n\n      // Remove owner from cache\n      _owners = _owners.filter((owner) => !sameAddress(owner, ownerToRemove))\n    }\n  }\n\n  // Only swapOwner will be called\n  if (changeThreshold) {\n    txData.push(safeInterface.encodeFunctionData('changeThreshold', [newThreshold]))\n  }\n\n  return txData.map((data) => ({\n    to: safe.address.value,\n    value: '0',\n    operation: OperationType.Call,\n    data,\n  }))\n}\n\nexport async function getRecoverySkipTransaction(\n  recovery: RecoveryQueueItem,\n  provider: Provider,\n): Promise<MetaTransactionData> {\n  const delayModifier = getModuleInstance(KnownContracts.DELAY, recovery.address, provider)\n\n  const newTxNonce = recovery.args.queueNonce + 1n\n\n  return {\n    to: await delayModifier.getAddress(),\n    value: '0',\n    operation: OperationType.Call,\n    data: delayModifier.interface.encodeFunctionData('setTxNonce', [newTxNonce]),\n  }\n}\n","import { getModuleInstance, KnownContracts } from '@gnosis.pm/zodiac'\nimport type { SafeTransaction } from '@safe-global/safe-core-sdk-types'\n\nimport useWallet from '../../../hooks/wallets/useWallet'\nimport { useWeb3ReadOnly } from '../../../hooks/wallets/web3'\nimport useAsync from '@safe-global/utils/hooks/useAsync'\nimport useSafeInfo from '../../../hooks/useSafeInfo'\nimport { getPatchedSignerProvider } from '../../../hooks/useIsValidExecution'\nimport { useRecoveryTxState } from './useRecoveryTxState'\nimport { useIsRecoverer } from './useIsRecoverer'\nimport type { AsyncResult } from '@safe-global/utils/hooks/useAsync'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function useIsValidRecoveryExecTransactionFromModule(\n  delayModifierAddress?: string,\n  safeTx?: SafeTransaction,\n): AsyncResult<boolean> {\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const web3ReadOnly = useWeb3ReadOnly()\n  const isRecoverer = useIsRecoverer()\n\n  return useAsync(async () => {\n    if (!isRecoverer || !safeTx || !wallet || !web3ReadOnly || !delayModifierAddress) {\n      return\n    }\n\n    const provider = getPatchedSignerProvider(wallet, safe.chainId, web3ReadOnly)\n    const delayModifier = getModuleInstance(KnownContracts.DELAY, delayModifierAddress, provider)\n\n    const signer = await provider.getSigner()\n    const contract = delayModifier.connect(signer)\n\n    return contract.execTransactionFromModule.staticCall(\n      safeTx.data.to,\n      safeTx.data.value,\n      safeTx.data.data,\n      safeTx.data.operation,\n    )\n  }, [isRecoverer, safeTx, wallet, web3ReadOnly, safe.chainId, delayModifierAddress])\n}\n\nexport function useIsValidRecoveryExecuteNextTx(recovery: RecoveryQueueItem): AsyncResult<boolean> {\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const web3ReadOnly = useWeb3ReadOnly()\n  const { isExecutable } = useRecoveryTxState(recovery)\n\n  return useAsync(async () => {\n    if (!isExecutable || !wallet?.address || !web3ReadOnly) {\n      return\n    }\n\n    const provider = getPatchedSignerProvider(wallet, safe.chainId, web3ReadOnly)\n    const delayModifier = getModuleInstance(KnownContracts.DELAY, recovery.address, provider)\n\n    const signer = await provider.getSigner()\n    const contract = delayModifier.connect(signer)\n\n    const { to, value, data, operation } = recovery.args\n\n    await contract.executeNextTx.staticCall(to, value, data, operation)\n\n    return true\n  }, [isExecutable, recovery.address, recovery.args, safe.chainId, wallet, web3ReadOnly])\n}\n\nexport function useIsValidRecoverySkipExpired(recovery: RecoveryQueueItem): AsyncResult<boolean> {\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const web3ReadOnly = useWeb3ReadOnly()\n  const { isExpired } = useRecoveryTxState(recovery)\n\n  return useAsync(async () => {\n    if (!isExpired || !wallet?.address || !web3ReadOnly) {\n      return\n    }\n\n    const provider = getPatchedSignerProvider(wallet, safe.chainId, web3ReadOnly)\n    const delayModifier = getModuleInstance(KnownContracts.DELAY, recovery.address, provider)\n\n    const signer = await provider.getSigner()\n    const contract = delayModifier.connect(signer)\n\n    await contract.skipExpired.staticCall()\n\n    return true\n  }, [isExpired, recovery.address, safe.chainId, wallet, web3ReadOnly])\n}\n","import { getModuleInstance, KnownContracts } from '@gnosis.pm/zodiac'\nimport { type SafeState } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\nimport type { SafeTransaction } from '@safe-global/safe-core-sdk-types'\nimport type { TransactionAddedEvent } from '@gnosis.pm/zodiac/dist/cjs/types/Delay'\nimport type { Eip1193Provider, Overrides, TransactionResponse } from 'ethers'\n\nimport { didReprice, didRevert } from '@/utils/ethers-utils'\nimport { recoveryDispatch, RecoveryEvent, RecoveryTxType } from './recoveryEvents'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport { getUncheckedSigner } from '../../../services/tx/tx-sender/sdk'\nimport { isSmartContractWallet } from '@/utils/wallets'\n\nasync function getDelayModifierContract({\n  provider,\n  chainId,\n  delayModifierAddress,\n  signerAddress,\n}: {\n  provider: Eip1193Provider\n  chainId: string\n  delayModifierAddress: string\n  signerAddress: string\n}) {\n  const isSmartContract = await isSmartContractWallet(chainId, signerAddress)\n\n  const signer = await getUncheckedSigner(provider)\n  const delayModifier = getModuleInstance(KnownContracts.DELAY, delayModifierAddress, signer).connect(signer)\n\n  return {\n    isUnchecked: isSmartContract,\n    delayModifier,\n  }\n}\n\nfunction waitForRecoveryTx({\n  tx,\n  ...payload\n}: {\n  moduleAddress: string\n  recoveryTxHash: string\n  tx: TransactionResponse\n  txType: RecoveryTxType\n}) {\n  const event = {\n    ...payload,\n    txHash: tx.hash,\n  }\n\n  recoveryDispatch(RecoveryEvent.PROCESSING, event)\n  tx.wait()\n    .then((receipt) => {\n      if (didRevert(receipt!)) {\n        recoveryDispatch(RecoveryEvent.REVERTED, {\n          ...event,\n          error: new Error('Transaction reverted by EVM'),\n        })\n      } else {\n        recoveryDispatch(RecoveryEvent.PROCESSED, event)\n      }\n    })\n    .catch((error) => {\n      if (didReprice(error)) {\n        recoveryDispatch(RecoveryEvent.PROCESSED, event)\n      } else {\n        recoveryDispatch(RecoveryEvent.FAILED, {\n          ...event,\n          error: asError(error),\n        })\n      }\n    })\n}\n\nexport async function dispatchRecoveryProposal({\n  provider,\n  safe,\n  safeTx,\n  delayModifierAddress,\n  signerAddress,\n  overrides,\n}: {\n  provider: Eip1193Provider\n  safe: SafeState\n  safeTx: SafeTransaction\n  delayModifierAddress: string\n  signerAddress: string\n  overrides: Overrides\n}) {\n  const { delayModifier, isUnchecked } = await getDelayModifierContract({\n    provider,\n    chainId: safe.chainId,\n    delayModifierAddress,\n    signerAddress,\n  })\n\n  const txType = RecoveryTxType.PROPOSAL\n  let recoveryTxHash: string | undefined\n\n  try {\n    // Get recovery tx hash as a form of ID for FAILED event in event bus\n    recoveryTxHash = await delayModifier.getTransactionHash(\n      safeTx.data.to,\n      safeTx.data.value,\n      safeTx.data.data,\n      safeTx.data.operation,\n    )\n\n    const tx = await delayModifier.execTransactionFromModule(\n      safeTx.data.to,\n      safeTx.data.value,\n      safeTx.data.data,\n      safeTx.data.operation,\n      overrides,\n    )\n\n    if (isUnchecked) {\n      recoveryDispatch(RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET, {\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        txHash: tx.hash,\n      })\n    } else {\n      waitForRecoveryTx({\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        tx,\n      })\n    }\n  } catch (error) {\n    recoveryDispatch(RecoveryEvent.FAILED, {\n      moduleAddress: delayModifierAddress,\n      recoveryTxHash,\n      txType,\n      error: asError(error),\n    })\n\n    throw error\n  }\n}\n\nexport async function dispatchRecoveryExecution({\n  provider,\n  chainId,\n  args,\n  delayModifierAddress,\n  signerAddress,\n  overrides,\n}: {\n  provider: Eip1193Provider\n  chainId: string\n  args: TransactionAddedEvent.Log['args']\n  delayModifierAddress: string\n  signerAddress: string\n  overrides: Overrides\n}) {\n  const { delayModifier, isUnchecked } = await getDelayModifierContract({\n    provider,\n    chainId,\n    delayModifierAddress,\n    signerAddress,\n  })\n\n  const txType = RecoveryTxType.EXECUTION\n\n  try {\n    const tx = await delayModifier.executeNextTx(args.to, args.value, args.data, args.operation, overrides)\n\n    if (isUnchecked) {\n      recoveryDispatch(RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET, {\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash: args.txHash,\n        txType,\n        txHash: tx.hash,\n      })\n    } else {\n      waitForRecoveryTx({\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash: args.txHash,\n        txType,\n        tx,\n      })\n    }\n  } catch (error) {\n    recoveryDispatch(RecoveryEvent.FAILED, {\n      moduleAddress: delayModifierAddress,\n      recoveryTxHash: args.txHash,\n      txType,\n      error: asError(error),\n    })\n\n    throw error\n  }\n}\n\nexport async function dispatchRecoverySkipExpired({\n  provider,\n  chainId,\n  delayModifierAddress,\n  recoveryTxHash,\n  signerAddress,\n}: {\n  provider: Eip1193Provider\n  chainId: string\n  delayModifierAddress: string\n  recoveryTxHash: string\n  signerAddress: string\n}) {\n  const { delayModifier, isUnchecked } = await getDelayModifierContract({\n    provider,\n    chainId,\n    delayModifierAddress,\n    signerAddress,\n  })\n\n  const txType = RecoveryTxType.SKIP_EXPIRED\n\n  try {\n    const tx = await delayModifier.skipExpired()\n\n    if (isUnchecked) {\n      recoveryDispatch(RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET, {\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        txHash: tx.hash,\n      })\n    } else {\n      waitForRecoveryTx({\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        tx,\n      })\n    }\n  } catch (error) {\n    recoveryDispatch(RecoveryEvent.FAILED, {\n      moduleAddress: delayModifierAddress,\n      recoveryTxHash,\n      txType,\n      error: asError(error),\n    })\n\n    throw error\n  }\n}\n","import { trackEvent } from '@/services/analytics'\nimport { RECOVERY_EVENTS } from '@/services/analytics/events/recovery'\nimport { CardActions, Button, Typography, Divider, Box, CircularProgress } from '@mui/material'\nimport { useContext, useEffect, useState } from 'react'\nimport type { ReactElement } from 'react'\n\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { getRecoveryProposalTransactions } from '@/features/recovery/services/transaction'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport ConfirmationTitle, { ConfirmationTitleTypes } from '@/components/tx/SignOrExecuteForm/ConfirmationTitle'\nimport TxChecks from '@/components/tx-flow/features/TxChecks/TxChecks'\nimport TxCard from '../../common/TxCard'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport CheckWallet from '@/components/common/CheckWallet'\nimport { dispatchRecoveryProposal } from '@/features/recovery/services/recovery-sender'\nimport { createMultiSendCallOnlyTx, createTx } from '@/services/tx/tx-sender'\nimport { RecoverAccountFlowFields } from '.'\nimport { OwnerList } from '../../common/OwnerList'\nimport { selectDelayModifierByRecoverer } from '@/features/recovery/services/selectors'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport useOnboard from '@/hooks/wallets/useOnboard'\nimport { TxModalContext } from '../..'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport { trackError, Errors } from '@/services/exceptions'\nimport { getPeriod } from '@safe-global/utils/utils/date'\nimport useRecovery from '@/features/recovery/hooks/useRecovery'\nimport { useIsValidRecoveryExecTransactionFromModule } from '@/features/recovery/hooks/useIsValidRecoveryExecution'\nimport type { RecoverAccountFlowProps } from '.'\nimport { isWalletRejection } from '@/utils/wallets'\nimport WalletRejectionError from '@/components/tx/SignOrExecuteForm/WalletRejectionError'\n\nimport commonCss from '@/components/tx-flow/common/styles.module.css'\nimport { BlockaidBalanceChanges } from '@/components/tx/security/blockaid/BlockaidBalanceChange'\nimport NetworkWarning from '@/components/new-safe/create/NetworkWarning'\nimport { useGetTransactionDetailsQuery } from '@/store/api/gateway'\nimport { skipToken } from '@reduxjs/toolkit/query'\nimport useTxPreview from '@/components/tx/confirmation-views/useTxPreview'\nimport Summary from '@/components/transactions/TxDetails/Summary'\nimport useGasPrice from '@/hooks/useGasPrice'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport { FEATURES, hasFeature } from '@safe-global/utils/utils/chains'\n\nexport function RecoverAccountFlowReview({ params }: { params: RecoverAccountFlowProps }): ReactElement | null {\n  // Form state\n  const [isSubmittable, setIsSubmittable] = useState<boolean>(true)\n  const [submitError, setSubmitError] = useState<Error | undefined>()\n  const [isRejectedByUser, setIsRejectedByUser] = useState<Boolean>(false)\n\n  // Hooks\n  const { setTxFlow } = useContext(TxModalContext)\n  const { safeTx, safeTxError, setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n  const { safe } = useSafeInfo()\n  const wallet = useWallet()\n  const onboard = useOnboard()\n  const [data] = useRecovery()\n  const recovery = data && selectDelayModifierByRecoverer(data, wallet?.address ?? '')\n  const [, executionValidationError] = useIsValidRecoveryExecTransactionFromModule(recovery?.address, safeTx)\n  const [gasPrice] = useGasPrice()\n  const chain = useCurrentChain()\n\n  const { data: txDetails } = useGetTransactionDetailsQuery(skipToken)\n  const [txPreview] = useTxPreview(safeTx?.data, undefined, txDetails?.txId)\n\n  // Proposal\n  const newThreshold = Number(params[RecoverAccountFlowFields.threshold])\n  const newOwners = params[RecoverAccountFlowFields.owners]\n\n  useEffect(() => {\n    const transactions = getRecoveryProposalTransactions({\n      safe,\n      newThreshold,\n      newOwners,\n    })\n\n    const promise = transactions.length > 1 ? createMultiSendCallOnlyTx(transactions) : createTx(transactions[0])\n\n    promise.then(setSafeTx).catch(setSafeTxError)\n  }, [newThreshold, newOwners, safe, setSafeTx, setSafeTxError])\n\n  // On modal submit\n  const onSubmit = async () => {\n    if (!recovery || !onboard || !wallet || !safeTx || !gasPrice) {\n      return\n    }\n\n    setIsSubmittable(false)\n    setSubmitError(undefined)\n    setIsRejectedByUser(false)\n\n    const isEIP1559 = chain && hasFeature(chain, FEATURES.EIP1559)\n    const overrides = isEIP1559\n      ? {\n          maxFeePerGas: gasPrice?.maxFeePerGas?.toString(),\n          maxPriorityFeePerGas: gasPrice?.maxPriorityFeePerGas?.toString(),\n        }\n      : { gasPrice: gasPrice?.maxFeePerGas?.toString() }\n\n    try {\n      await dispatchRecoveryProposal({\n        provider: wallet.provider,\n        safe,\n        safeTx,\n        delayModifierAddress: recovery.address,\n        signerAddress: wallet.address,\n        overrides,\n      })\n      trackEvent({ ...RECOVERY_EVENTS.SUBMIT_RECOVERY_ATTEMPT })\n    } catch (_err) {\n      const err = asError(_err)\n      if (isWalletRejection(err)) {\n        setIsRejectedByUser(true)\n      } else {\n        trackError(Errors._804, err)\n        setSubmitError(err)\n      }\n      setIsSubmittable(true)\n      return\n    }\n\n    setTxFlow(undefined)\n  }\n\n  const submitDisabled = !safeTx || !isSubmittable || !recovery\n\n  return (\n    <>\n      <TxCard>\n        <Typography mb={1}>\n          This transaction will reset the Account setup, changing the signers\n          {newThreshold !== safe.threshold ? ' and threshold' : ''}.\n        </Typography>\n\n        <OwnerList owners={newOwners} />\n\n        <Divider className={commonCss.nestedDivider} sx={{ mt: 'var(--space-2) !important' }} />\n\n        <Box my={1}>\n          <Typography variant=\"body2\" color=\"text.secondary\" gutterBottom>\n            After recovery, Safe Account transactions will require:\n          </Typography>\n          <Typography>\n            <b>{params.threshold}</b> out of <b>{params[RecoverAccountFlowFields.owners].length} signers.</b>\n          </Typography>\n        </Box>\n\n        <Divider className={commonCss.nestedDivider} />\n\n        {txPreview && <Summary txDetails={txDetails} safeTxData={safeTx?.data} {...txPreview} />}\n\n        <BlockaidBalanceChanges />\n      </TxCard>\n\n      {safeTx && <TxChecks transaction={safeTx} executionOwner={safe.owners[0].value} />}\n\n      <TxCard>\n        <>\n          <ConfirmationTitle variant={ConfirmationTitleTypes.execute} />\n\n          {safeTxError && (\n            <ErrorMessage error={safeTxError}>\n              This recovery will most likely fail. To save gas costs, avoid executing the transaction.\n            </ErrorMessage>\n          )}\n\n          {executionValidationError && (\n            <ErrorMessage error={executionValidationError}>\n              This transaction will most likely fail. To save gas costs, avoid executing the transaction.\n            </ErrorMessage>\n          )}\n\n          {submitError && (\n            <ErrorMessage error={submitError}>Error submitting the transaction. Please try again.</ErrorMessage>\n          )}\n\n          <NetworkWarning />\n\n          {recovery?.delay !== undefined && (\n            <ErrorMessage level=\"info\">\n              Recovery will be{' '}\n              {recovery.delay === 0n ? 'immediately possible' : `possible in ${getPeriod(Number(recovery.delay))}`}{' '}\n              after this transaction is executed.\n            </ErrorMessage>\n          )}\n\n          {isRejectedByUser && <WalletRejectionError />}\n\n          <Divider className={commonCss.nestedDivider} />\n\n          <CardActions sx={{ mt: 'var(--space-1) !important' }}>\n            <CheckWallet allowNonOwner checkNetwork>\n              {(isOk) => (\n                <Button\n                  data-testid=\"execute-btn\"\n                  variant=\"contained\"\n                  disabled={!isOk || submitDisabled}\n                  onClick={onSubmit}\n                >\n                  {!isSubmittable ? <CircularProgress size={20} /> : 'Execute'}\n                </Button>\n              )}\n            </CheckWallet>\n          </CardActions>\n        </>\n      </TxCard>\n    </>\n  )\n}\n","export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import {\n  Typography,\n  Divider,\n  CardActions,\n  Button,\n  SvgIcon,\n  Grid,\n  MenuItem,\n  TextField,\n  IconButton,\n  Tooltip,\n  Alert,\n} from '@mui/material'\nimport { useForm, FormProvider, useFieldArray, Controller } from 'react-hook-form'\nimport { Fragment } from 'react'\nimport type { ReactElement } from 'react'\n\nimport TxCard from '../../common/TxCard'\nimport AddIcon from '@/public/images/common/add.svg'\nimport DeleteIcon from '@/public/images/common/delete.svg'\nimport { RecoverAccountFlowFields } from '.'\nimport AddressBookInput from '@/components/common/AddressBookInput'\nimport { TOOLTIP_TITLES } from '../../common/constants'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { sameAddress } from '@safe-global/utils/utils/addresses'\nimport type { RecoverAccountFlowProps } from '.'\nimport { type AddressInfo } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\n\nimport commonCss from '@/components/tx-flow/common/styles.module.css'\nimport { maybePlural } from '@safe-global/utils/utils/formatters'\n\nexport function _isSameSetup({\n  oldOwners,\n  oldThreshold,\n  newOwners,\n  newThreshold,\n}: {\n  oldOwners: Array<AddressInfo>\n  oldThreshold: number\n  newOwners: Array<AddressInfo>\n  newThreshold: number\n}): boolean {\n  if (oldThreshold !== newThreshold) {\n    return false\n  }\n\n  if (oldOwners.length !== newOwners.length) {\n    return false\n  }\n\n  return oldOwners.every((oldOwner) => {\n    return newOwners.some((newOwner) => sameAddress(oldOwner.value, newOwner.value))\n  })\n}\n\nexport function RecoverAccountFlowSetup({\n  params,\n  onSubmit,\n}: {\n  params: RecoverAccountFlowProps\n  onSubmit: (formData: RecoverAccountFlowProps) => void\n}): ReactElement {\n  const { safeAddress, safe } = useSafeInfo()\n\n  const formMethods = useForm<RecoverAccountFlowProps>({\n    defaultValues: params,\n    mode: 'onChange',\n  })\n\n  const newOwners = formMethods.watch(RecoverAccountFlowFields.owners)\n  const newThreshold = formMethods.watch(RecoverAccountFlowFields.threshold)\n\n  const { fields, append, remove } = useFieldArray({\n    control: formMethods.control,\n    name: RecoverAccountFlowFields.owners,\n  })\n\n  const isSameSetup = _isSameSetup({\n    oldOwners: safe.owners,\n    oldThreshold: safe.threshold,\n    newOwners,\n    newThreshold: Number(newThreshold),\n  })\n\n  return (\n    <FormProvider {...formMethods}>\n      <form onSubmit={formMethods.handleSubmit(onSubmit)} className={commonCss.form}>\n        <TxCard>\n          <div>\n            <Typography\n              variant=\"h6\"\n              gutterBottom\n              sx={{\n                fontWeight: 700,\n              }}\n            >\n              Add signer(s)\n            </Typography>\n\n            <Typography\n              variant=\"body2\"\n              sx={{\n                mb: 1,\n              }}\n            >\n              Set the new signer wallet(s) of this Safe Account and how many need to confirm a transaction before it can\n              be executed.\n            </Typography>\n          </div>\n\n          <Grid container spacing={3} direction=\"row\">\n            {fields.map((field, index) => (\n              <Fragment key={index}>\n                <Grid item xs={11}>\n                  <AddressBookInput\n                    label={`Signer ${index + 1}`}\n                    name={`${RecoverAccountFlowFields.owners}.${index}.value`}\n                    required\n                    fullWidth\n                    key={field.id}\n                    validate={(value) => {\n                      if (sameAddress(value, safeAddress)) {\n                        return 'The Safe Account cannot own itself'\n                      }\n\n                      const isDuplicate = newOwners.filter((owner) => owner.value === value).length > 1\n                      if (isDuplicate) {\n                        return 'Already designated to be a signer'\n                      }\n                    }}\n                  />\n                </Grid>\n\n                <Grid\n                  item\n                  xs={1}\n                  sx={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {index > 0 && (\n                    <IconButton onClick={() => remove(index)}>\n                      <SvgIcon component={DeleteIcon} inheritViewBox />\n                    </IconButton>\n                  )}\n                </Grid>\n              </Fragment>\n            ))}\n          </Grid>\n\n          <Button\n            onClick={() => append({ value: '' })}\n            variant=\"text\"\n            startIcon={<SvgIcon component={AddIcon} inheritViewBox fontSize=\"small\" />}\n            sx={{ alignSelf: 'flex-start', my: 1 }}\n          >\n            Add new signer\n          </Button>\n\n          <Divider className={commonCss.nestedDivider} />\n\n          <div>\n            <Typography\n              variant=\"h6\"\n              gutterBottom\n              sx={{\n                fontWeight: 700,\n              }}\n            >\n              Threshold\n              <Tooltip title={TOOLTIP_TITLES.THRESHOLD} arrow placement=\"top\">\n                <span>\n                  <SvgIcon\n                    component={InfoIcon}\n                    inheritViewBox\n                    color=\"border\"\n                    fontSize=\"small\"\n                    sx={{\n                      verticalAlign: 'middle',\n                      ml: 0.5,\n                    }}\n                  />\n                </span>\n              </Tooltip>\n            </Typography>\n\n            <Typography\n              variant=\"body2\"\n              sx={{\n                mb: 1,\n              }}\n            >\n              After recovery, Safe Account transactions will require:\n            </Typography>\n          </div>\n\n          <Grid\n            container\n            direction=\"row\"\n            sx={{\n              alignItems: 'center',\n              gap: 2,\n              mb: 1,\n            }}\n          >\n            <Grid item>\n              <Controller\n                control={formMethods.control}\n                name={RecoverAccountFlowFields.threshold}\n                render={({ field }) => (\n                  <TextField select {...field}>\n                    {fields.map((_, index) => {\n                      const value = index + 1\n                      return (\n                        <MenuItem key={index} value={value}>\n                          {value}\n                        </MenuItem>\n                      )\n                    })}\n                  </TextField>\n                )}\n              />\n            </Grid>\n\n            <Grid item>\n              <Typography>\n                out of {fields.length} signer{maybePlural(fields)}\n              </Typography>\n            </Grid>\n          </Grid>\n\n          {isSameSetup && (\n            <Alert severity=\"error\" sx={{ border: 'unset' }}>\n              The proposed Account setup is the same as the current one.\n            </Alert>\n          )}\n\n          <Divider className={commonCss.nestedDivider} />\n\n          <CardActions sx={{ mt: '0 !important' }}>\n            <Button data-testid=\"next-btn\" variant=\"contained\" type=\"submit\" sx={{ mt: 1 }} disabled={isSameSetup}>\n              Next\n            </Button>\n          </CardActions>\n        </TxCard>\n      </form>\n    </FormProvider>\n  )\n}\n","import type { ReactElement } from 'react'\nimport type { AddressEx } from '@safe-global/safe-gateway-typescript-sdk'\nimport TxLayout from '@/components/tx-flow/common/TxLayout'\nimport SaveAddressIcon from '@/public/images/common/save-address.svg'\nimport useTxStepper from '../../useTxStepper'\nimport { RecoverAccountFlowReview } from './RecoverAccountFlowReview'\nimport { RecoverAccountFlowSetup } from './RecoverAccountFlowSetup'\nimport { TxFlowType } from '@/services/analytics'\n\nexport enum RecoverAccountFlowFields {\n  owners = 'owners',\n  threshold = 'threshold',\n}\n\nexport type RecoverAccountFlowProps = {\n  // RHF accept primitive field arrays\n  [RecoverAccountFlowFields.owners]: Array<AddressEx>\n  [RecoverAccountFlowFields.threshold]: string\n}\n\nfunction RecoverAccountFlow(): ReactElement {\n  const { data, step, nextStep, prevStep } = useTxStepper<RecoverAccountFlowProps>(\n    {\n      [RecoverAccountFlowFields.owners]: [{ value: '' }],\n      [RecoverAccountFlowFields.threshold]: '1',\n    },\n    TxFlowType.START_RECOVERY,\n  )\n\n  const steps = [\n    <RecoverAccountFlowSetup key={0} params={data} onSubmit={(formData) => nextStep({ ...data, ...formData })} />,\n    <RecoverAccountFlowReview key={1} params={data} />,\n  ]\n\n  return (\n    <TxLayout\n      title={step === 0 ? 'Start Account recovery' : 'Confirm transaction'}\n      subtitle=\"Change Account settings\"\n      icon={SaveAddressIcon}\n      step={step}\n      onBack={prevStep}\n      hideNonce\n    >\n      {steps}\n    </TxLayout>\n  )\n}\n\nexport default RecoverAccountFlow\n","import { useState, useEffect } from 'react'\n\nexport function useClock(interval = 1_000): number {\n  const [timestamp, setTimestamp] = useState(Date.now())\n\n  useEffect(() => {\n    const timeout = setInterval(() => {\n      setTimestamp((prev) => prev + interval)\n    }, interval)\n\n    return () => {\n      clearInterval(timeout)\n    }\n  }, [interval])\n\n  return timestamp\n}\n","import { useClock } from '../../../hooks/useClock'\nimport { selectDelayModifierByTxHash } from '@/features/recovery/services/selectors'\nimport recoveryStore from '@/features/recovery/components/RecoveryContext'\nimport { sameAddress } from '@safe-global/utils/utils/addresses'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function useRecoveryTxState({ validFrom, expiresAt, transactionHash, args, address }: RecoveryQueueItem): {\n  isNext: boolean\n  isExecutable: boolean\n  isExpired: boolean\n  isPending: boolean\n  remainingSeconds: number\n} {\n  const { state, pending } = recoveryStore.useStore() || {}\n  const recovery = state?.[0]\n  const delayModifier = recovery && selectDelayModifierByTxHash(recovery, transactionHash)\n\n  // We don't display seconds in the interface, so we can use a 60s interval\n  const timestamp = useClock(60_000)\n  const remainingMs = Number(validFrom) - timestamp\n\n  const isValid = remainingMs <= 0\n  const isExpired = expiresAt !== null ? Number(expiresAt) <= Date.now() : false\n\n  // Check module address in case multiple Delay Modifiers enabled\n  const isNext =\n    !delayModifier ||\n    (sameAddress(delayModifier.address, address) && BigInt(args.queueNonce) === BigInt(delayModifier.txNonce))\n  const isExecutable = isNext && isValid && !isExpired\n  const isPending = !!pending?.[args.txHash]\n\n  const remainingSeconds = isValid ? 0 : Math.ceil(remainingMs / 1_000)\n\n  return { isNext, isExecutable, isExpired, remainingSeconds, isPending }\n}\n","import { EventType } from '@/services/analytics'\n\nconst RECOVERY_CATEGORY = 'recovery'\n\nexport const RECOVERY_EVENTS = {\n  SETUP_RECOVERY: {\n    action: 'Start recovery setup',\n    category: RECOVERY_CATEGORY,\n  },\n  SELECT_RECOVERY_METHOD: {\n    action: 'Select recovery method',\n    category: RECOVERY_CATEGORY,\n  },\n  CONTINUE_WITH_RECOVERY: {\n    action: 'Continue with recovery method',\n    category: RECOVERY_CATEGORY,\n  },\n  CONTINUE_TO_WAITLIST: {\n    action: 'Continue to waitlist',\n    category: RECOVERY_CATEGORY,\n  },\n  SYGNUM_APP: {\n    action: 'Go to Sygnum app',\n    category: RECOVERY_CATEGORY,\n  },\n  RECOVERY_SETTINGS: {\n    action: 'Recovery settings',\n    category: RECOVERY_CATEGORY,\n    event: EventType.META,\n  },\n  EDIT_RECOVERY: {\n    action: 'Start edit recovery',\n    category: RECOVERY_CATEGORY,\n  },\n  REMOVE_RECOVERY: {\n    action: 'Start recovery removal',\n    category: RECOVERY_CATEGORY,\n  },\n  START_RECOVERY: {\n    action: 'Start recovery proposal',\n    category: RECOVERY_CATEGORY,\n  },\n  CANCEL_RECOVERY: {\n    action: 'Start recovery cancellation',\n    category: RECOVERY_CATEGORY,\n  },\n  SHOW_ADVANCED: {\n    action: 'Show advanced recovery settings',\n    category: RECOVERY_CATEGORY,\n  },\n  DISMISS_PROPOSAL_CARD: {\n    action: 'Dismiss recovery proposal card',\n    category: RECOVERY_CATEGORY,\n  },\n  LEARN_MORE: {\n    action: 'Recovery info click',\n    category: RECOVERY_CATEGORY,\n  },\n  GO_BACK: {\n    action: 'Recovery cancellation back',\n    category: RECOVERY_CATEGORY,\n  },\n  GIVE_US_FEEDBACK: {\n    action: 'Recovery feedback click',\n    category: RECOVERY_CATEGORY,\n    event: EventType.CLICK,\n  },\n  CHECK_RECOVERY_PROPOSAL: {\n    action: 'Check recovery proposal',\n    category: RECOVERY_CATEGORY,\n  },\n  SUBMIT_RECOVERY_CREATE: {\n    action: 'Submit recovery setup',\n    category: RECOVERY_CATEGORY,\n    event: EventType.META,\n  },\n  SUBMIT_RECOVERY_EDIT: {\n    action: 'Submit recovery edit',\n    category: RECOVERY_CATEGORY,\n    event: EventType.META,\n  },\n  SUBMIT_RECOVERY_REMOVE: {\n    action: 'Submit recovery remove',\n    category: RECOVERY_CATEGORY,\n    event: EventType.META,\n  },\n  SUBMIT_RECOVERY_ATTEMPT: {\n    action: 'Submit recovery attempt',\n    category: RECOVERY_CATEGORY,\n    event: EventType.META,\n  },\n  SUBMIT_RECOVERY_CANCEL: {\n    action: 'Submit recovery cancel',\n    category: RECOVERY_CATEGORY,\n    event: EventType.META,\n  },\n}\n"],"names":["TOOLTIP_TITLES","THRESHOLD","REVIEW_WINDOW","PROPOSAL_EXPIRY","RecoveryEvent","RecoveryTxType","recoveryEventBus","EventBus","recoveryDispatch","dispatch","bind","recoverySubscribe","subscribe","Object","values","forEach","event","console","info","detail","getRecoveryProposalTransactions","safe","newThreshold","newOwners","safeDeployment","getSafeSingletonDeployment","network","chainId","version","undefined","safeInterface","Interface","abi","_owners","owners","map","owner","value","ownersToAdd","filter","some","sameAddress","oldOwner","newOwner","ownersToRemove","changeThreshold","threshold","txData","index","Math","max","length","ownerToAdd","ownerToRemove","prevOwner","ownerIndex","findIndex","SENTINEL_ADDRESS","swapOwner","encodeFunctionData","push","min","addOwnerWithThreshold","removeOwner","to","address","operation","OperationType","Call","data","getRecoverySkipTransaction","recovery","provider","delayModifier","getModuleInstance","KnownContracts","DELAY","newTxNonce","args","queueNonce","getAddress","interface","useIsValidRecoveryExecTransactionFromModule","delayModifierAddress","safeTx","wallet","useWallet","useSafeInfo","web3ReadOnly","useWeb3ReadOnly","isRecoverer","useIsRecoverer","useAsync","getPatchedSignerProvider","signer","getSigner","contract","connect","execTransactionFromModule","staticCall","useIsValidRecoveryExecuteNextTx","isExecutable","useRecoveryTxState","executeNextTx","useIsValidRecoverySkipExpired","isExpired","skipExpired","getDelayModifierContract","signerAddress","isSmartContract","isSmartContractWallet","getUncheckedSigner","isUnchecked","waitForRecoveryTx","tx","payload","txHash","hash","PROCESSING","wait","then","didRevert","receipt","REVERTED","error","PROCESSED","catch","didReprice","FAILED","asError","dispatchRecoveryProposal","recoveryTxHash","overrides","txType","PROPOSAL","getTransactionHash","PROCESSING_BY_SMART_CONTRACT_WALLET","moduleAddress","dispatchRecoveryExecution","EXECUTION","dispatchRecoverySkipExpired","SKIP_EXPIRED","RecoverAccountFlowReview","params","isSubmittable","setIsSubmittable","useState","submitError","setSubmitError","isRejectedByUser","setIsRejectedByUser","setTxFlow","useContext","TxModalContext","safeTxError","setSafeTx","setSafeTxError","SafeTxContext","onboard","useOnboard","useRecovery","selectDelayModifierByRecoverer","executionValidationError","gasPrice","useGasPrice","chain","useCurrentChain","txDetails","useGetTransactionDetailsQuery","skipToken","txPreview","useTxPreview","txId","Number","RecoverAccountFlowFields","useEffect","transactions","promise","createMultiSendCallOnlyTx","createTx","onSubmit","hasFeature","FEATURES","EIP1559","maxFeePerGas","toString","maxPriorityFeePerGas","trackEvent","RECOVERY_EVENTS","SUBMIT_RECOVERY_ATTEMPT","_err","err","isWalletRejection","trackError","Errors","_804","submitDisabled","TxCard","Typography","mb","OwnerList","Divider","className","commonCss","sx","mt","Box","my","variant","color","gutterBottom","b","Summary","safeTxData","BlockaidBalanceChanges","TxChecks","transaction","executionOwner","ConfirmationTitle","ConfirmationTitleTypes","execute","ErrorMessage","NetworkWarning","delay","level","getPeriod","WalletRejectionError","CardActions","CheckWallet","allowNonOwner","checkNetwork","Button","data-testid","disabled","isOk","onClick","CircularProgress","size","RecoverAccountFlowSetup","safeAddress","formMethods","useForm","defaultValues","mode","watch","fields","append","remove","useFieldArray","control","name","isSameSetup","_isSameSetup","oldOwners","oldThreshold","every","FormProvider","form","handleSubmit","div","fontWeight","Grid","container","spacing","direction","field","Fragment","item","xs","AddressBookInput","label","required","fullWidth","validate","id","display","alignItems","justifyContent","IconButton","SvgIcon","component","DeleteIcon","inheritViewBox","startIcon","AddIcon","fontSize","alignSelf","Tooltip","title","arrow","placement","span","InfoIcon","verticalAlign","ml","gap","Controller","render","TextField","select","_","MenuItem","maybePlural","Alert","severity","border","type","RecoverAccountFlow","step","nextStep","prevStep","useTxStepper","TxFlowType","START_RECOVERY","steps","formData","TxLayout","subtitle","icon","SaveAddressIcon","onBack","hideNonce","validFrom","expiresAt","transactionHash","state","pending","recoveryStore","useStore","selectDelayModifierByTxHash","timestamp","useClock","interval","setTimestamp","Date","now","timeout","setInterval","prev","clearInterval","remainingMs","isValid","isNext","BigInt","txNonce","isPending","remainingSeconds","ceil","RECOVERY_CATEGORY","SETUP_RECOVERY","action","category","SELECT_RECOVERY_METHOD","CONTINUE_WITH_RECOVERY","CONTINUE_TO_WAITLIST","SYGNUM_APP","RECOVERY_SETTINGS","EventType","META","EDIT_RECOVERY","REMOVE_RECOVERY","CANCEL_RECOVERY","SHOW_ADVANCED","DISMISS_PROPOSAL_CARD","LEARN_MORE","GO_BACK","GIVE_US_FEEDBACK","CLICK","CHECK_RECOVERY_PROPOSAL","SUBMIT_RECOVERY_CREATE","SUBMIT_RECOVERY_EDIT","SUBMIT_RECOVERY_REMOVE","SUBMIT_RECOVERY_CANCEL"],"sourceRoot":"","ignoreList":[]}