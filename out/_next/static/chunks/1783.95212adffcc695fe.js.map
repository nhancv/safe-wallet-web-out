{"version":3,"file":"static/chunks/1783.95212adffcc695fe.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@mui/icons-material/esm/South.js","webpack://_N_E/./src/components/tx/SendFromBlock/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessageOnChain/ReviewSignMessageOnChain.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessageOnChain/index.tsx","webpack://_N_E/./src/components/tx/SendFromBlock/styles.module.css"],"sourcesContent":["\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"m19 15-1.41-1.41L13 18.17V2h-2v16.17l-4.59-4.59L5 15l7 7z\"\n}), 'South');","import { type ReactElement } from 'react'\nimport { Box, Typography } from '@mui/material'\nimport SouthIcon from '@mui/icons-material/South'\nimport css from './styles.module.css'\nimport useSafeAddress from '@/hooks/useSafeAddress'\nimport EthHashInfo from '@/components/common/EthHashInfo'\n\n// TODO: Remove this file after replacing in all tx flow components\nconst SendFromBlock = ({ title }: { title?: string }): ReactElement => {\n  const address = useSafeAddress()\n\n  return (\n    <Box className={css.container} pb={2} mb={2}>\n      <Typography color=\"text.secondary\" pb={1}>\n        {title || 'Sending from'}\n      </Typography>\n\n      <Typography variant=\"body2\" component=\"div\">\n        <EthHashInfo address={address} shortAddress={false} hasExplorer showCopyButton />\n      </Typography>\n\n      <SouthIcon className={css.arrow} />\n    </Box>\n  )\n}\n\nexport default SendFromBlock\n","import type { ReactElement } from 'react'\nimport { useContext, useEffect, useState } from 'react'\nimport { useMemo } from 'react'\nimport { hashMessage, TypedDataEncoder } from 'ethers'\nimport { Box } from '@mui/system'\nimport { Typography, SvgIcon } from '@mui/material'\nimport WarningIcon from '@/public/images/notifications/warning.svg'\nimport { type EIP712TypedData, Methods, type RequestId } from '@safe-global/safe-apps-sdk'\nimport { OperationType } from '@safe-global/safe-core-sdk-types'\n\nimport SendFromBlock from '@/components/tx/SendFromBlock'\nimport { InfoDetails } from '@/components/transactions/InfoDetails'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { getReadOnlySignMessageLibContract } from '@/services/contracts/safeContracts'\nimport { DecodedMsg } from '@/components/safe-messages/DecodedMsg'\nimport CopyButton from '@/components/common/CopyButton'\nimport { getDecodedMessage } from '@/components/safe-apps/utils'\nimport { createTx } from '@/services/tx/tx-sender'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport useHighlightHiddenTab from '@/hooks/useHighlightHiddenTab'\nimport { type SafeAppData } from '@safe-global/safe-gateway-typescript-sdk'\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport { isEIP712TypedData } from '@safe-global/utils/utils/safe-messages'\nimport ApprovalEditor from '@/components/tx/ApprovalEditor'\nimport { ErrorBoundary } from '@sentry/react'\nimport useAsync from '@safe-global/utils/hooks/useAsync'\nimport { HexEncodedData } from '@/components/transactions/HexEncodedData'\nimport ReviewTransaction, { type ReviewTransactionProps } from '@/components/tx/ReviewTransactionV2'\n\nexport type SignMessageOnChainProps = {\n  app?: SafeAppData\n  requestId: RequestId\n  message: string | EIP712TypedData\n  method: Methods.signMessage | Methods.signTypedMessage\n} & ReviewTransactionProps\n\nconst ReviewSignMessageOnChain = ({ message, method, children, ...props }: SignMessageOnChainProps): ReactElement => {\n  const { safe } = useSafeInfo()\n  const { safeTx, setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n  useHighlightHiddenTab()\n\n  const isTextMessage = method === Methods.signMessage && typeof message === 'string'\n  const isTypedMessage = method === Methods.signTypedMessage && isEIP712TypedData(message)\n\n  const [readOnlySignMessageLibContract] = useAsync(\n    async () => getReadOnlySignMessageLibContract(safe.version),\n    [safe.version],\n  )\n\n  const [signMessageAddress, setSignMessageAddress] = useState<string>('')\n\n  useEffect(() => {\n    if (!readOnlySignMessageLibContract) return\n    readOnlySignMessageLibContract.getAddress().then(setSignMessageAddress)\n  }, [readOnlySignMessageLibContract])\n\n  const [decodedMessage, readableMessage] = useMemo(() => {\n    if (isTextMessage) {\n      const decoded = getDecodedMessage(message)\n      return [decoded, decoded]\n    } else if (isTypedMessage) {\n      return [message, JSON.stringify(message, null, 2)]\n    }\n    return []\n  }, [isTextMessage, isTypedMessage, message])\n\n  useEffect(() => {\n    let txData\n\n    if (!readOnlySignMessageLibContract) return\n\n    if (isTextMessage) {\n      txData = readOnlySignMessageLibContract.encode('signMessage', [hashMessage(getDecodedMessage(message))])\n    } else if (isTypedMessage) {\n      const typesCopy = { ...message.types }\n\n      // We need to remove the EIP712Domain type from the types object\n      // Because it's a part of the JSON-RPC payload, but for the `.hash` in ethers.js\n      // The types are not allowed to be recursive, so ever type must either be used by another type, or be\n      // the primary type. And there must only be one type that is not used by any other type.\n      delete typesCopy.EIP712Domain\n      txData = readOnlySignMessageLibContract.encode('signMessage', [\n        // @ts-ignore\n        TypedDataEncoder.hash(message.domain, typesCopy, message.message),\n      ])\n    }\n\n    const params = {\n      to: signMessageAddress,\n      value: '0',\n      data: txData ?? '0x',\n      operation: OperationType.DelegateCall,\n    }\n    createTx(params).then(setSafeTx).catch(setSafeTxError)\n  }, [\n    isTextMessage,\n    isTypedMessage,\n    message,\n    readOnlySignMessageLibContract,\n    setSafeTx,\n    setSafeTxError,\n    signMessageAddress,\n  ])\n\n  return (\n    <ReviewTransaction {...props}>\n      <SendFromBlock />\n\n      <InfoDetails title=\"Interact with SignMessageLib\">\n        <EthHashInfo address={signMessageAddress} shortAddress={false} showCopyButton hasExplorer />\n      </InfoDetails>\n\n      {isEIP712TypedData(decodedMessage) && (\n        <ErrorBoundary fallback={<div>Error parsing data</div>}>\n          <ApprovalEditor safeMessage={decodedMessage} />\n        </ErrorBoundary>\n      )}\n\n      {safeTx && (\n        <Box pb={1}>\n          <HexEncodedData title=\"Data:\" hexData={safeTx.data.data} />\n        </Box>\n      )}\n\n      <Typography my={1}>\n        <b>Signing method:</b> <code>{method}</code>\n      </Typography>\n\n      <Typography my={2}>\n        <b>Signing message:</b> {readableMessage && <CopyButton text={readableMessage} />}\n      </Typography>\n      <DecodedMsg message={decodedMessage} isInModal />\n\n      <Box display=\"flex\" alignItems=\"center\" my={2}>\n        <SvgIcon component={WarningIcon} inheritViewBox color=\"warning\" />\n        <Typography ml={1}>\n          Signing a message with your Safe Account requires a transaction on the blockchain\n        </Typography>\n      </Box>\n\n      {children}\n    </ReviewTransaction>\n  )\n}\n\nexport default ReviewSignMessageOnChain\n","import { AppTitle } from '@/components/tx-flow/flows/SignMessage'\nimport ReviewSignMessageOnChain, {\n  type SignMessageOnChainProps,\n} from '@/components/tx-flow/flows/SignMessageOnChain/ReviewSignMessageOnChain'\nimport { useCallback } from 'react'\nimport { TxFlowType } from '@/services/analytics'\nimport { type ReviewTransactionProps } from '@/components/tx/ReviewTransactionV2'\nimport { type SubmitCallback, TxFlow } from '../../TxFlow'\nimport { dispatchSafeAppsTx } from '@/services/tx/tx-sender'\nimport { getSafeTxHashFromTxId } from '@/utils/transactions'\n\nconst SignMessageOnChainFlow = ({ props }: { props: Omit<SignMessageOnChainProps, 'onSubmit'> }) => {\n  const { requestId } = props\n  const ReviewComponent = useCallback(\n    (reviewTxProps: ReviewTransactionProps) => {\n      return <ReviewSignMessageOnChain {...props} {...reviewTxProps} />\n    },\n    [props],\n  )\n\n  const handleSubmit: SubmitCallback = useCallback(\n    async (args) => {\n      if (!args?.txId) {\n        return\n      }\n      const safeTxHash = getSafeTxHashFromTxId(args.txId)\n\n      if (!safeTxHash) {\n        return\n      }\n\n      await dispatchSafeAppsTx({ safeAppRequestId: requestId, safeTxHash, txId: args.txId })\n    },\n    [requestId],\n  )\n\n  return (\n    <TxFlow\n      subtitle={<AppTitle name={props.app?.name} logoUri={props.app?.iconUrl} />}\n      eventCategory={TxFlowType.SIGN_MESSAGE_ON_CHAIN}\n      ReviewTransactionComponent={ReviewComponent}\n      onSubmit={handleSubmit}\n    />\n  )\n}\n\nexport default SignMessageOnChainFlow\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__upDro\",\"arrow\":\"styles_arrow__i_HzR\"};"],"names":["createSvgIcon","_jsx","d","title","SendFromBlock","address","useSafeAddress","Box","className","css","pb","mb","Typography","color","variant","component","EthHashInfo","shortAddress","hasExplorer","showCopyButton","SouthIcon","message","method","children","props","ReviewSignMessageOnChain","safe","useSafeInfo","safeTx","setSafeTx","setSafeTxError","useContext","SafeTxContext","useHighlightHiddenTab","isTextMessage","Methods","signMessage","isTypedMessage","signTypedMessage","isEIP712TypedData","readOnlySignMessageLibContract","useAsync","getReadOnlySignMessageLibContract","version","signMessageAddress","setSignMessageAddress","useState","useEffect","getAddress","then","decodedMessage","readableMessage","useMemo","decoded","getDecodedMessage","JSON","stringify","txData","encode","hashMessage","typesCopy","types","EIP712Domain","TypedDataEncoder","hash","domain","params","to","value","data","operation","OperationType","DelegateCall","createTx","catch","ReviewTransaction","InfoDetails","ErrorBoundary","fallback","div","ApprovalEditor","safeMessage","HexEncodedData","hexData","my","b","code","CopyButton","text","DecodedMsg","isInModal","display","alignItems","SvgIcon","WarningIcon","inheritViewBox","ml","SignMessageOnChainFlow","requestId","ReviewComponent","useCallback","reviewTxProps","handleSubmit","args","txId","safeTxHash","getSafeTxHashFromTxId","dispatchSafeAppsTx","safeAppRequestId","TxFlow","subtitle","AppTitle","name","app","logoUri","iconUrl","eventCategory","TxFlowType","SIGN_MESSAGE_ON_CHAIN","ReviewTransactionComponent","onSubmit"],"sourceRoot":"","ignoreList":[0]}