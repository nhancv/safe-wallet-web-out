{"version":3,"file":"static/chunks/225.a95231f4161581bf.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/features/counterfactual/ActivateAccountFlow.tsx"],"sourcesContent":["export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import { createNewSafe, relaySafeCreation } from '@/components/new-safe/create/logic'\nimport { NetworkFee, SafeSetupOverview } from '@/components/new-safe/create/steps/ReviewStep'\nimport ReviewRow from '@/components/new-safe/ReviewRow'\nimport { TxModalContext } from '@/components/tx-flow'\nimport TxCard from '@/components/tx-flow/common/TxCard'\nimport TxLayout from '@/components/tx-flow/common/TxLayout'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport { ExecutionMethod, ExecutionMethodSelector } from '@/components/tx/ExecutionMethodSelector'\nimport { safeCreationDispatch, SafeCreationEvent } from '@/features/counterfactual/services/safeCreationEvents'\nimport { selectUndeployedSafe } from '@/features/counterfactual/store/undeployedSafesSlice'\nimport { CF_TX_GROUP_KEY, extractCounterfactualSafeSetup, isPredictedSafeProps } from '@/features/counterfactual/utils'\nimport useChainId from '@/hooks/useChainId'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport useGasPrice, { getTotalFeeFormatted } from '@/hooks/useGasPrice'\nimport { useLeastRemainingRelays } from '@/hooks/useRemainingRelays'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport useWalletCanPay from '@/hooks/useWalletCanPay'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { OVERVIEW_EVENTS, trackEvent, WALLET_EVENTS } from '@/services/analytics'\nimport { TX_EVENTS, TX_TYPES } from '@/services/analytics/events/transactions'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport { useAppSelector } from '@/store'\nimport { hasRemainingRelays } from '@/utils/relaying'\nimport { Box, Button, CircularProgress, Divider, Grid, Typography } from '@mui/material'\nimport type { DeploySafeProps } from '@safe-global/protocol-kit'\nimport React, { useContext, useMemo, useState } from 'react'\nimport { sameAddress } from '@safe-global/utils/utils/addresses'\nimport { useEstimateSafeCreationGas } from '@/components/new-safe/create/useEstimateSafeCreationGas'\nimport useIsWrongChain from '@/hooks/useIsWrongChain'\nimport NetworkWarning from '@/components/new-safe/create/NetworkWarning'\nimport CheckWallet from '@/components/common/CheckWallet'\nimport { getSafeToL2SetupDeployment } from '@safe-global/safe-deployments'\nimport { FEATURES, getLatestSafeVersion, hasFeature } from '@safe-global/utils/utils/chains'\nimport type { UndeployedSafe } from '@safe-global/utils/features/counterfactual/store/types'\n\nconst useActivateAccount = (undeployedSafe: UndeployedSafe | undefined) => {\n  const chain = useCurrentChain()\n  const [gasPrice] = useGasPrice()\n  const safeVersion =\n    undeployedSafe &&\n    (isPredictedSafeProps(undeployedSafe?.props)\n      ? undeployedSafe?.props.safeDeploymentConfig?.safeVersion\n      : undeployedSafe?.props.safeVersion)\n\n  const { gasLimit } = useEstimateSafeCreationGas(undeployedSafe?.props, safeVersion)\n\n  const isEIP1559 = chain && hasFeature(chain, FEATURES.EIP1559)\n  const maxFeePerGas = gasPrice?.maxFeePerGas\n  const maxPriorityFeePerGas = gasPrice?.maxPriorityFeePerGas\n\n  const options: DeploySafeProps['options'] = isEIP1559\n    ? {\n        maxFeePerGas: maxFeePerGas?.toString(),\n        maxPriorityFeePerGas: maxPriorityFeePerGas?.toString(),\n        gasLimit: gasLimit?.toString(),\n      }\n    : { gasPrice: maxFeePerGas?.toString(), gasLimit: gasLimit?.toString() }\n\n  const totalFee = getTotalFeeFormatted(maxFeePerGas, gasLimit, chain)\n  const walletCanPay = useWalletCanPay({ gasLimit, maxFeePerGas })\n\n  return { options, totalFee, walletCanPay }\n}\n\nconst ActivateAccountFlow = () => {\n  const [isSubmittable, setIsSubmittable] = useState<boolean>(true)\n  const [submitError, setSubmitError] = useState<Error | undefined>()\n  const [executionMethod, setExecutionMethod] = useState(ExecutionMethod.RELAY)\n\n  const chain = useCurrentChain()\n  const chainId = useChainId()\n  const { safeAddress } = useSafeInfo()\n  const undeployedSafe = useAppSelector((state) => selectUndeployedSafe(state, chainId, safeAddress))\n  const { setTxFlow } = useContext(TxModalContext)\n  const wallet = useWallet()\n  const { options, totalFee, walletCanPay } = useActivateAccount(undeployedSafe)\n  const isWrongChain = useIsWrongChain()\n\n  const undeployedSafeSetup = useMemo(\n    () => extractCounterfactualSafeSetup(undeployedSafe, chainId),\n    [undeployedSafe, chainId],\n  )\n\n  const safeAccountConfig =\n    undeployedSafe && isPredictedSafeProps(undeployedSafe?.props) ? undeployedSafe?.props.safeAccountConfig : undefined\n\n  const ownerAddresses = undeployedSafeSetup?.owners || []\n  const [minRelays] = useLeastRemainingRelays(ownerAddresses)\n\n  // Every owner has remaining relays and relay method is selected\n  const canRelay = hasRemainingRelays(minRelays)\n  const willRelay = canRelay && executionMethod === ExecutionMethod.RELAY\n\n  if (!undeployedSafe || !undeployedSafeSetup) return null\n\n  const { owners, threshold, safeVersion } = undeployedSafeSetup\n\n  const safeToL2SetupDeployment = getSafeToL2SetupDeployment({ version: '1.4.1', network: chain?.chainId })\n  const safeToL2SetupAddress = safeToL2SetupDeployment?.defaultAddress\n  const isMultichainSafe = sameAddress(safeAccountConfig?.to, safeToL2SetupAddress)\n\n  const onSubmit = (txHash?: string) => {\n    trackEvent({ ...TX_EVENTS.CREATE, label: TX_TYPES.activate_without_tx })\n    trackEvent({ ...TX_EVENTS.EXECUTE, label: TX_TYPES.activate_without_tx })\n    trackEvent(WALLET_EVENTS.ONCHAIN_INTERACTION)\n\n    if (txHash) {\n      safeCreationDispatch(SafeCreationEvent.PROCESSING, { groupKey: CF_TX_GROUP_KEY, txHash, safeAddress })\n    }\n    setTxFlow(undefined)\n  }\n\n  const createSafe = async () => {\n    if (!wallet || !chain) return\n\n    trackEvent({ ...OVERVIEW_EVENTS.PROCEED_WITH_TX, label: TX_TYPES.activate_without_tx })\n\n    setIsSubmittable(false)\n    setSubmitError(undefined)\n\n    try {\n      if (willRelay) {\n        const taskId = await relaySafeCreation(chain, undeployedSafe.props)\n        safeCreationDispatch(SafeCreationEvent.RELAYING, { groupKey: CF_TX_GROUP_KEY, taskId, safeAddress })\n\n        onSubmit()\n      } else {\n        await createNewSafe(\n          wallet.provider,\n          undeployedSafe.props,\n          safeVersion ?? getLatestSafeVersion(chain),\n          chain,\n          options,\n          onSubmit,\n          isMultichainSafe ? true : undefined,\n        )\n      }\n    } catch (_err) {\n      const err = asError(_err)\n      setIsSubmittable(true)\n      setSubmitError(err)\n      return\n    }\n  }\n\n  const submitDisabled = !isSubmittable || isWrongChain\n\n  return (\n    <TxLayout title=\"Activate account\" hideNonce>\n      <TxCard>\n        <Typography>\n          You&apos;re about to deploy this Safe Account and will have to confirm the transaction with your connected\n          wallet.\n        </Typography>\n\n        <Divider sx={{ mx: -3, my: 2 }} />\n\n        <SafeSetupOverview\n          owners={owners.map((owner) => ({ name: '', address: owner }))}\n          threshold={threshold}\n          networks={chain ? [chain] : []}\n        />\n\n        <Divider sx={{ mx: -3, mt: 2, mb: 1 }} />\n        <Box display=\"flex\" flexDirection=\"column\" gap={3}>\n          {canRelay && (\n            <Grid container spacing={3}>\n              <ReviewRow\n                name=\"Execution method\"\n                value={\n                  <ExecutionMethodSelector\n                    executionMethod={executionMethod}\n                    setExecutionMethod={setExecutionMethod}\n                    relays={minRelays}\n                  />\n                }\n              />\n            </Grid>\n          )}\n\n          <Grid data-testid=\"network-fee-section\" container spacing={3}>\n            <ReviewRow\n              name=\"Est. network fee\"\n              value={\n                <>\n                  <NetworkFee totalFee={totalFee} isWaived={willRelay || isWrongChain} chain={chain} />\n\n                  {!willRelay && (\n                    <Typography variant=\"body2\" color=\"text.secondary\" mt={1}>\n                      {isWrongChain\n                        ? `Switch your connected wallet to ${chain?.chainName} to see the correct estimated network fee`\n                        : 'You will have to confirm a transaction with your connected wallet.'}\n                    </Typography>\n                  )}\n                </>\n              }\n            />\n          </Grid>\n\n          {submitError && (\n            <Box mt={1}>\n              <ErrorMessage error={submitError}>Error submitting the transaction. Please try again.</ErrorMessage>\n            </Box>\n          )}\n          {isWrongChain && <NetworkWarning />}\n          {!walletCanPay && !willRelay && (\n            <ErrorMessage>\n              Your connected wallet doesn&apos;t have enough funds to execute this transaction\n            </ErrorMessage>\n          )}\n        </Box>\n\n        <Divider sx={{ mx: -3, mt: 2, mb: 1 }} />\n\n        <Box display=\"flex\" flexDirection=\"row\" justifyContent=\"flex-end\" gap={3}>\n          <CheckWallet checkNetwork={!submitDisabled} allowNonOwner allowUndeployedSafe>\n            {(isOk) => (\n              <Button\n                data-testid=\"activate-account-flow-btn\"\n                onClick={createSafe}\n                variant=\"contained\"\n                size=\"stretched\"\n                disabled={!isOk || submitDisabled}\n              >\n                {!isSubmittable ? <CircularProgress size={20} /> : 'Activate'}\n              </Button>\n            )}\n          </CheckWallet>\n        </Box>\n      </TxCard>\n    </TxLayout>\n  )\n}\n\nexport default ActivateAccountFlow\n"],"names":["useActivateAccount","undeployedSafe","chain","useCurrentChain","gasPrice","useGasPrice","safeVersion","isPredictedSafeProps","props","safeDeploymentConfig","gasLimit","useEstimateSafeCreationGas","isEIP1559","hasFeature","FEATURES","EIP1559","maxFeePerGas","maxPriorityFeePerGas","options","toString","totalFee","getTotalFeeFormatted","walletCanPay","useWalletCanPay","isSubmittable","setIsSubmittable","useState","submitError","setSubmitError","ActivateAccountFlow","executionMethod","setExecutionMethod","ExecutionMethod","RELAY","chainId","useChainId","safeAddress","useSafeInfo","useAppSelector","selectUndeployedSafe","state","setTxFlow","useContext","TxModalContext","wallet","useWallet","isWrongChain","useIsWrongChain","undeployedSafeSetup","useMemo","extractCounterfactualSafeSetup","safeAccountConfig","undefined","ownerAddresses","owners","minRelays","useLeastRemainingRelays","canRelay","hasRemainingRelays","willRelay","threshold","safeToL2SetupDeployment","getSafeToL2SetupDeployment","version","network","safeToL2SetupAddress","defaultAddress","isMultichainSafe","sameAddress","to","onSubmit","trackEvent","TX_EVENTS","CREATE","label","TX_TYPES","activate_without_tx","EXECUTE","WALLET_EVENTS","ONCHAIN_INTERACTION","txHash","safeCreationDispatch","SafeCreationEvent","PROCESSING","groupKey","CF_TX_GROUP_KEY","createSafe","OVERVIEW_EVENTS","PROCEED_WITH_TX","taskId","relaySafeCreation","RELAYING","createNewSafe","provider","getLatestSafeVersion","_err","err","asError","submitDisabled","TxLayout","title","hideNonce","TxCard","Typography","Divider","sx","mx","my","SafeSetupOverview","map","owner","name","address","networks","mt","mb","Box","display","flexDirection","gap","Grid","container","spacing","ReviewRow","value","ExecutionMethodSelector","relays","data-testid","NetworkFee","isWaived","variant","color","chainName","ErrorMessage","error","NetworkWarning","justifyContent","CheckWallet","checkNetwork","allowNonOwner","allowUndeployedSafe","Button","onClick","size","disabled","isOk","CircularProgress"],"sourceRoot":"","ignoreList":[]}