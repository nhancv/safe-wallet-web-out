{"version":3,"file":"static/chunks/2279.af1a16dc5a4d6e05.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/ExecuteBatch/DecodedTxs.tsx","webpack://_N_E/./src/components/tx-flow/flows/ExecuteBatch/ReviewBatch.tsx","webpack://_N_E/./src/components/tx-flow/flows/ExecuteBatch/index.tsx","webpack://_N_E/./public/images/apps/batch-icon.svg"],"sourcesContent":["export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import type { DataDecoded, TransactionDetails } from '@safe-global/safe-gateway-typescript-sdk'\nimport { Box } from '@mui/material'\nimport extractTxInfo from '@/services/tx/extractTxInfo'\nimport { isCustomTxInfo, isNativeTokenTransfer, isTransferTxInfo } from '@/utils/transaction-guards'\nimport SingleTxDecoded from '@/components/transactions/TxDetails/TxData/DecodedData/SingleTxDecoded'\nimport css from '@/components/transactions/TxDetails/TxData/DecodedData/Multisend/styles.module.css'\nimport { useState } from 'react'\nimport { MultisendActionsHeader } from '@/components/transactions/TxDetails/TxData/DecodedData/Multisend'\nimport { type AccordionProps } from '@mui/material/Accordion/Accordion'\n\nconst DecodedTxs = ({ txs }: { txs: TransactionDetails[] | undefined }) => {\n  const [openMap, setOpenMap] = useState<Record<number, boolean>>()\n\n  if (!txs) return null\n\n  return (\n    <>\n      <MultisendActionsHeader title=\"Batched transactions\" setOpen={setOpenMap} amount={txs.length} compact />\n\n      <Box className={css.compact}>\n        {txs.map((transaction, idx) => {\n          if (!transaction.txData) return null\n\n          const onChange: AccordionProps['onChange'] = (_, expanded) => {\n            setOpenMap((prev) => ({\n              ...prev,\n              [idx]: expanded,\n            }))\n          }\n\n          const { txParams } = extractTxInfo(transaction)\n\n          let decodedDataParams: DataDecoded = {\n            method: '',\n            parameters: undefined,\n          }\n\n          if (isCustomTxInfo(transaction.txInfo) && transaction.txInfo.isCancellation) {\n            decodedDataParams.method = 'On-chain rejection'\n          }\n\n          if (isTransferTxInfo(transaction.txInfo) && isNativeTokenTransfer(transaction.txInfo.transferInfo)) {\n            decodedDataParams.method = 'transfer'\n          }\n\n          const dataDecoded = transaction.txData.dataDecoded || decodedDataParams\n\n          return (\n            <SingleTxDecoded\n              key={transaction.txId}\n              tx={{\n                dataDecoded,\n                data: txParams.data,\n                value: txParams.value,\n                to: txParams.to,\n                operation: 0,\n              }}\n              txData={transaction.txData}\n              actionTitle={`${idx + 1}`}\n              expanded={openMap?.[idx] ?? false}\n              onChange={onChange}\n              isExecuted={!!transaction.executedAt}\n            />\n          )\n        })}\n      </Box>\n    </>\n  )\n}\n\nexport default DecodedTxs\n","import useWallet from '@/hooks/wallets/useWallet'\nimport { CircularProgress, Typography, Button, CardActions, Divider, Alert } from '@mui/material'\nimport useAsync from '@safe-global/utils/hooks/useAsync'\nimport { getReadOnlyMultiSendCallOnlyContract } from '@/services/contracts/safeContracts'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { encodeMultiSendData } from '@safe-global/protocol-kit/dist/src/utils/transactions/utils'\nimport { useState, useMemo, useContext } from 'react'\nimport type { SyntheticEvent } from 'react'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport { ExecutionMethod, ExecutionMethodSelector } from '@/components/tx/ExecutionMethodSelector'\nimport DecodedTxs from '@/components/tx-flow/flows/ExecuteBatch/DecodedTxs'\nimport TxChecks from '@/components/tx-flow/features/TxChecks/TxChecks'\nimport { useRelaysBySafe } from '@/hooks/useRemainingRelays'\nimport useOnboard from '@/hooks/wallets/useOnboard'\nimport { logError, Errors } from '@/services/exceptions'\nimport { dispatchBatchExecution, dispatchBatchExecutionRelay } from '@/services/tx/tx-sender'\nimport { hasRemainingRelays } from '@/utils/relaying'\nimport { getMultiSendTxs } from '@/utils/transactions'\nimport TxCard from '../../common/TxCard'\nimport CheckWallet from '@/components/common/CheckWallet'\nimport type { ExecuteBatchFlowProps } from '.'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport SendToBlock from '@/components/tx/SendToBlock'\nimport ConfirmationTitle, { ConfirmationTitleTypes } from '@/components/tx/SignOrExecuteForm/ConfirmationTitle'\nimport commonCss from '@/components/tx-flow/common/styles.module.css'\nimport { TxModalContext } from '@/components/tx-flow'\nimport useGasPrice from '@/hooks/useGasPrice'\nimport type { Overrides } from 'ethers'\nimport { trackEvent } from '@/services/analytics'\nimport { TX_EVENTS, TX_TYPES } from '@/services/analytics/events/transactions'\nimport { isWalletRejection } from '@/utils/wallets'\nimport WalletRejectionError from '@/components/tx/SignOrExecuteForm/WalletRejectionError'\nimport useUserNonce from '@/components/tx/AdvancedParams/useUserNonce'\nimport { HexEncodedData } from '@/components/transactions/HexEncodedData'\nimport { useGetMultipleTransactionDetailsQuery } from '@/store/api/gateway'\nimport { skipToken } from '@reduxjs/toolkit/query/react'\nimport NetworkWarning from '@/components/new-safe/create/NetworkWarning'\nimport { FEATURES, getLatestSafeVersion, hasFeature } from '@safe-global/utils/utils/chains'\n\nexport const ReviewBatch = ({ params }: { params: ExecuteBatchFlowProps }) => {\n  const [isSubmittable, setIsSubmittable] = useState<boolean>(true)\n  const [submitError, setSubmitError] = useState<Error | undefined>()\n  const [isRejectedByUser, setIsRejectedByUser] = useState<Boolean>(false)\n  const [executionMethod, setExecutionMethod] = useState(ExecutionMethod.RELAY)\n  const chain = useCurrentChain()\n  const { safe } = useSafeInfo()\n  const [relays] = useRelaysBySafe()\n  const { setTxFlow } = useContext(TxModalContext)\n  const [gasPrice] = useGasPrice()\n\n  const userNonce = useUserNonce()\n\n  const latestSafeVersion = getLatestSafeVersion(chain)\n\n  const maxFeePerGas = gasPrice?.maxFeePerGas\n  const maxPriorityFeePerGas = gasPrice?.maxPriorityFeePerGas\n\n  const isEIP1559 = chain && hasFeature(chain, FEATURES.EIP1559)\n\n  // Chain has relaying feature and available relays\n  const canRelay = hasRemainingRelays(relays)\n  const willRelay = canRelay && executionMethod === ExecutionMethod.RELAY\n  const onboard = useOnboard()\n  const wallet = useWallet()\n\n  const {\n    data: txsWithDetails,\n    error,\n    isLoading: loading,\n  } = useGetMultipleTransactionDetailsQuery(\n    chain?.chainId && params.txs.length\n      ? {\n          chainId: chain.chainId,\n          txIds: params.txs.map((tx) => tx.transaction.id),\n        }\n      : skipToken,\n  )\n\n  const [multiSendContract] = useAsync(async () => {\n    if (!safe.version) return\n    return await getReadOnlyMultiSendCallOnlyContract(safe.version)\n  }, [safe.version])\n\n  const [multisendContractAddress = ''] = useAsync(async () => {\n    if (!multiSendContract) return ''\n    return await multiSendContract.getAddress()\n  }, [multiSendContract])\n\n  const [multiSendTxs] = useAsync(async () => {\n    if (!txsWithDetails || !chain || !safe.version) return\n    return getMultiSendTxs(txsWithDetails, chain, safe.address.value, safe.version)\n  }, [chain, safe.address.value, safe.version, txsWithDetails])\n\n  const multiSendTxData = useMemo(() => {\n    if (!txsWithDetails || !multiSendTxs) return\n    return encodeMultiSendData(multiSendTxs)\n  }, [txsWithDetails, multiSendTxs])\n\n  const onExecute = async () => {\n    if (!userNonce || !onboard || !wallet || !multiSendTxData || !multiSendContract || !txsWithDetails || !gasPrice)\n      return\n\n    const overrides: Overrides = isEIP1559\n      ? { maxFeePerGas: maxFeePerGas?.toString(), maxPriorityFeePerGas: maxPriorityFeePerGas?.toString() }\n      : { gasPrice: maxFeePerGas?.toString() }\n\n    overrides.nonce = userNonce\n\n    await dispatchBatchExecution(\n      txsWithDetails,\n      multiSendContract,\n      multiSendTxData,\n      wallet.provider,\n      wallet.address,\n      safe.address.value,\n      overrides as Overrides & { nonce: number },\n      safe.nonce,\n    )\n  }\n\n  const onRelay = async () => {\n    if (!multiSendTxData || !multiSendContract || !txsWithDetails) return\n\n    await dispatchBatchExecutionRelay(\n      txsWithDetails,\n      multiSendContract,\n      multiSendTxData,\n      safe.chainId,\n      safe.address.value,\n      safe.version ?? latestSafeVersion,\n    )\n  }\n\n  const handleSubmit = async (e: SyntheticEvent) => {\n    e.preventDefault()\n    setIsSubmittable(false)\n    setSubmitError(undefined)\n    setIsRejectedByUser(false)\n\n    try {\n      await (willRelay ? onRelay() : onExecute())\n      setTxFlow(undefined)\n    } catch (_err) {\n      const err = asError(_err)\n      if (isWalletRejection(err)) {\n        setIsRejectedByUser(true)\n      } else {\n        logError(Errors._804, err)\n        setSubmitError(err)\n      }\n\n      setIsSubmittable(true)\n      return\n    }\n\n    trackEvent({ ...TX_EVENTS.EXECUTE, label: TX_TYPES.bulk_execute })\n  }\n\n  const submitDisabled = loading || !isSubmittable || !gasPrice\n\n  return (\n    <>\n      <TxCard>\n        <Typography variant=\"body2\">\n          This transaction batches a total of {params.txs.length} transactions from your queue into a single Ethereum\n          transaction. Please check every included transaction carefully, especially if you have rejection transactions,\n          and make sure you want to execute all of them. Included transactions are highlighted when you hover over the\n          execute button.\n        </Typography>\n\n        {multiSendContract && <SendToBlock address={multisendContractAddress} title=\"Interact with\" />}\n\n        {multiSendTxData && <HexEncodedData title=\"Data\" hexData={multiSendTxData} />}\n\n        <div>\n          <DecodedTxs txs={txsWithDetails} />\n        </div>\n      </TxCard>\n\n      {multiSendTxs && <TxChecks disabled={submitDisabled} transaction={multiSendTxs} />}\n\n      <TxCard>\n        <ConfirmationTitle variant={ConfirmationTitleTypes.execute} />\n\n        <NetworkWarning />\n\n        {canRelay ? (\n          <>\n            <ExecutionMethodSelector\n              executionMethod={executionMethod}\n              setExecutionMethod={setExecutionMethod}\n              relays={relays}\n              tooltip=\"You can only relay multisend transactions containing executions from the same Safe Account.\"\n            />\n          </>\n        ) : null}\n\n        <Alert severity=\"warning\">\n          Be aware that if any of the included transactions revert, none of them will be executed. This will result in\n          the loss of the allocated transaction fees.\n        </Alert>\n\n        {error && (\n          <ErrorMessage error={asError(error)}>\n            This transaction will most likely fail. To save gas costs, avoid creating the transaction.\n          </ErrorMessage>\n        )}\n\n        {submitError && (\n          <ErrorMessage error={submitError}>Error submitting the transaction. Please try again.</ErrorMessage>\n        )}\n\n        {isRejectedByUser && <WalletRejectionError />}\n\n        <div>\n          <Divider className={commonCss.nestedDivider} sx={{ pt: 2 }} />\n\n          <CardActions>\n            <CheckWallet allowNonOwner={true} checkNetwork>\n              {(isOk) => (\n                <Button\n                  variant=\"contained\"\n                  type=\"submit\"\n                  disabled={!isOk || submitDisabled}\n                  onClick={handleSubmit}\n                  sx={{ minWidth: '114px' }}\n                >\n                  {!isSubmittable ? <CircularProgress size={20} /> : 'Submit'}\n                </Button>\n              )}\n            </CheckWallet>\n          </CardActions>\n        </div>\n      </TxCard>\n    </>\n  )\n}\n","import type { Transaction } from '@safe-global/safe-gateway-typescript-sdk'\n\nimport TxLayout from '@/components/tx-flow/common/TxLayout'\nimport { ReviewBatch } from './ReviewBatch'\nimport BatchIcon from '@/public/images/apps/batch-icon.svg'\n\nexport type ExecuteBatchFlowProps = {\n  txs: Transaction[]\n}\n\nconst ExecuteBatchFlow = (props: ExecuteBatchFlowProps) => {\n  return (\n    <TxLayout title=\"Confirm transaction\" subtitle=\"Batch\" icon={BatchIcon} hideNonce isBatch>\n      <ReviewBatch params={props} />\n    </TxLayout>\n  )\n}\n\nexport default ExecuteBatchFlow\n","var _circle, _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var n = Object.getOwnPropertySymbols(e); for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (-1 !== e.indexOf(n)) continue; t[n] = r[n]; } return t; }\nimport * as React from \"react\";\nvar SvgBatchIcon = function SvgBatchIcon(_ref) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 22,\n    height: 22,\n    viewBox: \"0 0 22 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 11,\n    cy: 11,\n    r: 11,\n    fill: \"#FFD600\"\n  })), _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fillRule: \"evenodd\",\n    clipRule: \"evenodd\",\n    d: \"M10.7764 5.55279C10.9172 5.4824 11.0828 5.4824 11.2236 5.55279L16.2235 8.05279C16.3929 8.13748 16.4999 8.31061 16.4999 8.5C16.4999 8.68939 16.3929 8.86252 16.2235 8.94721L11.2236 11.4472C11.0828 11.5176 10.9172 11.5176 10.7764 11.4472L5.7765 8.94721C5.60711 8.86252 5.50011 8.68939 5.50011 8.5C5.50011 8.31061 5.60711 8.13748 5.7765 8.05279L10.7764 5.55279ZM7.11811 8.5L11 10.441L14.8819 8.5L11 6.55902L7.11811 8.5ZM5.55289 10.7764C5.67639 10.5294 5.97672 10.4293 6.2237 10.5528L11 12.941L15.7763 10.5528C16.0233 10.4293 16.3236 10.5294 16.4471 10.7764C16.5706 11.0234 16.4705 11.3237 16.2235 11.4472L11.2236 13.9472C11.0828 14.0176 10.9172 14.0176 10.7764 13.9472L5.7765 11.4472C5.52951 11.3237 5.4294 11.0234 5.55289 10.7764ZM5.55289 13.2764C5.67639 13.0294 5.97672 12.9293 6.2237 13.0528L11 15.441L15.7763 13.0528C16.0233 12.9293 16.3236 13.0294 16.4471 13.2764C16.5706 13.5234 16.4705 13.8237 16.2235 13.9472L11.2236 16.4472C11.0828 16.5176 10.9172 16.5176 10.7764 16.4472L5.7765 13.9472C5.52951 13.8237 5.4294 13.5234 5.55289 13.2764Z\",\n    fill: \"black\"\n  })));\n};\nexport default SvgBatchIcon;"],"names":["txs","openMap","setOpenMap","useState","DecodedTxs","MultisendActionsHeader","title","setOpen","amount","length","compact","Box","className","css","map","transaction","idx","txData","txParams","extractTxInfo","decodedDataParams","method","parameters","undefined","isCustomTxInfo","txInfo","isCancellation","isTransferTxInfo","isNativeTokenTransfer","transferInfo","dataDecoded","SingleTxDecoded","tx","data","value","to","operation","actionTitle","expanded","onChange","prev","isExecuted","executedAt","txId","ReviewBatch","params","isSubmittable","setIsSubmittable","submitError","setSubmitError","isRejectedByUser","setIsRejectedByUser","executionMethod","setExecutionMethod","ExecutionMethod","RELAY","chain","useCurrentChain","safe","useSafeInfo","relays","useRelaysBySafe","setTxFlow","useContext","TxModalContext","gasPrice","useGasPrice","userNonce","useUserNonce","latestSafeVersion","getLatestSafeVersion","maxFeePerGas","maxPriorityFeePerGas","isEIP1559","hasFeature","FEATURES","EIP1559","canRelay","hasRemainingRelays","willRelay","onboard","useOnboard","wallet","useWallet","txsWithDetails","error","isLoading","loading","useGetMultipleTransactionDetailsQuery","chainId","txIds","id","skipToken","multiSendContract","useAsync","version","getReadOnlyMultiSendCallOnlyContract","multisendContractAddress","getAddress","multiSendTxs","getMultiSendTxs","address","multiSendTxData","useMemo","encodeMultiSendData","onExecute","overrides","toString","nonce","dispatchBatchExecution","provider","onRelay","dispatchBatchExecutionRelay","handleSubmit","e","preventDefault","_err","err","asError","isWalletRejection","logError","Errors","_804","trackEvent","TX_EVENTS","EXECUTE","label","TX_TYPES","bulk_execute","submitDisabled","TxCard","Typography","variant","SendToBlock","HexEncodedData","hexData","div","TxChecks","disabled","ConfirmationTitle","ConfirmationTitleTypes","execute","NetworkWarning","ExecutionMethodSelector","tooltip","Alert","severity","ErrorMessage","WalletRejectionError","Divider","commonCss","sx","pt","CardActions","CheckWallet","allowNonOwner","checkNetwork","Button","type","isOk","onClick","minWidth","CircularProgress","size","TxLayout","ExecuteBatchFlow","subtitle","icon","BatchIcon","hideNonce","isBatch","props"],"sourceRoot":"","ignoreList":[]}