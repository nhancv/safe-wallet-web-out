{"version":3,"file":"static/chunks/260.a749842f89d31b3c.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/features/recovery/components/RecoveryValidationErrors/index.tsx","webpack://_N_E/./src/components/tx-flow/flows/RecoveryAttempt/RecoveryAttemptReview.tsx","webpack://_N_E/./src/components/tx-flow/flows/RecoveryAttempt/index.tsx","webpack://_N_E/./src/features/recovery/services/recoveryEvents.ts","webpack://_N_E/./src/features/recovery/hooks/useIsValidRecoveryExecution.ts","webpack://_N_E/./src/features/recovery/services/recovery-sender.ts","webpack://_N_E/./src/features/recovery/services/transaction-list.ts","webpack://_N_E/./src/features/recovery/components/RecoveryDescription/index.tsx","webpack://_N_E/./src/features/recovery/components/RecoveryListItem/RecoveryListItemContext.tsx","webpack://_N_E/./src/hooks/useClock.ts","webpack://_N_E/./src/features/recovery/hooks/useRecoveryTxState.ts"],"sourcesContent":["export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import { useContext } from 'react'\nimport type { ReactElement } from 'react'\n\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport {\n  useIsValidRecoveryExecuteNextTx,\n  useIsValidRecoverySkipExpired,\n} from '@/features/recovery/hooks/useIsValidRecoveryExecution'\nimport { RecoveryListItemContext } from '../RecoveryListItem/RecoveryListItemContext'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function RecoveryValidationErrors({ item }: { item: RecoveryQueueItem }): ReactElement | null {\n  const { submitError } = useContext(RecoveryListItemContext)\n  const [, executeNextTxError] = useIsValidRecoveryExecuteNextTx(item)\n  const [, executeSkipExpiredError] = useIsValidRecoverySkipExpired(item)\n\n  // There can never be both errors as they are dependent on validity/expiration\n  const validationError = executeNextTxError ?? executeSkipExpiredError\n\n  if (!submitError && !validationError) {\n    return null\n  }\n\n  return (\n    <>\n      {validationError && (\n        <ErrorMessage error={validationError}>\n          This transaction will most likely fail. To save gas costs, avoid executing the transaction.\n        </ErrorMessage>\n      )}\n\n      {submitError && (\n        <ErrorMessage error={submitError}>Error submitting the transaction. Please try again.</ErrorMessage>\n      )}\n    </>\n  )\n}\n","import { type SyntheticEvent, useContext, useCallback, useEffect } from 'react'\nimport { CircularProgress, CardActions, Button, Typography, Stack, Divider } from '@mui/material'\nimport CheckWallet from '@/components/common/CheckWallet'\nimport { Errors, trackError } from '@/services/exceptions'\nimport { dispatchRecoveryExecution } from '@/features/recovery/services/recovery-sender'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport TxCard from '@/components/tx-flow/common/TxCard'\nimport { TxModalContext } from '@/components/tx-flow'\nimport NetworkWarning from '@/components/new-safe/create/NetworkWarning'\nimport { RecoveryValidationErrors } from '@/features/recovery/components/RecoveryValidationErrors'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\nimport { RecoveryDescription } from '@/features/recovery/components/RecoveryDescription'\nimport { useAsyncCallback } from '@safe-global/utils/hooks/useAsync'\nimport FieldsGrid from '@/components/tx/FieldsGrid'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport useGasPrice from '@/hooks/useGasPrice'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport { FEATURES, hasFeature } from '@safe-global/utils/utils/chains'\n\ntype RecoveryAttemptReviewProps = {\n  item: RecoveryQueueItem\n}\n\nconst RecoveryAttemptReview = ({ item }: RecoveryAttemptReviewProps) => {\n  const { asyncCallback, isLoading, error } = useAsyncCallback(dispatchRecoveryExecution)\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const { setTxFlow } = useContext(TxModalContext)\n  const { setNonceNeeded } = useContext(SafeTxContext)\n  const [gasPrice] = useGasPrice()\n  const chain = useCurrentChain()\n\n  const onFormSubmit = useCallback(\n    async (e: SyntheticEvent) => {\n      e.preventDefault()\n\n      if (!wallet || !gasPrice) return\n\n      const isEIP1559 = chain && hasFeature(chain, FEATURES.EIP1559)\n      const overrides = isEIP1559\n        ? {\n            maxFeePerGas: gasPrice?.maxFeePerGas?.toString(),\n            maxPriorityFeePerGas: gasPrice?.maxPriorityFeePerGas?.toString(),\n          }\n        : { gasPrice: gasPrice?.maxFeePerGas?.toString() }\n\n      try {\n        await asyncCallback({\n          provider: wallet.provider,\n          chainId: safe.chainId,\n          args: item.args,\n          delayModifierAddress: item.address,\n          signerAddress: wallet.address,\n          overrides,\n        })\n        setTxFlow(undefined)\n      } catch (err) {\n        trackError(Errors._812, err)\n      }\n    },\n    [wallet, gasPrice, chain, asyncCallback, safe.chainId, item.args, item.address, setTxFlow],\n  )\n\n  useEffect(() => {\n    setNonceNeeded(false)\n  }, [setNonceNeeded])\n\n  return (\n    <TxCard>\n      <form onSubmit={onFormSubmit}>\n        <Stack\n          sx={{\n            gap: 3,\n            mb: 2,\n          }}\n        >\n          <Typography>Execute this transaction to finalize the recovery.</Typography>\n\n          <FieldsGrid title=\"Initiator\">\n            <EthHashInfo address={item.executor} showName showCopyButton hasExplorer />\n          </FieldsGrid>\n\n          <Divider sx={{ mx: -3 }} />\n\n          <RecoveryDescription item={item} />\n\n          <NetworkWarning />\n\n          <RecoveryValidationErrors item={item} />\n\n          {error && <ErrorMessage error={error}>Error submitting the transaction.</ErrorMessage>}\n        </Stack>\n\n        <Divider sx={{ mx: -3, my: 3.5 }} />\n\n        <CardActions>\n          {/* Submit button, also available to non-owner role members */}\n          <CheckWallet allowNonOwner>\n            {(isOk) => (\n              <Button\n                data-testid=\"execute-through-role-form-btn\"\n                variant=\"contained\"\n                type=\"submit\"\n                disabled={!isOk || isLoading}\n                sx={{ minWidth: '112px' }}\n              >\n                {isLoading ? <CircularProgress size={20} /> : 'Execute'}\n              </Button>\n            )}\n          </CheckWallet>\n        </CardActions>\n      </form>\n    </TxCard>\n  )\n}\n\nexport default RecoveryAttemptReview\n","import TxLayout from '@/components/tx-flow/common/TxLayout'\nimport SaveAddressIcon from '@/public/images/common/save-address.svg'\nimport RecoveryAttemptReview from './RecoveryAttemptReview'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nconst RecoveryAttemptFlow = ({ item }: { item: RecoveryQueueItem }) => {\n  return (\n    <TxLayout title=\"Recovery\" subtitle=\"Execute recovery\" icon={SaveAddressIcon} step={0} hideNonce>\n      <RecoveryAttemptReview item={item} />\n    </TxLayout>\n  )\n}\n\nexport default RecoveryAttemptFlow\n","import EventBus from '../../../services/EventBus'\n\nexport enum RecoveryEvent {\n  PROCESSING_BY_SMART_CONTRACT_WALLET = 'PROCESSING_BY_SMART_CONTRACT_WALLET',\n  PROCESSING = 'PROCESSING', // Submitted to the blockchain\n  PROCESSED = 'PROCESSED', // Executed on the blockchain\n  SUCCESS = 'SUCCESS', // Loaded from the blockchain\n  FAILED = 'FAILED',\n  REVERTED = 'REVERTED',\n}\n\nexport enum RecoveryTxType {\n  PROPOSAL = 'PROPOSAL',\n  EXECUTION = 'EXECUTION',\n  SKIP_EXPIRED = 'SKIP_EXPIRED',\n}\n\nexport interface RecoveryEvents {\n  [RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.PROCESSING]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.REVERTED]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    error: Error\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.PROCESSED]: {\n    moduleAddress: string\n    txHash: string\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.FAILED]: {\n    moduleAddress: string\n    txHash?: string\n    recoveryTxHash?: string\n    error: Error\n    txType: RecoveryTxType\n  }\n  [RecoveryEvent.SUCCESS]: {\n    recoveryTxHash: string\n    txType: RecoveryTxType\n  }\n}\n\nconst recoveryEventBus = new EventBus<RecoveryEvents>()\n\nexport const recoveryDispatch = recoveryEventBus.dispatch.bind(recoveryEventBus)\n\nexport const recoverySubscribe = recoveryEventBus.subscribe.bind(recoveryEventBus)\n\n// Log all events\nObject.values(RecoveryEvent).forEach((event: RecoveryEvent) => {\n  recoverySubscribe<RecoveryEvent>(event, (detail) => {\n    console.info(`Recovery ${event} event received`, detail)\n  })\n})\n","import { getModuleInstance, KnownContracts } from '@gnosis.pm/zodiac'\nimport type { SafeTransaction } from '@safe-global/safe-core-sdk-types'\n\nimport useWallet from '../../../hooks/wallets/useWallet'\nimport { useWeb3ReadOnly } from '../../../hooks/wallets/web3'\nimport useAsync from '@safe-global/utils/hooks/useAsync'\nimport useSafeInfo from '../../../hooks/useSafeInfo'\nimport { getPatchedSignerProvider } from '../../../hooks/useIsValidExecution'\nimport { useRecoveryTxState } from './useRecoveryTxState'\nimport { useIsRecoverer } from './useIsRecoverer'\nimport type { AsyncResult } from '@safe-global/utils/hooks/useAsync'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function useIsValidRecoveryExecTransactionFromModule(\n  delayModifierAddress?: string,\n  safeTx?: SafeTransaction,\n): AsyncResult<boolean> {\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const web3ReadOnly = useWeb3ReadOnly()\n  const isRecoverer = useIsRecoverer()\n\n  return useAsync(async () => {\n    if (!isRecoverer || !safeTx || !wallet || !web3ReadOnly || !delayModifierAddress) {\n      return\n    }\n\n    const provider = getPatchedSignerProvider(wallet, safe.chainId, web3ReadOnly)\n    const delayModifier = getModuleInstance(KnownContracts.DELAY, delayModifierAddress, provider)\n\n    const signer = await provider.getSigner()\n    const contract = delayModifier.connect(signer)\n\n    return contract.execTransactionFromModule.staticCall(\n      safeTx.data.to,\n      safeTx.data.value,\n      safeTx.data.data,\n      safeTx.data.operation,\n    )\n  }, [isRecoverer, safeTx, wallet, web3ReadOnly, safe.chainId, delayModifierAddress])\n}\n\nexport function useIsValidRecoveryExecuteNextTx(recovery: RecoveryQueueItem): AsyncResult<boolean> {\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const web3ReadOnly = useWeb3ReadOnly()\n  const { isExecutable } = useRecoveryTxState(recovery)\n\n  return useAsync(async () => {\n    if (!isExecutable || !wallet?.address || !web3ReadOnly) {\n      return\n    }\n\n    const provider = getPatchedSignerProvider(wallet, safe.chainId, web3ReadOnly)\n    const delayModifier = getModuleInstance(KnownContracts.DELAY, recovery.address, provider)\n\n    const signer = await provider.getSigner()\n    const contract = delayModifier.connect(signer)\n\n    const { to, value, data, operation } = recovery.args\n\n    await contract.executeNextTx.staticCall(to, value, data, operation)\n\n    return true\n  }, [isExecutable, recovery.address, recovery.args, safe.chainId, wallet, web3ReadOnly])\n}\n\nexport function useIsValidRecoverySkipExpired(recovery: RecoveryQueueItem): AsyncResult<boolean> {\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n  const web3ReadOnly = useWeb3ReadOnly()\n  const { isExpired } = useRecoveryTxState(recovery)\n\n  return useAsync(async () => {\n    if (!isExpired || !wallet?.address || !web3ReadOnly) {\n      return\n    }\n\n    const provider = getPatchedSignerProvider(wallet, safe.chainId, web3ReadOnly)\n    const delayModifier = getModuleInstance(KnownContracts.DELAY, recovery.address, provider)\n\n    const signer = await provider.getSigner()\n    const contract = delayModifier.connect(signer)\n\n    await contract.skipExpired.staticCall()\n\n    return true\n  }, [isExpired, recovery.address, safe.chainId, wallet, web3ReadOnly])\n}\n","import { getModuleInstance, KnownContracts } from '@gnosis.pm/zodiac'\nimport { type SafeState } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\nimport type { SafeTransaction } from '@safe-global/safe-core-sdk-types'\nimport type { TransactionAddedEvent } from '@gnosis.pm/zodiac/dist/cjs/types/Delay'\nimport type { Eip1193Provider, Overrides, TransactionResponse } from 'ethers'\n\nimport { didReprice, didRevert } from '@/utils/ethers-utils'\nimport { recoveryDispatch, RecoveryEvent, RecoveryTxType } from './recoveryEvents'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport { getUncheckedSigner } from '../../../services/tx/tx-sender/sdk'\nimport { isSmartContractWallet } from '@/utils/wallets'\n\nasync function getDelayModifierContract({\n  provider,\n  chainId,\n  delayModifierAddress,\n  signerAddress,\n}: {\n  provider: Eip1193Provider\n  chainId: string\n  delayModifierAddress: string\n  signerAddress: string\n}) {\n  const isSmartContract = await isSmartContractWallet(chainId, signerAddress)\n\n  const signer = await getUncheckedSigner(provider)\n  const delayModifier = getModuleInstance(KnownContracts.DELAY, delayModifierAddress, signer).connect(signer)\n\n  return {\n    isUnchecked: isSmartContract,\n    delayModifier,\n  }\n}\n\nfunction waitForRecoveryTx({\n  tx,\n  ...payload\n}: {\n  moduleAddress: string\n  recoveryTxHash: string\n  tx: TransactionResponse\n  txType: RecoveryTxType\n}) {\n  const event = {\n    ...payload,\n    txHash: tx.hash,\n  }\n\n  recoveryDispatch(RecoveryEvent.PROCESSING, event)\n  tx.wait()\n    .then((receipt) => {\n      if (didRevert(receipt!)) {\n        recoveryDispatch(RecoveryEvent.REVERTED, {\n          ...event,\n          error: new Error('Transaction reverted by EVM'),\n        })\n      } else {\n        recoveryDispatch(RecoveryEvent.PROCESSED, event)\n      }\n    })\n    .catch((error) => {\n      if (didReprice(error)) {\n        recoveryDispatch(RecoveryEvent.PROCESSED, event)\n      } else {\n        recoveryDispatch(RecoveryEvent.FAILED, {\n          ...event,\n          error: asError(error),\n        })\n      }\n    })\n}\n\nexport async function dispatchRecoveryProposal({\n  provider,\n  safe,\n  safeTx,\n  delayModifierAddress,\n  signerAddress,\n  overrides,\n}: {\n  provider: Eip1193Provider\n  safe: SafeState\n  safeTx: SafeTransaction\n  delayModifierAddress: string\n  signerAddress: string\n  overrides: Overrides\n}) {\n  const { delayModifier, isUnchecked } = await getDelayModifierContract({\n    provider,\n    chainId: safe.chainId,\n    delayModifierAddress,\n    signerAddress,\n  })\n\n  const txType = RecoveryTxType.PROPOSAL\n  let recoveryTxHash: string | undefined\n\n  try {\n    // Get recovery tx hash as a form of ID for FAILED event in event bus\n    recoveryTxHash = await delayModifier.getTransactionHash(\n      safeTx.data.to,\n      safeTx.data.value,\n      safeTx.data.data,\n      safeTx.data.operation,\n    )\n\n    const tx = await delayModifier.execTransactionFromModule(\n      safeTx.data.to,\n      safeTx.data.value,\n      safeTx.data.data,\n      safeTx.data.operation,\n      overrides,\n    )\n\n    if (isUnchecked) {\n      recoveryDispatch(RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET, {\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        txHash: tx.hash,\n      })\n    } else {\n      waitForRecoveryTx({\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        tx,\n      })\n    }\n  } catch (error) {\n    recoveryDispatch(RecoveryEvent.FAILED, {\n      moduleAddress: delayModifierAddress,\n      recoveryTxHash,\n      txType,\n      error: asError(error),\n    })\n\n    throw error\n  }\n}\n\nexport async function dispatchRecoveryExecution({\n  provider,\n  chainId,\n  args,\n  delayModifierAddress,\n  signerAddress,\n  overrides,\n}: {\n  provider: Eip1193Provider\n  chainId: string\n  args: TransactionAddedEvent.Log['args']\n  delayModifierAddress: string\n  signerAddress: string\n  overrides: Overrides\n}) {\n  const { delayModifier, isUnchecked } = await getDelayModifierContract({\n    provider,\n    chainId,\n    delayModifierAddress,\n    signerAddress,\n  })\n\n  const txType = RecoveryTxType.EXECUTION\n\n  try {\n    const tx = await delayModifier.executeNextTx(args.to, args.value, args.data, args.operation, overrides)\n\n    if (isUnchecked) {\n      recoveryDispatch(RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET, {\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash: args.txHash,\n        txType,\n        txHash: tx.hash,\n      })\n    } else {\n      waitForRecoveryTx({\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash: args.txHash,\n        txType,\n        tx,\n      })\n    }\n  } catch (error) {\n    recoveryDispatch(RecoveryEvent.FAILED, {\n      moduleAddress: delayModifierAddress,\n      recoveryTxHash: args.txHash,\n      txType,\n      error: asError(error),\n    })\n\n    throw error\n  }\n}\n\nexport async function dispatchRecoverySkipExpired({\n  provider,\n  chainId,\n  delayModifierAddress,\n  recoveryTxHash,\n  signerAddress,\n}: {\n  provider: Eip1193Provider\n  chainId: string\n  delayModifierAddress: string\n  recoveryTxHash: string\n  signerAddress: string\n}) {\n  const { delayModifier, isUnchecked } = await getDelayModifierContract({\n    provider,\n    chainId,\n    delayModifierAddress,\n    signerAddress,\n  })\n\n  const txType = RecoveryTxType.SKIP_EXPIRED\n\n  try {\n    const tx = await delayModifier.skipExpired()\n\n    if (isUnchecked) {\n      recoveryDispatch(RecoveryEvent.PROCESSING_BY_SMART_CONTRACT_WALLET, {\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        txHash: tx.hash,\n      })\n    } else {\n      waitForRecoveryTx({\n        moduleAddress: delayModifierAddress,\n        recoveryTxHash,\n        txType,\n        tx,\n      })\n    }\n  } catch (error) {\n    recoveryDispatch(RecoveryEvent.FAILED, {\n      moduleAddress: delayModifierAddress,\n      recoveryTxHash,\n      txType,\n      error: asError(error),\n    })\n\n    throw error\n  }\n}\n","import { sameAddress } from '@safe-global/utils/utils/addresses'\nimport {\n  isSwapOwnerCalldata,\n  isAddOwnerWithThresholdCalldata,\n  isRemoveOwnerCalldata,\n  isChangeThresholdCalldata,\n  isMultiSendCalldata,\n} from '@/utils/transaction-calldata'\nimport { getSafeSingletonDeployment } from '@safe-global/safe-deployments'\nimport { Interface } from 'ethers'\nimport type { BaseTransaction } from '@safe-global/safe-apps-sdk'\nimport { type SafeState } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\nimport { decodeMultiSendData } from '@safe-global/protocol-kit/dist/src/utils'\n\nfunction decodeOwnerManagementTransaction(safe: SafeState, transaction: BaseTransaction): SafeState {\n  const safeDeployment = getSafeSingletonDeployment({ network: safe.chainId, version: safe.version ?? undefined })\n\n  if (!safeDeployment) {\n    throw new Error('No Safe deployment found')\n  }\n\n  const safeInterface = new Interface(safeDeployment.abi)\n\n  let _owners = safe.owners\n  let _threshold = safe.threshold\n\n  if (isSwapOwnerCalldata(transaction.data)) {\n    const [, ownerToRemove, ownerToAdd] = safeInterface.decodeFunctionData('swapOwner', transaction.data)\n\n    _owners = safe.owners.map((owner) => (sameAddress(owner.value, ownerToRemove) ? { value: ownerToAdd } : owner))\n  } else if (isAddOwnerWithThresholdCalldata(transaction.data)) {\n    const [ownerToAdd, newThreshold] = safeInterface.decodeFunctionData('addOwnerWithThreshold', transaction.data)\n\n    _owners = _owners.concat({ value: ownerToAdd })\n    _threshold = Number(newThreshold)\n  } else if (isRemoveOwnerCalldata(transaction.data)) {\n    const [, ownerToRemove, newThreshold] = safeInterface.decodeFunctionData('removeOwner', transaction.data)\n\n    _owners = safe.owners.filter((owner) => !sameAddress(owner.value, ownerToRemove))\n    _threshold = Number(newThreshold)\n  } else if (isChangeThresholdCalldata(transaction.data)) {\n    const [newThreshold] = safeInterface.decodeFunctionData('changeThreshold', transaction.data)\n\n    _threshold = Number(newThreshold)\n  } else {\n    throw new Error('Unexpected transaction')\n  }\n\n  return {\n    ...safe,\n    owners: _owners,\n    threshold: _threshold,\n  }\n}\n\nexport function getRecoveredSafeInfo(safe: SafeState, transaction: BaseTransaction): SafeState {\n  const transactions = isMultiSendCalldata(transaction.data) ? decodeMultiSendData(transaction.data) : [transaction]\n\n  return transactions.reduce((acc, cur) => {\n    return decodeOwnerManagementTransaction(acc, cur)\n  }, safe)\n}\n","import { Typography } from '@mui/material'\nimport { useMemo } from 'react'\nimport type { ReactElement } from 'react'\n\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { InfoDetails } from '@/components/transactions/InfoDetails'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport { useIsRecoverer } from '@/features/recovery/hooks/useIsRecoverer'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { logError, Errors } from '@/services/exceptions'\nimport { getRecoveredSafeInfo } from '@/features/recovery/services/transaction-list'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function RecoveryDescription({ item }: { item: RecoveryQueueItem }): ReactElement {\n  const { args, isMalicious } = item\n  const { safe } = useSafeInfo()\n  const isRecoverer = useIsRecoverer()\n\n  const newSetup = useMemo(() => {\n    try {\n      return getRecoveredSafeInfo(safe, {\n        to: args.to,\n        value: args.value.toString(),\n        data: args.data,\n      })\n    } catch (e) {\n      logError(Errors._811, e)\n    }\n    // We only render the threshold and owners\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [args.data, args.to, args.value, safe.threshold, safe.owners])\n\n  if (isMalicious) {\n    return (\n      <ErrorMessage>This transaction potentially calls malicious actions. We recommend cancelling it.</ErrorMessage>\n    )\n  }\n\n  // TODO: Improve by using Tenderly to check if the proposal will fail\n  if (!newSetup || newSetup.owners.length === 0) {\n    return (\n      <ErrorMessage>\n        This recovery proposal will fail as the owner structure has since been modified. We recommend cancelling it\n        {isRecoverer ? ' and trying again' : ''}.\n      </ErrorMessage>\n    )\n  }\n\n  return (\n    <InfoDetails title=\"Add signer(s):\">\n      {newSetup.owners.map((owner) => (\n        <EthHashInfo key={owner.value} address={owner.value} shortAddress={false} showCopyButton hasExplorer />\n      ))}\n\n      <div>\n        <Typography fontWeight={700} gutterBottom>\n          Required confirmations for new transactions:\n        </Typography>\n        <Typography>\n          {newSetup.threshold} out of {newSetup.owners.length} owner(s)\n        </Typography>\n      </div>\n    </InfoDetails>\n  )\n}\n","import { createContext, useState } from 'react'\nimport type { Dispatch, ReactElement, SetStateAction } from 'react'\n\ntype SubmitError = Error | undefined\n\nexport const RecoveryListItemContext = createContext<{\n  submitError: SubmitError\n  setSubmitError: Dispatch<SetStateAction<SubmitError>>\n}>({\n  submitError: undefined,\n  setSubmitError: () => {},\n})\n\nexport function RecoveryListItemProvider({ children }: { children: ReactElement }): ReactElement {\n  const [submitError, setSubmitError] = useState<SubmitError>(undefined)\n\n  return (\n    <RecoveryListItemContext.Provider value={{ submitError, setSubmitError }}>\n      {children}\n    </RecoveryListItemContext.Provider>\n  )\n}\n","import { useState, useEffect } from 'react'\n\nexport function useClock(interval = 1_000): number {\n  const [timestamp, setTimestamp] = useState(Date.now())\n\n  useEffect(() => {\n    const timeout = setInterval(() => {\n      setTimestamp((prev) => prev + interval)\n    }, interval)\n\n    return () => {\n      clearInterval(timeout)\n    }\n  }, [interval])\n\n  return timestamp\n}\n","import { useClock } from '../../../hooks/useClock'\nimport { selectDelayModifierByTxHash } from '@/features/recovery/services/selectors'\nimport recoveryStore from '@/features/recovery/components/RecoveryContext'\nimport { sameAddress } from '@safe-global/utils/utils/addresses'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function useRecoveryTxState({ validFrom, expiresAt, transactionHash, args, address }: RecoveryQueueItem): {\n  isNext: boolean\n  isExecutable: boolean\n  isExpired: boolean\n  isPending: boolean\n  remainingSeconds: number\n} {\n  const { state, pending } = recoveryStore.useStore() || {}\n  const recovery = state?.[0]\n  const delayModifier = recovery && selectDelayModifierByTxHash(recovery, transactionHash)\n\n  // We don't display seconds in the interface, so we can use a 60s interval\n  const timestamp = useClock(60_000)\n  const remainingMs = Number(validFrom) - timestamp\n\n  const isValid = remainingMs <= 0\n  const isExpired = expiresAt !== null ? Number(expiresAt) <= Date.now() : false\n\n  // Check module address in case multiple Delay Modifiers enabled\n  const isNext =\n    !delayModifier ||\n    (sameAddress(delayModifier.address, address) && BigInt(args.queueNonce) === BigInt(delayModifier.txNonce))\n  const isExecutable = isNext && isValid && !isExpired\n  const isPending = !!pending?.[args.txHash]\n\n  const remainingSeconds = isValid ? 0 : Math.ceil(remainingMs / 1_000)\n\n  return { isNext, isExecutable, isExpired, remainingSeconds, isPending }\n}\n"],"names":["RecoveryValidationErrors","item","submitError","useContext","RecoveryListItemContext","executeNextTxError","useIsValidRecoveryExecuteNextTx","executeSkipExpiredError","useIsValidRecoverySkipExpired","validationError","ErrorMessage","error","asyncCallback","RecoveryAttemptReview","isLoading","useAsyncCallback","dispatchRecoveryExecution","wallet","useWallet","safe","useSafeInfo","setTxFlow","TxModalContext","setNonceNeeded","SafeTxContext","gasPrice","useGasPrice","chain","useCurrentChain","onFormSubmit","useCallback","e","preventDefault","overrides","isEIP1559","hasFeature","FEATURES","EIP1559","maxFeePerGas","toString","maxPriorityFeePerGas","provider","chainId","args","delayModifierAddress","address","signerAddress","undefined","err","trackError","Errors","_812","useEffect","TxCard","form","onSubmit","Stack","sx","gap","mb","Typography","FieldsGrid","title","EthHashInfo","executor","showName","showCopyButton","hasExplorer","Divider","mx","RecoveryDescription","NetworkWarning","my","CardActions","CheckWallet","allowNonOwner","Button","data-testid","variant","type","disabled","isOk","minWidth","CircularProgress","size","RecoveryAttemptFlow","TxLayout","subtitle","icon","SaveAddressIcon","step","hideNonce","RecoveryEvent","RecoveryTxType","recoveryEventBus","EventBus","recoveryDispatch","dispatch","bind","recoverySubscribe","subscribe","Object","values","forEach","event","console","info","detail","useIsValidRecoveryExecTransactionFromModule","safeTx","web3ReadOnly","useWeb3ReadOnly","isRecoverer","useIsRecoverer","useAsync","getPatchedSignerProvider","delayModifier","getModuleInstance","KnownContracts","DELAY","signer","getSigner","connect","execTransactionFromModule","staticCall","data","to","value","operation","recovery","isExecutable","useRecoveryTxState","contract","executeNextTx","isExpired","skipExpired","getDelayModifierContract","isSmartContract","isSmartContractWallet","getUncheckedSigner","isUnchecked","waitForRecoveryTx","tx","payload","txHash","hash","PROCESSING","wait","then","didRevert","receipt","REVERTED","PROCESSED","catch","didReprice","FAILED","asError","dispatchRecoveryProposal","recoveryTxHash","txType","PROPOSAL","getTransactionHash","PROCESSING_BY_SMART_CONTRACT_WALLET","moduleAddress","EXECUTION","dispatchRecoverySkipExpired","SKIP_EXPIRED","isMalicious","newSetup","useMemo","getRecoveredSafeInfo","transactions","isMultiSendCalldata","transaction","decodeMultiSendData","reduce","acc","cur","decodeOwnerManagementTransaction","safeDeployment","getSafeSingletonDeployment","network","version","safeInterface","Interface","abi","_owners","owners","_threshold","threshold","isSwapOwnerCalldata","ownerToRemove","ownerToAdd","decodeFunctionData","map","sameAddress","owner","isAddOwnerWithThresholdCalldata","newThreshold","concat","Number","isRemoveOwnerCalldata","filter","isChangeThresholdCalldata","logError","_811","length","InfoDetails","shortAddress","div","fontWeight","gutterBottom","createContext","setSubmitError","RecoveryListItemProvider","children","useState","Provider","validFrom","expiresAt","transactionHash","state","pending","recoveryStore","useStore","selectDelayModifierByTxHash","timestamp","useClock","interval","setTimestamp","Date","now","timeout","setInterval","prev","clearInterval","remainingMs","isValid","isNext","BigInt","queueNonce","txNonce","isPending","remainingSeconds","Math","ceil"],"sourceRoot":"","ignoreList":[]}