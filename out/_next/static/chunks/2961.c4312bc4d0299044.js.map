{"version":3,"file":"static/chunks/2961.c4312bc4d0299044.js","mappings":"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","sources":["webpack://_N_E/./src/services/onboard/ledger-module.ts","webpack://_N_E/./src/hooks/wallets/wallets.ts","webpack://_N_E/./src/services/onboard.ts"],"sourcesContent":["import type { DmkError, ExecuteDeviceActionReturnType } from '@ledgerhq/device-management-kit'\nimport { makeError } from 'ethers'\nimport type {\n  GetAddressDAOutput,\n  SignPersonalMessageDAOutput,\n  SignTransactionDAOutput,\n  SignTypedDataDAOutput,\n  TypedData,\n} from '@ledgerhq/device-signer-kit-ethereum'\nimport type { Chain, WalletInit, WalletInterface } from '@web3-onboard/common'\nimport type { Account, Asset, BasePath, DerivationPath, ScanAccountsOptions } from '@web3-onboard/hw-common'\nimport type { Subscription } from 'rxjs'\n\nconst LEDGER_LIVE_PATH: DerivationPath = \"44'/60'\"\nconst LEDGER_LEGACY_PATH: DerivationPath = \"44'/60'/0'\"\n\nconst DEFAULT_BASE_PATHS: Array<BasePath> = [\n  {\n    label: 'Ledger Live',\n    value: LEDGER_LIVE_PATH,\n  },\n  {\n    label: 'Ledger Legacy',\n    value: LEDGER_LEGACY_PATH,\n  },\n]\n\nconst DEFAULT_ASSETS: Array<Asset> = [\n  {\n    label: 'ETH',\n  },\n]\n\nexport function ledgerModule(): WalletInit {\n  return () => {\n    return {\n      label: 'Ledger',\n      getIcon: async (): Promise<string> => `\n<svg width=\"160\" height=\"160\" viewBox=\"0 0 160 160\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<rect width=\"160\" height=\"160\" rx=\"16\" fill=\"#00000D\"/>\n<path d=\"M93.1482 119.207V125H135V98.8769H128.902V119.207H93.1482ZM93.1482 33V38.792H128.902V59.1231H135V33H93.1482ZM74.0104 59.1231H67.9125V98.8769H95.4153V93.6539H74.0104V59.1231ZM26 98.8769V125H67.8518V119.207H32.0979V98.8769H26ZM26 33V59.1231H32.0979V38.792H67.8518V33H26Z\" fill=\"white\"/>\n</svg>`,\n      getInterface: async ({ chains, EventEmitter }): Promise<WalletInterface> => {\n        const DEFAULT_CHAIN = chains[0]\n\n        const { BigNumber } = await import('@ethersproject/bignumber')\n        const { hexaStringToBuffer } = await import('@ledgerhq/device-management-kit')\n        const { createEIP1193Provider, ProviderRpcError, ProviderRpcErrorCode } = await import('@web3-onboard/common')\n        const { accountSelect, getHardwareWalletProvider } = await import('@web3-onboard/hw-common')\n        const { Signature, Transaction, JsonRpcProvider } = await import('ethers')\n\n        const eventEmitter = new EventEmitter()\n        const ledgerSdk = await getLedgerSdk()\n\n        /* -------------------------------------------------------------------------- */\n        /*                                    State                                   */\n        /* -------------------------------------------------------------------------- */\n\n        let currentChain = DEFAULT_CHAIN\n        let currentAccount: Account | null = null\n\n        // Sets the current chain and emits the chainChanged event\n        function setCurrentChain(chainId: Chain['id']): void {\n          const newChain = chains.find((chain) => chain.id === chainId)\n          if (!newChain) {\n            throw new ProviderRpcError({\n              code: ProviderRpcErrorCode.UNRECOGNIZED_CHAIN_ID,\n              message: `Unrecognized chain ID: ${chainId}`,\n            })\n          }\n          currentChain = newChain\n          eventEmitter.emit('chainChanged', currentChain.id)\n        }\n\n        // Sets the current account and emits the accountsChanged event\n        function setCurrentAccount(account: Account): void {\n          currentAccount = account\n          eventEmitter.emit('accountsChanged', [currentAccount.address])\n        }\n\n        // Clears the current account and emits the accountsChanged event\n        function clearCurrentAccount(): void {\n          currentAccount = null\n          eventEmitter.emit('accountsChanged', [])\n        }\n\n        // Clears the current chain and emits the chainChanged event\n        function clearCurrentChain(): void {\n          currentChain = DEFAULT_CHAIN\n          eventEmitter.emit('chainChanged', currentChain.id)\n        }\n\n        // Gets the asserted derivation path from the current account\n        function getAssertedDerivationPath(): DerivationPath {\n          if (!currentAccount?.derivationPath) {\n            throw new ProviderRpcError({\n              code: -32000, // Method handler crashed\n              message: 'No derivation path found',\n            })\n          }\n          return currentAccount.derivationPath\n        }\n\n        /* -------------------------------------------------------------------------- */\n        /*                              EIP-1193 provider                             */\n        /* -------------------------------------------------------------------------- */\n\n        const eip1193Provider = createEIP1193Provider(\n          getHardwareWalletProvider(() => {\n            const rpcUrl = currentChain.rpcUrl\n            if (!rpcUrl) {\n              throw new ProviderRpcError({\n                code: ProviderRpcErrorCode.UNRECOGNIZED_CHAIN_ID,\n                message: `No RPC found for chain ID: ${currentChain.id}`,\n              })\n            }\n            return rpcUrl\n          }),\n          {\n            eth_requestAccounts: async () => {\n              const accounts = await getAccounts()\n              return [accounts[0].address]\n            },\n            eth_selectAccounts: async () => {\n              const accounts = await getAccounts()\n              return accounts.map((account) => account.address)\n            },\n            eth_accounts: async () => {\n              if (!currentAccount) {\n                return []\n              }\n              return [currentAccount.address]\n            },\n            eth_chainId: async () => {\n              return currentChain.id\n            },\n            eth_signTransaction: async (args) => {\n              const txParams = args.params[0]\n\n              const gasLimit = txParams.gas ?? txParams.gasLimit\n              const nonce =\n                txParams.nonce ??\n                // Safe creation does not provide nonce\n                ((await eip1193Provider.request({\n                  method: 'eth_getTransactionCount',\n                  // Take pending transactions into account\n                  params: [currentAccount!.address, 'pending'],\n                })) as string)\n\n              const transaction = Transaction.from({\n                chainId: BigInt(currentChain.id),\n                data: txParams.data,\n                gasLimit: gasLimit ? BigInt(gasLimit) : null,\n                gasPrice: txParams.gasPrice ? BigInt(txParams.gasPrice) : null,\n                maxFeePerGas: txParams.maxFeePerGas ? BigInt(txParams.maxFeePerGas) : null,\n                maxPriorityFeePerGas: txParams.maxPriorityFeePerGas ? BigInt(txParams.maxPriorityFeePerGas) : null,\n                nonce: parseInt(nonce, 16),\n                to: txParams.to,\n                value: txParams.value ? BigInt(txParams.value) : null,\n              })\n\n              transaction.signature = await ledgerSdk.signTransaction(\n                getAssertedDerivationPath(),\n                hexaStringToBuffer(transaction.unsignedSerialized)!,\n              )\n\n              return transaction.serialized\n            },\n            eth_sendTransaction: async (args) => {\n              const signedTransaction = await eip1193Provider.request({\n                method: 'eth_signTransaction',\n                params: args.params,\n              })\n              return (await eip1193Provider.request({\n                method: 'eth_sendRawTransaction',\n                params: [signedTransaction],\n              })) as string\n            },\n            eth_sign: async (args) => {\n              // The Safe requires transactions be signed as bytes, but eth_sign is only used by\n              // the Transaction Service, e.g. notification registration. We therefore sign\n              // messages as is to avoid unreadable byte notation (e.g. \\xef\\xbe\\xad\\xde). Instead,\n              // the Ledger device shows plain hex (e.g. 0xdeadbeef).\n              const message = args.params[1]\n              const signature = await ledgerSdk.signMessage(getAssertedDerivationPath(), message)\n              return Signature.from(signature).serialized\n            },\n            personal_sign: async (args) => {\n              // personal_sign params are the inverse of eth_sign\n              const [message, address] = args.params\n              return await eip1193Provider.request({\n                method: 'eth_sign',\n                params: [address, message],\n              })\n            },\n            eth_signTypedData: async (args) => {\n              const typedData = JSON.parse(args.params[1])\n              const signature = await ledgerSdk.signTypedData(getAssertedDerivationPath(), typedData)\n              return Signature.from(signature).serialized\n            },\n            // @ts-expect-error createEIP1193Provider does not allow overriding eth_signTypedData_v3\n            eth_signTypedData_v3: async (args) => {\n              return await eip1193Provider.request({ method: 'eth_signTypedData', params: args.params })\n            },\n            // @ts-expect-error createEIP1193Provider does not allow overriding eth_signTypedData_v4\n            eth_signTypedData_v4: async (args) => {\n              return await eip1193Provider.request({ method: 'eth_signTypedData', params: args.params })\n            },\n            wallet_switchEthereumChain: async (args) => {\n              const chainId = args.params[0].chainId\n              setCurrentChain(chainId)\n              return null\n            },\n          },\n        )\n\n        // Disconnects Ledger device and clears current account and chain\n        eip1193Provider.disconnect = async () => {\n          await ledgerSdk.disconnect()\n          clearCurrentAccount()\n          clearCurrentChain()\n        }\n\n        // createEIP1193Provider does not bind EventEmitter\n        eip1193Provider.on = eventEmitter.on.bind(eventEmitter)\n        eip1193Provider.removeListener = eventEmitter.removeListener.bind(eventEmitter)\n\n        /* -------------------------------------------------------------------------- */\n        /*                       Web3-Onboard account selection                       */\n        /* -------------------------------------------------------------------------- */\n\n        /**\n         * Gets a list of derived accounts from Ledger device for selection\n         * and sets the first account as the current account\n         */\n        async function getAccounts(): Promise<Array<Account>> {\n          const accounts = await accountSelect({\n            basePaths: DEFAULT_BASE_PATHS,\n            assets: DEFAULT_ASSETS,\n            chains,\n            scanAccounts: deriveAccounts,\n          })\n\n          if (accounts.length > 0) {\n            setCurrentAccount(accounts[0])\n          }\n\n          return accounts\n        }\n\n        /**\n         * Gets a list of derived accounts from Ledger device for selection\n         * If a custom derivation path is provided, one account is returned\n         * otherwise a minimum of 5 accounts are returned\n         */\n        async function deriveAccounts(args: ScanAccountsOptions): Promise<Array<Account>> {\n          const MAX_ZERO_BALANCE_ACCOUNTS = 5\n\n          setCurrentChain(args.chainId)\n\n          const provider = new JsonRpcProvider(currentChain.rpcUrl)\n\n          // Only return exact account from custom derivation\n          if (args.derivationPath !== LEDGER_LIVE_PATH && args.derivationPath !== LEDGER_LEGACY_PATH) {\n            const account = await deriveAccount({ ...args, provider })\n            return [account]\n          }\n\n          const accounts = []\n\n          let zeroBalanceAccounts = 0\n          let index = 0\n\n          // Iterates until 0 balance account, then add 4 more 0 balance accounts after\n          while (zeroBalanceAccounts < MAX_ZERO_BALANCE_ACCOUNTS) {\n            const account = await deriveAccount({\n              derivationPath:\n                args.derivationPath === LEDGER_LIVE_PATH\n                  ? `${args.derivationPath}/${index}'/0/0`\n                  : `${args.derivationPath}/${index}`,\n              provider,\n              asset: args.asset,\n            })\n            accounts.push(account)\n\n            if (account.balance.value.isZero()) {\n              zeroBalanceAccounts++\n            } else {\n              zeroBalanceAccounts = 0\n            }\n\n            index++\n          }\n\n          return accounts\n        }\n\n        // Gets derived account from Ledger device for selection in Web3-Onboard\n        async function deriveAccount(args: {\n          derivationPath: string\n          provider: InstanceType<typeof JsonRpcProvider>\n          asset: Asset\n        }): Promise<Account> {\n          const { address } = await ledgerSdk.getAddress(args.derivationPath)\n          const balance = await args.provider.getBalance(address)\n\n          return {\n            derivationPath: args.derivationPath,\n            address,\n            balance: {\n              asset: args.asset.label,\n              value: BigNumber.from(balance),\n            },\n          }\n        }\n\n        return {\n          provider: eip1193Provider,\n        }\n      },\n    }\n  }\n}\n\nconst enum LedgerErrorCode {\n  REJECTED = '6985',\n}\n\n// Promisified Ledger SDK\nasync function getLedgerSdk() {\n  const { DeviceManagementKitBuilder } = await import('@ledgerhq/device-management-kit')\n  const { webHidTransportFactory, webHidIdentifier } = await import('@ledgerhq/device-transport-kit-web-hid')\n  const { SignerEthBuilder } = await import('@ledgerhq/device-signer-kit-ethereum')\n  const { lastValueFrom } = await import('rxjs')\n\n  // Get connected device and create signer\n  const dmk = new DeviceManagementKitBuilder().addTransport(webHidTransportFactory).build()\n  const device = await lastValueFrom(dmk.startDiscovering({ transport: webHidIdentifier }))\n  const sessionId = await dmk.connect({ device })\n  const signer = new SignerEthBuilder({ dmk, sessionId }).build()\n\n  return {\n    disconnect: async (): Promise<void> => {\n      return dmk.disconnect({ sessionId })\n    },\n    getAddress: async (derivationPath: string): Promise<GetAddressDAOutput> => {\n      return waitForAction(signer.getAddress(derivationPath, { checkOnDevice: false }))\n    },\n    signMessage: async (derivationPath: string, message: string | Uint8Array): Promise<SignPersonalMessageDAOutput> => {\n      return waitForAction(signer.signMessage(derivationPath, message))\n    },\n    signTransaction: async (derivationPath: string, transaction: Uint8Array): Promise<SignTransactionDAOutput> => {\n      return waitForAction(signer.signTransaction(derivationPath, transaction))\n    },\n    signTypedData: async (derivationPath: string, typedData: TypedData): Promise<SignTypedDataDAOutput> => {\n      return waitForAction(signer.signTypedData(derivationPath, typedData))\n    },\n  }\n}\n\nasync function waitForAction<Output, Error extends DmkError, IntermediateValue>({\n  observable,\n}: ExecuteDeviceActionReturnType<Output, Error, IntermediateValue>): Promise<Output> {\n  const { DeviceActionStatus } = await import('@ledgerhq/device-management-kit')\n\n  let subscription: Subscription | undefined\n\n  try {\n    return await new Promise((resolve, reject) => {\n      subscription = observable.subscribe({\n        next: (actionState) => {\n          if (actionState.status === DeviceActionStatus.Completed) {\n            resolve(actionState.output)\n          } else if (actionState.status === DeviceActionStatus.Error) {\n            reject(mapEthersError(actionState.error))\n          } else {\n            // Awaiting user action, e.g. device to be unlocked. We could throw\n            // an explicit error message but we keep the signing request alive\n          }\n        },\n      })\n    })\n  } finally {\n    subscription?.unsubscribe()\n  }\n}\n\nfunction mapEthersError(error: DmkError) {\n  const isRejection = 'errorCode' in error ? error.errorCode === LedgerErrorCode.REJECTED : false\n\n  if (!isRejection) {\n    return makeError(error.message ?? 'unknown', 'UNKNOWN_ERROR', {\n      info: error,\n    })\n  }\n\n  return makeError('user rejected action', 'ACTION_REJECTED', {\n    action: 'unknown',\n    reason: 'rejected',\n    info: error,\n  })\n}\n","import { WC_PROJECT_ID } from '@/config/constants'\nimport type { ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport type { InitOptions } from '@web3-onboard/core'\nimport coinbaseModule from '@web3-onboard/coinbase'\nimport injectedWalletModule from '@web3-onboard/injected-wallets'\nimport walletConnect from '@web3-onboard/walletconnect'\nimport pkModule from '@/services/private-key-module'\nimport { ledgerModule } from '@/services/onboard/ledger-module'\n\nimport { CGW_NAMES, WALLET_KEYS } from './consts'\n\nconst prefersDarkMode = (): boolean => {\n  return window?.matchMedia('(prefers-color-scheme: dark)')?.matches\n}\n\ntype WalletInits = InitOptions['wallets']\ntype WalletInit = WalletInits extends Array<infer U> ? U : never\n\nconst walletConnectV2 = (chain: ChainInfo) => {\n  // WalletConnect v2 requires a project ID\n  if (!WC_PROJECT_ID) {\n    return () => null\n  }\n\n  return walletConnect({\n    version: 2,\n    projectId: WC_PROJECT_ID,\n    qrModalOptions: {\n      themeVariables: {\n        '--wcm-z-index': '1302',\n      },\n      themeMode: prefersDarkMode() ? 'dark' : 'light',\n    },\n    requiredChains: [parseInt(chain.chainId)],\n    dappUrl: location.origin,\n  })\n}\n\nconst WALLET_MODULES: Partial<{ [_key in WALLET_KEYS]: (chain: ChainInfo) => WalletInit }> = {\n  [WALLET_KEYS.INJECTED]: () => injectedWalletModule() as WalletInit,\n  [WALLET_KEYS.WALLETCONNECT_V2]: (chain) => walletConnectV2(chain) as WalletInit,\n  [WALLET_KEYS.COINBASE]: () => coinbaseModule({ darkMode: prefersDarkMode() }) as WalletInit,\n  [WALLET_KEYS.LEDGER]: () => ledgerModule(),\n  [WALLET_KEYS.PK]: (chain) => pkModule(chain.chainId, chain.rpcUri) as WalletInit,\n}\n\nexport const getAllWallets = (chain: ChainInfo): WalletInits => {\n  return Object.values(WALLET_MODULES).map((module) => module(chain))\n}\n\nexport const isWalletSupported = (disabledWallets: string[], walletLabel: string): boolean => {\n  const legacyWalletName = CGW_NAMES?.[walletLabel.toUpperCase() as WALLET_KEYS]\n  return !disabledWallets.includes(legacyWalletName || walletLabel)\n}\n\nexport const getSupportedWallets = (chain: ChainInfo): WalletInits => {\n  const enabledWallets = Object.entries(WALLET_MODULES).filter(([key]) => isWalletSupported(chain.disabledWallets, key))\n\n  if (enabledWallets.length === 0) {\n    return [injectedWalletModule()]\n  }\n\n  return enabledWallets.map(([, module]) => module(chain))\n}\n","import Onboard, { type OnboardAPI } from '@web3-onboard/core'\nimport type { ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport { getAllWallets } from '@/hooks/wallets/wallets'\nimport { getRpcServiceUrl } from '@/hooks/wallets/web3'\nimport { numberToHex } from '@/utils/hex'\nimport { BRAND_NAME } from '@/config/constants'\nimport type { EnvState } from '@safe-global/store/settingsSlice'\n\nlet onboard: OnboardAPI | null = null\n\nexport const createOnboard = (\n  chainConfigs: ChainInfo[],\n  currentChain: ChainInfo,\n  rpcConfig: EnvState['rpc'] | undefined,\n): OnboardAPI => {\n  if (onboard) return onboard\n\n  const wallets = getAllWallets(currentChain)\n\n  const chains = chainConfigs.map((cfg) => ({\n    // We cannot use ethers' toBeHex here as we do not want to pad it to an even number of characters.\n    id: numberToHex(parseInt(cfg.chainId)),\n    label: cfg.chainName,\n    rpcUrl: rpcConfig?.[cfg.chainId] || getRpcServiceUrl(cfg.rpcUri),\n    token: cfg.nativeCurrency.symbol,\n    color: cfg.theme.backgroundColor,\n    publicRpcUrl: cfg.publicRpcUri.value,\n    blockExplorerUrl: new URL(cfg.blockExplorerUriTemplate.address).origin,\n  }))\n\n  onboard = Onboard({\n    wallets,\n\n    chains,\n\n    accountCenter: {\n      mobile: { enabled: false },\n      desktop: { enabled: false },\n    },\n\n    notify: {\n      enabled: false,\n    },\n\n    appMetadata: {\n      name: BRAND_NAME,\n      icon: location.origin + '/images/logo-round.svg',\n      description: `${BRAND_NAME} – smart contract wallet for Ethereum (ex-Gnosis Safe multisig)`,\n    },\n\n    connect: {\n      removeWhereIsMyWalletWarning: true,\n      autoConnectLastWallet: false,\n    },\n  })\n\n  return onboard\n}\n"],"names":["LEDGER_LIVE_PATH","LEDGER_LEGACY_PATH","DEFAULT_BASE_PATHS","label","value","DEFAULT_ASSETS","getLedgerSdk","DeviceManagementKitBuilder","webHidTransportFactory","webHidIdentifier","SignerEthBuilder","lastValueFrom","dmk","addTransport","build","device","startDiscovering","transport","sessionId","connect","signer","disconnect","getAddress","derivationPath","waitForAction","checkOnDevice","signMessage","message","signTransaction","transaction","signTypedData","typedData","subscription","observable","DeviceActionStatus","Promise","resolve","reject","subscribe","next","actionState","status","Completed","output","Error","mapEthersError","isRejection","error","errorCode","makeError","info","action","reason","unsubscribe","prefersDarkMode","window","matchMedia","matches","walletConnectV2","WC_PROJECT_ID","walletConnect","version","projectId","qrModalOptions","themeVariables","themeMode","requiredChains","parseInt","chain","chainId","dappUrl","location","origin","WALLET_MODULES","WALLET_KEYS","INJECTED","injectedWalletModule","WALLETCONNECT_V2","COINBASE","coinbaseModule","darkMode","LEDGER","getIcon","getInterface","chains","EventEmitter","DEFAULT_CHAIN","BigNumber","hexaStringToBuffer","createEIP1193Provider","ProviderRpcError","ProviderRpcErrorCode","accountSelect","getHardwareWalletProvider","Signature","Transaction","JsonRpcProvider","eventEmitter","ledgerSdk","currentChain","currentAccount","setCurrentChain","newChain","find","id","code","UNRECOGNIZED_CHAIN_ID","emit","getAssertedDerivationPath","eip1193Provider","rpcUrl","eth_requestAccounts","accounts","getAccounts","address","eth_selectAccounts","map","account","eth_accounts","eth_chainId","eth_signTransaction","args","txParams","params","gasLimit","gas","nonce","request","method","from","BigInt","data","gasPrice","maxFeePerGas","maxPriorityFeePerGas","to","signature","unsignedSerialized","serialized","eth_sendTransaction","signedTransaction","eth_sign","personal_sign","eth_signTypedData","JSON","parse","eth_signTypedData_v3","eth_signTypedData_v4","wallet_switchEthereumChain","basePaths","assets","scanAccounts","deriveAccounts","length","provider","deriveAccount","zeroBalanceAccounts","index","MAX_ZERO_BALANCE_ACCOUNTS","asset","push","balance","isZero","getBalance","on","bind","removeListener","PK","pkModule","rpcUri","getAllWallets","Object","values","module","isWalletSupported","disabledWallets","walletLabel","legacyWalletName","CGW_NAMES","toUpperCase","includes","enabledWallets","entries","filter","key","onboard","createOnboard","chainConfigs","rpcConfig","wallets","numberToHex","cfg","chainName","getRpcServiceUrl","token","nativeCurrency","symbol","color","theme","backgroundColor","publicRpcUrl","publicRpcUri","blockExplorerUrl","URL","blockExplorerUriTemplate","Onboard","accountCenter","mobile","enabled","desktop","notify","appMetadata","name","BRAND_NAME","icon","description","removeWhereIsMyWalletWarning","autoConnectLastWallet"],"sourceRoot":"","ignoreList":[]}