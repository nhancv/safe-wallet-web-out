{"version":3,"file":"static/chunks/3155.484f9d2b17e5d2db.js","mappings":"4HAGA,IAAMA,EAAe,MAEfC,EAAa,CAACC,EAAiCC,KAC/CD,IAASA,EAAQC,IAAI,CAAGA,CAAAA,CAC9B,EAEMC,EAAmB,IACvBC,SAASC,KAAK,CAAGC,EAAaP,EAAeK,SAASC,KAAK,CAAGD,SAASC,KAAK,CAACE,OAAO,CAACR,EAAc,GACrG,EAEMS,EAAe,SACnBP,CAAAA,CACAQ,CAAAA,MACAC,EAAAA,UAAAA,MAAAA,CAAAA,GAAAA,KAAAA,IAAAA,SAAAA,CAAAA,EAAAA,EAAAA,SAAAA,CAAAA,EAAAA,CAEMC,EAFO,KAGXR,EAAiBO,GACjBV,EAAWC,EAASS,EAlBJ,WAkBiBE,iBAAcH,GAC/CC,EAAa,CAACA,CAChB,EAIA,OAFAC,IAEOE,YAAYF,EAAS,IAC9B,EAoCA,EA/B8B,KAC5BG,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,OA8BGC,EA3BPC,EAFJ,IAAMf,EAAUG,SAASa,EA6BOF,EAAA,SA7BM,CAAkB,qBAClDN,EAAeR,OAAAA,EAAAA,KAAAA,EAAAA,EAASC,IAAAA,GAAQ,EAAjBD,CAGfiB,EAAQ,KACZC,cAAcH,GACdhB,EAAWC,EAASQ,GACpBN,GAAiB,EACnB,EAEMiB,EAAyB,KACzBhB,SAASiB,MAAM,CACjBL,CADmB,CACRR,EAAaP,EAASQ,GAEjCS,GAEJ,EAMA,OAJAd,SAASkB,gBAAgB,CAAC,mBAAoBF,GAE9CA,IAEO,KACLF,IACAd,SAASmB,mBAAmB,CAAC,mBAAoBH,EACnD,CACF,EAAG,EAAE,CACP,qHC7BA,MAxBuB,QAOEI,EAAAA,EANvB,GAAM,CAACC,EAAaC,EAAe,CAAGC,CAAAA,EAAAA,EAAAA,EAuBzBC,MAvByBD,CAAQA,GAExC,IAqBqBC,EArBnBC,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GAItBC,EAAAA,QAAiBP,EAFNQ,CAAAA,EAAAA,EAAAA,CAAAA,CAAeA,GAEAC,IAAI,GAAbT,KAAAA,IAAAA,EAAAA,KAAAA,EAAsB,QAAtBA,EAAAA,EAAeU,OAAO,GAAtBV,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EACnBW,MAAM,CAACC,EAAAA,CAAqBA,EAC7BC,IAAI,CAAC,GAASC,EAAIC,WAAW,GAAKC,GAE/B,CAACC,EAAgBC,EAAa,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAAC,UAC9C,GAAKH,CAAD,CACJ,MAAOI,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,CAACJ,CADF,CACmBX,EAAKgB,OAAO,CAEvD,EAAG,CAACL,EAAiBX,EAAKgB,OAAO,CAAEhB,EAAKiB,WAAW,CAAC,EAMpD,MAJAhC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACRY,QAAee,EAAAA,EAAkBV,EACnC,EAAG,CAACA,EAAgBU,EAAe,EAE5B,CAAChB,EAAaC,EAAgBgB,EAAa,KAHjCD,oGEYnB,MAhCgB,OAAC,OACfpC,CAAK,QA+BQ0C,CA9BbC,CAAO,KA8BaD,EAAA,GA7BpBE,CAAQ,MACRC,EAAOC,EAAAA,CAAQ,CAMhB,GACC,MACE,WAACC,MAAAA,CAAIC,cAAY,kBAAkBC,UAAWC,IAAAA,SAAa,WACzD,WAACH,MAAAA,CAAIE,UAAWC,IAAAA,OAAW,WACzB,UAACC,EAAAA,GAAOA,CAAAA,CAACC,UAAWP,EAAMQ,MAAM,OAAOC,cAAc,IAACC,SAAS,WAC/D,WAACR,MAAAA,WACC,UAACS,EAAAA,GAAUA,CAAAA,CAACC,QAAQ,YAAYC,WAAW,gBACxC1D,IAEH,UAACwD,EAAAA,GAAUA,CAAAA,CAACC,QAAQ,iBAASd,UAGhCC,GACC,iCACE,UAACe,EAAAA,GAAOA,CAAAA,CAACV,UAAWC,IAAAA,OAAW,GAC/B,UAACH,MAAAA,UAAKH,SAKhB,aCnCA,WAAkB,mSCcX,IAAMgB,EAA0B,aAAO,UAC5CC,CAAQ,CACRrC,MAAI,SACJmB,CAAO,QACPmB,EAAS,EAAE,CAMZ,GACO5B,EAAc6B,CAAAA,EAAAA,EAAAA,EAAAA,CAAuBA,CAACvC,EAAMmB,GAElD,GAAI,CACF,IAAMqB,EAAS,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,CAAsBA,CAACJ,GACtCK,EAAY,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACH,EAAQxC,EAAMmB,GAExDyB,EAAoBzB,EACpB0B,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAAC1B,IACpByB,GAAoBE,CAAAA,EADU,EACVA,EAAAA,CAAkBA,CAAC3B,EAAAA,EAGzC,MAAM4B,CAAAA,EAAAA,EAAAA,kBAAAA,CAAkBA,CAAC/C,EAAKgB,OAAO,CAAEhB,EAAKgD,OAAO,CAACC,KAAK,CAAE,CACzD9B,QAASyB,YACTF,SACAJ,CACF,EACF,CAAE,MAAOY,EAAO,CAMd,KALAC,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAACC,EAAAA,EAAYA,CAACC,cAAc,CAAE,aAC3C3C,EACAwC,MAAOI,CAAAA,EAAAA,EAAAA,CAAAA,CAAOA,CAACJ,EACjB,GAEMA,CACR,CAEAC,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAACC,EAAAA,EAAYA,CAACG,OAAO,CAAE,aACpC7C,CACF,EACF,EAAC,EAE0C,aAAO,UAChD2B,CAAQ,MACRrC,CAAI,CACJmB,SAAO,CAKR,GACOT,EAAc6B,CAAAA,EAAAA,EAAAA,EAAAA,CAAuBA,CAACvC,EAAMmB,GAElD,GAAI,CACF,IAAMqB,EAAS,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,CAAsBA,CAACJ,GACtCK,EAAY,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACH,EAAQxC,EAAMmB,EAE5D,OAAMqC,CAAAA,EAAAA,EAAAA,kBAAAA,CAAkBA,CAACxD,EAAKgB,OAAO,CAAEN,EAAa,WAClDgC,CACF,EACF,CAAE,MAAOQ,EAAO,CAMd,KALAC,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAACC,EAAAA,EAAYA,CAACK,sBAAsB,CAAE,CACnD/C,cACAwC,MAAOI,CAAAA,EAAAA,EAAAA,CAAAA,CAAOA,CAACJ,EACjB,GAEMA,CACR,CAEAC,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAACC,EAAAA,EAAYA,CAACM,eAAe,CAAE,aAC5ChD,CACF,EACF,EAAC,0BC1EM,IAAMK,EAAmB,MAAOJ,EAAyBK,KAC9D,IAAIG,EACJ,GAAI,CAIFA,EAAU,CAF2CR,GAA9B,MAAMgD,CAAAA,EAAAA,EAAAA,cAAAA,CAAcA,CAAC3C,EAASL,EAEzC,CAAmBiD,EAAhBC,GAAsB,SAAU,CACjD,CAD+B,MACtBC,EAAK,CAEZ,KADAC,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAACC,EAAAA,CAAMA,CAACC,IAAI,CAAEH,GAChBA,CACR,CAEA,OAAO3C,CACT,EAAC,EAEgC,CAC/BA,EACA+C,EACAvD,EACAwD,EACA7B,EACA8B,KAEA,GAAM,CAACC,EAAaC,EAAe,CAAGxE,CAAAA,EAAAA,EAAAA,KAyDzByE,GAzDyBzE,CAAQA,GACxC0E,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,CAASA,GAClB,IAuD+BF,EAvD7BvE,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GAG5BhB,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,IAAIyF,EAIJ,aAHIvD,EAAAA,KAAAA,EAAAA,EAASwD,SAATxD,QAASwD,EAAmB,EAC9BD,EAAUE,WAAW,IAAMC,CAAAA,EAAAA,EAAAA,CAAAA,CAAyBA,CAAC1D,EAASR,EAAiByD,EAASD,OAAYW,EAE/F,GAF+FA,CAEzFC,aAAaL,EAC5B,EAAG,CAACvD,EAASnB,EAAKgB,OAAO,CAAEL,EAAiByD,EAASD,EAAU,EAE/D,IAAMa,EAASC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAAC,UAEzB,GAAKT,CAAD,EAIJF,KAJa,EAIEY,GAEf,GAAI,CAEF,GAAK/D,CAAD,CAWG,CAIL,GAHA,MAAMgE,EAA4B,CAAE9C,SAAUmC,EAAOnC,QAAQ,KAA5B8C,CAA8BnF,EAAMmB,QAAS+C,CAAe,GAGzF,CAACC,EAAW,CACdC,IACA,MACF,CAEA,IAAMgB,EAAa,MAAMrE,EAAiBJ,EAAiBX,EAAKgB,OAAO,EAIvE,OAHIoE,GACFR,SADc,EACH,IAAMC,CAAAA,EAAAA,EAAAA,CAAAA,CAAyBA,CAACO,EAAYzE,EAAiByD,EAASD,QAE5EiB,CACT,CAzBc,CACZ,CAqB+FN,KArBzF1C,EAAwB,CAAEC,SAAUmC,EAAOnC,QAAQ,CAA5BD,KAA8BpC,EAAMmB,QAAS+C,SAAgB5B,CAAO,GAGjG,IAAM8C,EAAa,MAAMrE,EAAiBJ,EAAiBX,EAAKgB,OAAO,EAMvE,OAHuB,IAAnBhB,EAAKqF,SAAS,EAAUD,GAC1BR,SADsC,EAC3B,IAAMC,CAAAA,EAAAA,EAAAA,CAAAA,CAAyBA,CAACO,EAAYzE,EAAiByD,EAASD,GAxDxE,KA0DJiB,CACT,CAeF,CAAE,CAlBiGN,KAkB1FQ,EAAG,CACVhB,EAAehB,CAAAA,EAAAA,EAAAA,CAAAA,CAAOA,CAACgC,GACzB,EACF,EAAG,CAACd,EAAQxE,EAAMmB,EAAS+C,EAAgB5B,EAAQ3B,EAAiByD,EAASD,EAAU,EAEvF,MAAO,aAAEE,SAAaW,CAAO,CAC/B,gECvFA,IAAMO,EAAuB,GACpBpE,EAAQqE,sBAAsB,EAAIrE,EAAQsE,qBAAqB,EAAI,CAAC,CAACtE,EAAQwD,iBAAiB,CAW1FE,EAA4B,MACvC1D,EACAR,EACAyD,EACAD,KAEIoB,EAAqBpE,KACvBgC,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,CAACC,EAAAA,EAAYA,CAACsC,kBAAkB,CAAE,CAC/ChF,YAAaC,YACbwD,EACAzB,UAAWvB,EAAQwD,iBAAiB,GAEtCP,IAEJ,EAAC,8RCeD,MA1B8B,CAC5BjD,EACAnB,KAGA,IAAMkE,EAAiByB,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACH,UAAnB,OAAOxE,EAAuByE,CAAAA,CAoBLC,CApBKD,CAoBL,CApBKA,EAAAA,CAAiBA,CAACzE,GAAWA,EACjE,CAACA,EAAQ,EAGN2E,EAAqBH,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IAC1BI,CAAAA,EAAAA,EAAAA,EAAAA,CAA0BA,CAAC7B,GACjC,CAACA,EAAe,EAGbvD,EAAkBgF,CAAAA,EAAAA,EAAAA,OAAAA,CAAOA,CAAC,IACvBpD,CAAAA,EAAAA,EAAAA,EAAAA,CAAuBA,CAACvC,EAAMkE,GACpC,CAAClE,EAAMkE,EAAe,EAEzB,MAAO,gBACLA,qBACA4B,kBACAnF,CACF,CACF,+ECtBA,MAduB,OAAC,UAAES,CAAQ,CAcnB4E,UAdqBvE,CAAS,CAA+C,EAc/DuE,CAb3B,CAa2B,KAZzB,UAACzE,MAAAA,CAAIE,UAAWwE,IAAWvE,IAAAA,SAAa,CAAED,EAAhBwE,UACxB,WAAC1E,MAAAA,CAAIE,UAAWC,IAAAA,OAAW,WACzB,UAACC,EAAAA,GAAOA,CAAAA,CAACC,UAAWsE,EAAAA,CAASA,CAAErE,MAAM,UAAUC,cAAc,IAACC,SAAS,UAEvE,UAACC,EAAAA,GAAUA,CAAAA,CAACC,QAAQ,QAAQkE,MAAM,gBAC/B/E,QAKX,uGCJA,MAV8B,KAC5B,GAAM,iBAAEgF,CAAe,eAAEC,CAAa,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,CASpBC,CAToBD,CAAiBA,SAEvE,GAAuB,CAACF,EACf,KAGF,QAJgC,EAI/BI,EAAAA,CAAYA,CAAAA,CAACC,MAAM,mBAAU,kDACvC,wKCiDA,IAAMC,GAAwB,IACrB,CACLC,cAAe,EAAE,uBACjBnB,EACAD,uBAAwB,EACxBqB,kBAAmB,EACnB1F,QAAS,GACT2F,QAAS,KACTpG,YAAa,GACbqG,kBAAmB,EACnBC,KAAM,KACNC,WAAY,CACVhE,MAAO,EACT,EACAiE,OAAQ,qBACRtD,KAAM,SACR,GAGIuD,GAAmB,OAAC,OAAEC,CAAK,WAAEC,CAAS,CAAwC,SAClF,iCACE,WAACrF,EAAAA,GAAUA,CAAAA,CACTC,QAAQ,QACRqF,GAAI,CACFpF,WAAY,IACZqF,GAAI,CACN,YAECH,EAAM,OAET,UAACpF,EAAAA,GAAUA,CAAAA,CAACR,cAAY,eAAeS,QAAQ,QAAQL,UAAU,eAC/D,UAAC4F,EAAAA,CAAWA,CAAAA,CAACxE,QAASqE,EAAWI,YAAY,EAAOC,cAAc,EAAOC,cAAc,YAKvFC,GAAe,OAAC,WAAEvC,CAAS,CAAyB,SACxD,iCACE,UAACwC,EAAAA,GAAGA,CAAAA,CACFP,GAAI,CACFQ,UAAW,SACXC,GAAI,CACN,WAEA,UAACpG,EAAAA,GAAOA,CAAAA,CAACC,UAAWoG,EAAAA,CAAYA,CAAEC,QAAQ,YAAYlG,SAAS,YAEjE,UAACC,EAAAA,GAAUA,CAAAA,CACTC,QAAQ,KACRiG,YAAY,IACZZ,GAAI,CACFQ,UAAW,QACb,WACD,oBAGAzC,EAAY,GACX,WAACrD,EAAAA,GAAUA,CAAAA,CACTC,QAAQ,QACRqF,GAAI,CACFQ,UAAW,SACXC,GAAI,CACN,YACD,iDAC+C,WAACI,IAAAA,WAAG9C,EAAU,cAAY,gCAM1E+C,GAAqB,OAAC,SAAEC,CAAO,aAAEhE,CAAW,CAAwD,GAClGG,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,CAASA,GAClB6D,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,GAEpBC,EACHhE,GAAW8D,EAER,EAEEjE,GAAeoE,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACpE,GAC/B,yBACAA,EACE,kDACA,KALJ,iGAFF,iCASN,EACS,UAACoC,EADQ,CACIA,CAAAA,UAAE+B,IAEjB,IACT,EAEME,GAA8B,OAAC,WAAEC,CAAS,CAA0B,GAClEL,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,UAO1B,EAIE,EAJE,CAIF,MAJc,CAIbvC,EAAcA,UACb,KADaA,IACb,EAAC4C,EAAAA,GAAIA,CAAAA,CACHC,SAAS,IACTC,UAAU,MACVxB,GAAI,CACFyB,eAAgB,eAClB,YAEA,UAACH,EAAAA,GAAIA,CAAAA,CAACI,IAAI,IAACC,GAAI,WAAG,2DAGlB,UAACL,EAAAA,GAAIA,CAAAA,CAACI,IAAI,IAACC,GAAI,WACb,UAACC,EAAAA,GAAMA,CAAAA,CAACjH,QAAQ,YAAYkH,KAAK,QAAQC,QArBtB,CAqB+BC,IApBpDf,GACFgB,CAAAA,EAAAA,EAAAA,CADW,CACXA,CAAYA,CAAChB,EAEjB,EAiB8EiB,SAAS,aAAC,yBAf/E,IAsBX,EAEMC,GAAsB,OAAC,uBAC3BC,CAAqB,uBACrBC,CAAqB,CAItB,GACOC,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,GAClBC,EAAQF,EAAOE,KAAK,CAAC7J,IAAI,CAAG,CAAEA,KAAM2J,EAAOE,KAAK,CAAC7J,IAAK,OAAIkF,SAEhE,EAKE,EALE,CAKF,QAACuB,EAAAA,CAAYA,CAAAA,CAACC,KALY,CAKL+C,EAAwB,UAAY,kBAAS,wBAC1C,IACtB,UAACK,EAAAA,GAAIA,CAAAA,CAAClI,UAAWmI,CAAAA,GAAU1L,KAAM,CAAE2L,KAAVD,IAAoBE,EAAAA,CAASA,CAACC,QAAQ,CAACC,QAAQ,OAAEN,CAAM,WAAG,kBAE5E,8CAEP,UAACO,KAAAA,CAAAA,GACAX,EACC,wBAEA,iCAAE,yCACuC,IACvC,UAACK,EAAAA,GAAIA,CAAAA,CAAClI,UAAWmI,CAAAA,GAAU1L,KAAM,CAAE2L,KAAVD,IAAoBE,EAAAA,CAASA,CAACC,QAAQ,CAACC,QAAQ,OAAEN,CAAM,WAAG,yBAE5E,UAlBN,IAwBX,EAEMQ,GAAc,OAAC,aAAEzK,CAAW,YAAE0K,CAAU,CAAwD,GACpG,MACE,WAACC,EAAAA,CAAMA,CAAAA,WACL,UAACvI,EAAAA,GAAUA,CAAAA,CACTC,QAAQ,KACRiG,YAAY,IACZZ,GAAI,CACFQ,UAAW,QACb,WACD,gCAGD,UAAC0C,EAAAA,CAAUA,CAAAA,CAAC/J,IAAKb,EAAa6K,qBAAqB,IAACC,qBAAqB,MACzE,UAACC,EAAAA,GAAWA,CAAAA,UACV,UAACzB,EAAAA,GAAMA,CAAAA,CAACjH,QAAQ,YAAYJ,MAAM,UAAUuH,QAASkB,EAAYM,SAAU,CAAChL,EAAY+E,iBAAiB,UAAE,iBAMnH,EAgMA,GAvLoB,OAAC,SAAExD,CAAO,OAuLf0J,CAvLiBvI,CAAM,SAuLZuI,EAvLc1G,CAAS,CAAoB,GAE7D,WAAE2G,CAAS,CAAE,CAAGxE,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACyE,EAAAA,CAAcA,EACzC,CAAElL,eAAgBmL,CAAqB,CAAE,CAAG1E,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAAC2E,EAAAA,CAAaA,EACpE,CAAEC,uBAAqB,CAAE9E,iBAAe,kBAAE+E,CAAgB,CAAE,CAAG7E,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,EAAAA,CAAiBA,EAC3F,SAAE6E,CAAO,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,GACtB,CAAErL,MAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GACtBoI,EAAUiD,CAAAA,EAAAA,EAAAA,CAAAA,CAAcA,GACxB9G,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,CAASA,GACxBvF,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,GAErB,GAAM,gBAAEgF,CAAc,CAAE4B,oBAAkB,iBAAEnF,CAAe,CAAE,CAAGkF,EAAsB1E,EAASnB,GACzF,CAACJ,EAAaC,EAAe,CAAGE,CAAAA,EAAAA,EAAAA,CAAAA,CAAcA,CAACY,GAC/C4K,EAAaC,CAAAA,EAAAA,CAFkE3F,EAElE2F,EAAAA,CAAaA,CAAC,CAC/BxK,QAAShB,EAAKgB,OAAO,CACrByK,YAAazL,EAAKgD,OAAO,CAACC,KAAK,CAC/ByI,YAAa1L,EAAK2L,OAAO,GAErBjL,EAAckL,CAAAA,EAAAA,GAAAA,EAAAA,CAAyBA,CAAC,CAAEzK,QAAS+C,EAAgBwH,YAAa1L,EAAK2L,OAAO,GAE5FE,GAAyBC,UADJ,OAAO5H,EACkBA,EAAiB6H,KAAKC,SAAS,CAAC9H,EAAgB,KAAM,GACpG+H,GAAsB,CAAC,QAACrM,EAAAA,KAAAA,EAAAA,EAAagH,aAAbhH,CAA2BsM,IAAI,CAAC,OAAC,OAAEC,CAAK,CAAE,UAAKA,EAAMlJ,KAAK,UAAKuB,EAAAA,KAAAA,EAAAA,EAAQxB,OAAAA,CAARwB,IACvF4H,GAAexM,OAAAA,EAAAA,KAAAA,EAAAA,EAAagH,aAAbhH,GAA8BA,EAAYgH,aAAa,CAACyF,MAAM,CAAG,EAChFC,GAAgB,CAAC,QAAC1M,EAAAA,KAAAA,EAAAA,EAAa+E,aAAb/E,IAAa+E,EAC/B4H,GAAW1J,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACqB,GAC7BsI,GAAwB9C,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACxF,GAC9CuF,GAAwBgD,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAACC,EAAAA,EAAkBA,EACzDC,GACJ,CAACtE,GAAW4D,IAAuB,CAACjM,EAAK4M,QAAQ,EAAK,CAACnD,IAAyB+C,GAE5E,QAAExH,EAAM,CAAEX,cAAW,CAAE,CAAGE,CAAAA,EAAAA,EAAAA,CAAAA,CAAwBA,CACtD3E,EACAsE,EACAvD,EACAwD,EACA7B,EACA,IAAMwI,OAAU5F,IAGZ2H,GAAa,UACjB,GAAI3B,GAAyB,CAAC9E,EAAiB,CAC7C+E,GAAiB,GACjB,MACF,CAEA,IAAMvK,EAAiB,MAAMoE,KAEzBpE,GACFf,EAAee,GAIjB,IAAMkM,EAAalM,EALC,KAKDA,EAAAA,KAAAA,EAAAA,EAAgBgG,aAAa,CAACyF,EAA9BzL,IAA8ByL,IAAW,EAC5DU,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,CAAC,CAAE,GAAID,EAAaE,EAAAA,CAASA,CAACC,MAAM,CAAGD,EAAAA,CAASA,CAACE,OAAO,CAAG9F,MAAO+F,EAAAA,CAAQA,CAACC,aAAa,EACpG,EAEM9C,GAAa,UACZ1K,GAGL,MAAMiF,CAAAA,EAAAA,CAHY,CAGZA,CAAAA,CAAyBA,CAACjF,EAAae,EAAiB,IAAMmK,EAAU5F,QAAYf,EAC5F,EASA,MANAlF,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACe,UAAnB,OAAOkC,GACT6J,EAAsB7J,EAE1B,EAAG,CAACA,EAAS6J,EAAsB,EAGjC,iCACE,UAACT,EAAAA,CAAMA,CAAAA,UACL,WAAC8C,EAAAA,GAAWA,CAAAA,WACV,UAACzF,GAAAA,CAAavC,UAAWrF,EAAKqF,SAAS,GAEtCkH,IACC,UAACe,EAAAA,EAAaA,CAAAA,CAACC,SAAU,UAAChM,MAAAA,UAAI,gCAC5B,UAACiM,EAAAA,CAAcA,CAAAA,CAAC5N,YAAasE,MAIjC,UAACsF,GAAAA,CACCC,sBAAuBA,GACvBC,sBAAuB8C,KAGzB,WAACxK,EAAAA,GAAUA,CAAAA,CACTsF,GAAI,CACFpF,WAAY,IACZqF,GAAI,EACJQ,GAAI,CACN,YACD,YACU,UAAC0F,EAAAA,CAAUA,CAAAA,CAACC,KAAM7B,QAE7B,UAAC8B,EAAAA,CAAUA,CAAAA,CAACxM,QAAS+C,EAAgB0J,SAAS,MAE9C,WAACC,EAAAA,GAASA,CAAAA,CAACvG,GAAI,CAAEC,GAAI,CAAE,YACrB,UAACuG,EAAAA,GAAgBA,CAAAA,CAACtM,cAAY,kBAAkBuM,WAAY,UAACC,EAAAA,CAAcA,CAAAA,CAAAA,YAAK,wBAGhF,WAACC,EAAAA,GAAgBA,CAAAA,WACf,UAAC9G,GAAAA,CAAiBC,MAAM,cAAcC,UAAWvB,IACjD,UAACqB,GAAAA,CAAiBC,MAAM,mBAAmBC,UAAW1G,IACtD,UAACwG,GAAAA,CAAiBC,MAAM,cAAcC,UAAWkE,IACjD,UAACpE,GAAAA,CAAiBC,MAAM,eAAeC,UAAW3G,UAItD,UAACmH,EAAAA,GAAGA,CAAAA,CAACP,GAAI,CAAE,gBAAiB,CAAEC,GAAI,CAAE,CAAE,WACpC,UAAC2G,EAAAA,EAAQA,CAAAA,CAAAA,UAId5B,GACC,UAACjC,GAAAA,CAAYC,WAAYA,GAAY1K,YAAaA,IAElD,iCACE,WAAC2K,EAAAA,CAAMA,CAAAA,WACL,UAAC7B,GAAAA,CAA4BC,UAAWsD,KAExC,UAAC/K,EAAAA,CAAOA,CAAAA,CACN1C,MAAM,gCACN2C,QACEgD,GAAa,CAACiI,GACV,wHACA,mGAGN,UAAC5B,EAAAA,CAAUA,CAAAA,CACT/J,UAAKb,EAAAA,EAAe+G,GAAsB3G,EAAKqF,SAAS,EACxDoF,IADK7K,iBACgB,IACrB8K,qBAAqB,IACrByD,gBAAiB/C,EAAQgD,IAAI,CAACC,UAAU,KAI3CjC,IACC,UAAClL,EAAAA,CAAOA,CAAAA,CACN1C,MAAM,mCACN2C,QACE,iCACE,UAACa,EAAAA,GAAUA,CAAAA,CACTsF,GAAI,CACFS,GAAI,CACN,WACD,qIAID,UAACuG,EAAAA,CAAYA,CAAAA,CAAC3N,gBAAiBA,EAAiB4N,MAAM,SAG1DlN,KAAMmN,EAAAA,CAAQA,GAIlB,UAACC,GAAAA,CAAcA,CAAAA,CAAAA,GAEf,UAACrG,GAAAA,CAAmBC,QAASA,EAAShE,YAAaA,KAEnD,UAACmC,EAAqBA,CAAAA,GAErB,CAACxG,EAAK4M,QAAQ,EAAI,UAACnG,EAAAA,CAAYA,CAAAA,MAFVD,IAEW,+CAEnC,UAAC+D,EAAAA,CAAMA,CAAAA,UACL,UAACI,EAAAA,GAAWA,CAAAA,UACV,UAAC+D,EAAAA,CAAWA,CAAAA,CAACC,aAAc,CAAChC,YACzB,GACC,UAACzD,EAAAA,GAAMA,CAAAA,CAACjH,QAAQ,YAAYJ,MAAM,UAAUuH,QAASyD,GAAYjC,SAAU,CAACgE,GAAQjC,YAAY,oBAWlH,yFC5aA,IAAMkC,GAAmBC,CAAAA,EAAAA,GAAAA,EAAAA,CAAEA,CAAC,gCAAgCC,KAAK,CAAC,EAAG,IAC/DC,GAAgBF,CAAAA,EAAAA,GAAAA,EAAAA,CAAEA,CAAC,6BAA6BC,KAAK,CAAC,EAAG,IAElDE,GAAgB,IAC3B,IAAMC,EAAc,CAClB,CAACL,GAAiB,CAAE,mBACpB,CAACG,GAAc,CAAE,OACnB,EAOA,OAAOG,MALYC,EAAAA,KAAAA,EAAAA,EACfC,GAAG,CAAC,CADWD,EACHF,CAAW,CAACI,EAAGC,IAAI,CAACR,KAAK,CAAC,EAAG,IAAI,EAC9CzO,MAAM,CAACkP,SACPC,IAAI,CAAC,QAGV,EAAC,GCFuB,OAAC,MACvBzI,CAAI,SACJF,CAAO,KACPsI,CAAG,CAKJ,GACOM,EAAajD,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,CAACkD,GAAAA,EAAgBA,EAK9CnR,EAHYwI,GAbQ,GAgBZ4I,EAHYC,UAYxB,OARI7I,IAAS8I,GAAAA,EAAUA,EAAE,CACvBtR,EAAQuR,CAAAA,EAAAA,GAAAA,YAAAA,CAAYA,CAACL,EAAWM,SAAS,CAAEZ,IAAQ5Q,CAAAA,EAGjDwI,IAASiJ,GAAAA,EAAWA,EAAE,CACxBzR,EAAQyQ,GAAcG,IAAQ5Q,CAAAA,EAI9B,GAJqByQ,EAIrB,MAACpH,GAAAA,GAAGA,CAAAA,CAACqI,QAAQ,OAAOC,WAAW,mBAC7B,UAACC,GAAAA,CAAeA,CAAAA,CAACC,IAbLvJ,CAaUwJ,EA5BI,QAeHC,qBAaQC,IAAKxJ,GAAQ,8BAA+Bb,MAAO,GAAIsK,OAAQ,KAC9F,UAACzO,GAAAA,GAAUA,CAAAA,CAACC,QAAQ,KAAKyO,GAAI,EAAGxO,WAAW,gBACxC1D,MAIT,EAAC,GAEuB,OAAC,CAAE,GAAGmS,EAAyB,GACrD,EAeaC,IAdX,UAACC,CAcyBD,CAdzBC,CAcyB,CAdjBA,CACPrS,MAAM,kBACNsS,SAAU,UAACC,GAAAA,CAAS/J,KAAM2J,EAAM3J,IAAI,CAAEF,QAAS6J,EAAM7J,OAAO,GAC5DkK,KAAM,EACNC,SAAS,IACTC,SAAS,aAET,UAAC5D,EAAAA,EAAaA,CAAAA,CAACC,SAAU,UAAChM,MAAAA,UAAI,mCAC5B,UAACsJ,GAAWA,CAAE,GAAG8F,CAAK,MAI9B,SAJoB9F,IC1DpB,WAAkB","sources":["webpack://_N_E/./src/hooks/useHighlightHiddenTab.ts","webpack://_N_E/./src/hooks/messages/useSafeMessage.ts","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/safe-messages/InfoBox/index.tsx","webpack://_N_E/./src/components/safe-messages/InfoBox/styles.module.css","webpack://_N_E/./src/services/safe-messages/safeMsgSender.ts","webpack://_N_E/./src/hooks/messages/useSyncSafeMessageSigner.ts","webpack://_N_E/./src/services/safe-messages/safeMsgNotifications.ts","webpack://_N_E/./src/hooks/messages/useDecodedSafeMessage.ts","webpack://_N_E/./src/components/tx/SuccessMessage/index.tsx","webpack://_N_E/./src/components/tx/SignOrExecuteForm/RiskConfirmationError.tsx","webpack://_N_E/./src/components/tx-flow/flows/SignMessage/SignMessage.tsx","webpack://_N_E/./src/features/stake/helpers/utils.ts","webpack://_N_E/./src/components/tx-flow/flows/SignMessage/index.tsx","webpack://_N_E/./src/components/tx/SuccessMessage/styles.module.css"],"sourcesContent":["import { useEffect } from 'react'\n\nconst ALT_FAVICON = '/favicons/favicon-dot.ico'\nconst TITLE_PREFIX = '‼️ '\n\nconst setFavicon = (favicon: HTMLLinkElement | null, href: string) => {\n  if (favicon) favicon.href = href\n}\n\nconst setDocumentTitle = (isPrefixed: boolean) => {\n  document.title = isPrefixed ? TITLE_PREFIX + document.title : document.title.replace(TITLE_PREFIX, '')\n}\n\nconst blinkFavicon = (\n  favicon: HTMLLinkElement | null,\n  originalHref: string,\n  isBlinking = false,\n): ReturnType<typeof setInterval> => {\n  const onBlink = () => {\n    setDocumentTitle(isBlinking)\n    setFavicon(favicon, isBlinking ? ALT_FAVICON : originalHref)\n    isBlinking = !isBlinking\n  }\n\n  onBlink()\n\n  return setInterval(onBlink, 300)\n}\n\n/**\n * Blink favicon when the tab is hidden\n */\nconst useHighlightHiddenTab = () => {\n  useEffect(() => {\n    const favicon = document.querySelector<HTMLLinkElement>('link[rel*=\"icon\"]')\n    const originalHref = favicon?.href || ''\n    let interval: ReturnType<typeof setInterval>\n\n    const reset = () => {\n      clearInterval(interval)\n      setFavicon(favicon, originalHref)\n      setDocumentTitle(false)\n    }\n\n    const handleVisibilityChange = () => {\n      if (document.hidden) {\n        interval = blinkFavicon(favicon, originalHref)\n      } else {\n        reset()\n      }\n    }\n\n    document.addEventListener('visibilitychange', handleVisibilityChange)\n\n    handleVisibilityChange()\n\n    return () => {\n      reset()\n      document.removeEventListener('visibilitychange', handleVisibilityChange)\n    }\n  }, [])\n}\n\nexport default useHighlightHiddenTab\n","import { isSafeMessageListItem } from '@/utils/safe-message-guards'\nimport { useState, useEffect } from 'react'\nimport useSafeMessages from './useSafeMessages'\nimport useAsync from '@safe-global/utils/hooks/useAsync'\nimport useSafeInfo from '../useSafeInfo'\nimport { fetchSafeMessage } from './useSyncSafeMessageSigner'\nimport type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\n\nconst useSafeMessage = (safeMessageHash: string | undefined) => {\n  const [safeMessage, setSafeMessage] = useState<MessageItem | undefined>()\n\n  const { safe } = useSafeInfo()\n\n  const messages = useSafeMessages()\n\n  const ongoingMessage = messages.page?.results\n    ?.filter(isSafeMessageListItem)\n    .find((msg) => msg.messageHash === safeMessageHash)\n\n  const [updatedMessage, messageError] = useAsync(async () => {\n    if (!safeMessageHash) return\n    return fetchSafeMessage(safeMessageHash, safe.chainId)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [safeMessageHash, safe.chainId, safe.messagesTag])\n\n  useEffect(() => {\n    setSafeMessage(updatedMessage ?? ongoingMessage)\n  }, [ongoingMessage, updatedMessage])\n\n  return [safeMessage, setSafeMessage, messageError] as const\n}\n\nexport default useSafeMessage\n","export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import type { ComponentType } from 'react'\nimport { type ReactElement, type ReactNode } from 'react'\nimport { Typography, SvgIcon, Divider } from '@mui/material'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport css from './styles.module.css'\n\nconst InfoBox = ({\n  title,\n  message,\n  children,\n  icon = InfoIcon,\n}: {\n  title: string\n  message: ReactNode\n  children?: ReactNode\n  icon?: ComponentType\n}): ReactElement => {\n  return (\n    <div data-testid=\"message-infobox\" className={css.container}>\n      <div className={css.message}>\n        <SvgIcon component={icon} color=\"info\" inheritViewBox fontSize=\"medium\" />\n        <div>\n          <Typography variant=\"subtitle1\" fontWeight=\"bold\">\n            {title}\n          </Typography>\n          <Typography variant=\"body2\">{message}</Typography>\n        </div>\n      </div>\n      {children && (\n        <>\n          <Divider className={css.divider} />\n          <div>{children}</div>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default InfoBox\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sAIKm\",\"message\":\"styles_message__G1Adl\",\"details\":\"styles_details__m9_zQ\",\"divider\":\"styles_divider__hXKbs\"};","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { proposeSafeMessage, confirmSafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { type SafeState } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\nimport type { Eip1193Provider } from 'ethers'\n\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\nimport {\n  generateSafeMessageHash,\n  isEIP712TypedData,\n  tryOffChainMsgSigning,\n} from '@safe-global/utils/utils/safe-messages'\nimport { normalizeTypedData } from '@safe-global/utils/utils/web3'\nimport { getAssertedChainSigner } from '@/services/tx/tx-sender/sdk'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\n\nexport const dispatchSafeMsgProposal = async ({\n  provider,\n  safe,\n  message,\n  origin = '',\n}: {\n  provider: Eip1193Provider\n  safe: SafeState\n  message: MessageItem['message']\n  origin: string | undefined\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(provider)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    let normalizedMessage = message\n    if (isEIP712TypedData(message)) {\n      normalizedMessage = normalizeTypedData(message)\n    }\n\n    await proposeSafeMessage(safe.chainId, safe.address.value, {\n      message: normalizedMessage,\n      signature,\n      origin,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.PROPOSE, {\n    messageHash,\n  })\n}\n\nexport const dispatchSafeMsgConfirmation = async ({\n  provider,\n  safe,\n  message,\n}: {\n  provider: Eip1193Provider\n  safe: SafeState\n  message: MessageItem['message']\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(provider)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    await confirmSafeMessage(safe.chainId, messageHash, {\n      signature,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE, {\n    messageHash,\n  })\n}\n","import type { TypedData, MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { Errors, logError } from '@/services/exceptions'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport { dispatchPreparedSignature } from '@/services/safe-messages/safeMsgNotifications'\nimport { dispatchSafeMsgProposal, dispatchSafeMsgConfirmation } from '@/services/safe-messages/safeMsgSender'\nimport { getSafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { useEffect, useCallback, useState } from 'react'\nimport useSafeInfo from '../useSafeInfo'\n\nconst HIDE_DELAY = 3000\n\nexport const fetchSafeMessage = async (safeMessageHash: string, chainId: string): Promise<MessageItem | undefined> => {\n  let message: MessageItem | undefined\n  try {\n    // fetchedMessage does not have a type because it is explicitly a message\n    const fetchedMessage = await getSafeMessage(chainId, safeMessageHash)\n    // @ts-expect-error - the getSafeMessage type from the safe-gateway-typescript-sdk is wrong. The gateway returns a MessageItem\n    message = { ...fetchedMessage, type: 'MESSAGE' }\n  } catch (err) {\n    logError(Errors._613, err)\n    throw err\n  }\n\n  return message\n}\n\nconst useSyncSafeMessageSigner = (\n  message: MessageItem | undefined,\n  decodedMessage: string | TypedData,\n  safeMessageHash: string,\n  requestId: string | undefined,\n  origin: string | undefined,\n  onClose: () => void,\n) => {\n  const [submitError, setSubmitError] = useState<Error | undefined>()\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n\n  // If the message gets updated in the messageSlice we dispatch it if the signature is complete\n  useEffect(() => {\n    let timeout: NodeJS.Timeout | undefined\n    if (message?.preparedSignature) {\n      timeout = setTimeout(() => dispatchPreparedSignature(message, safeMessageHash, onClose, requestId), HIDE_DELAY)\n    }\n    return () => clearTimeout(timeout)\n  }, [message, safe.chainId, safeMessageHash, onClose, requestId])\n\n  const onSign = useCallback(async () => {\n    // Error is shown when no wallet is connected, this appeases TypeScript\n    if (!wallet) {\n      return\n    }\n\n    setSubmitError(undefined)\n\n    try {\n      // When collecting the first signature\n      if (!message) {\n        await dispatchSafeMsgProposal({ provider: wallet.provider, safe, message: decodedMessage, origin })\n\n        // Fetch updated message\n        const updatedMsg = await fetchSafeMessage(safeMessageHash, safe.chainId)\n\n        // If threshold 1, we do not want to wait for polling\n        if (safe.threshold === 1 && updatedMsg) {\n          setTimeout(() => dispatchPreparedSignature(updatedMsg, safeMessageHash, onClose, requestId), HIDE_DELAY)\n        }\n        return updatedMsg\n      } else {\n        await dispatchSafeMsgConfirmation({ provider: wallet.provider, safe, message: decodedMessage })\n\n        // No requestID => we are in the confirm message dialog and do not need to leave the window open\n        if (!requestId) {\n          onClose()\n          return\n        }\n\n        const updatedMsg = await fetchSafeMessage(safeMessageHash, safe.chainId)\n        if (updatedMsg) {\n          setTimeout(() => dispatchPreparedSignature(updatedMsg, safeMessageHash, onClose, requestId), HIDE_DELAY)\n        }\n        return updatedMsg\n      }\n    } catch (e) {\n      setSubmitError(asError(e))\n    }\n  }, [wallet, safe, message, decodedMessage, origin, safeMessageHash, onClose, requestId])\n\n  return { submitError, onSign }\n}\n\nexport default useSyncSafeMessageSigner\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\n\nconst isMessageFullySigned = (message: MessageItem): message is MessageItem & { preparedSignature: string } => {\n  return message.confirmationsSubmitted >= message.confirmationsRequired && !!message.preparedSignature\n}\n\n/**\n * Dispatches a notification including the `preparedSignature` of the message if it is fully signed.\n *\n * @param chainId\n * @param safeMessageHash\n * @param onClose\n * @param requestId\n */\nexport const dispatchPreparedSignature = async (\n  message: MessageItem,\n  safeMessageHash: string,\n  onClose: () => void,\n  requestId?: string,\n) => {\n  if (isMessageFullySigned(message)) {\n    safeMsgDispatch(SafeMsgEvent.SIGNATURE_PREPARED, {\n      messageHash: safeMessageHash,\n      requestId,\n      signature: message.preparedSignature,\n    })\n    onClose()\n  }\n}\n","import type { TypedData } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { getDecodedMessage } from '@/components/safe-apps/utils'\nimport { generateSafeMessageMessage, generateSafeMessageHash } from '@safe-global/utils/utils/safe-messages'\nimport { type SafeState } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\nimport { useMemo } from 'react'\n\n/**\n * Returns the decoded message, the hash of the `message` and the hash of the `safeMessage`.\n * The `safeMessageMessage` is the value inside the SafeMessage and the `safeMessageHash` gets signed if the connected wallet does not support `eth_signTypedData`.\n *\n * @param message message as string, UTF-8 encoded hex string or EIP-712 Typed Data\n * @param safe SafeInfo of the opened Safe\n * @returns `{\n *   decodedMessage,\n *   safeMessageMessage,\n *   safeMessageHash\n * }`\n */\nconst useDecodedSafeMessage = (\n  message: string | TypedData,\n  safe: SafeState,\n): { decodedMessage: string | TypedData; safeMessageMessage: string; safeMessageHash: string } => {\n  // Decode message if UTF-8 encoded\n  const decodedMessage = useMemo(() => {\n    return typeof message === 'string' ? getDecodedMessage(message) : message\n  }, [message])\n\n  // Get `SafeMessage` message\n  const safeMessageMessage = useMemo(() => {\n    return generateSafeMessageMessage(decodedMessage)\n  }, [decodedMessage])\n\n  // Get `SafeMessage` hash\n  const safeMessageHash = useMemo(() => {\n    return generateSafeMessageHash(safe, decodedMessage)\n  }, [safe, decodedMessage])\n\n  return {\n    decodedMessage,\n    safeMessageMessage,\n    safeMessageHash,\n  }\n}\n\nexport default useDecodedSafeMessage\n","import { type ReactElement, type ReactNode } from 'react'\nimport { Typography, SvgIcon } from '@mui/material'\nimport classNames from 'classnames'\nimport CheckIcon from '@/public/images/common/check.svg'\nimport css from './styles.module.css'\n\nconst SuccessMessage = ({ children, className }: { children: ReactNode; className?: string }): ReactElement => {\n  return (\n    <div className={classNames(css.container, className)}>\n      <div className={css.message}>\n        <SvgIcon component={CheckIcon} color=\"success\" inheritViewBox fontSize=\"small\" />\n\n        <Typography variant=\"body2\" width=\"100%\">\n          {children}\n        </Typography>\n      </div>\n    </div>\n  )\n}\n\nexport default SuccessMessage\n","import { useContext } from 'react'\nimport ErrorMessage from '../ErrorMessage'\nimport { TxSecurityContext } from '../security/shared/TxSecurityContext'\n\nconst RiskConfirmationError = () => {\n  const { isRiskConfirmed, isRiskIgnored } = useContext(TxSecurityContext)\n\n  if (isRiskConfirmed || !isRiskIgnored) {\n    return null\n  }\n\n  return <ErrorMessage level=\"warning\">Please acknowledge the risk before proceeding.</ErrorMessage>\n}\n\nexport default RiskConfirmationError\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport {\n  Grid,\n  Button,\n  Box,\n  Typography,\n  SvgIcon,\n  CardContent,\n  CardActions,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n  Link,\n} from '@mui/material'\nimport { useTheme } from '@mui/material/styles'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport { useContext, useEffect } from 'react'\nimport type { ReactElement } from 'react'\nimport type { RequestId } from '@safe-global/safe-apps-sdk'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport RequiredIcon from '@/public/images/messages/required.svg'\nimport useSafeInfo from '@/hooks/useSafeInfo'\n\nimport useIsSafeOwner from '@/hooks/useIsSafeOwner'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport useSafeMessage from '@/hooks/messages/useSafeMessage'\nimport useOnboard, { switchWallet } from '@/hooks/wallets/useOnboard'\nimport { TxModalContext } from '@/components/tx-flow'\nimport CopyButton from '@/components/common/CopyButton'\nimport MsgSigners from '@/components/safe-messages/MsgSigners'\nimport useDecodedSafeMessage from '@/hooks/messages/useDecodedSafeMessage'\nimport useSyncSafeMessageSigner from '@/hooks/messages/useSyncSafeMessageSigner'\nimport SuccessMessage from '@/components/tx/SuccessMessage'\nimport useHighlightHiddenTab from '@/hooks/useHighlightHiddenTab'\nimport InfoBox from '@/components/safe-messages/InfoBox'\nimport { DecodedMsg } from '@/components/safe-messages/DecodedMsg'\nimport TxCard from '@/components/tx-flow/common/TxCard'\nimport { dispatchPreparedSignature } from '@/services/safe-messages/safeMsgNotifications'\nimport { trackEvent } from '@/services/analytics'\nimport { TX_EVENTS, TX_TYPES } from '@/services/analytics/events/transactions'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport RiskConfirmationError from '@/components/tx/SignOrExecuteForm/RiskConfirmationError'\nimport { TxSecurityContext } from '@/components/tx/security/shared/TxSecurityContext'\nimport { isBlindSigningPayload, isEIP712TypedData } from '@safe-global/utils/utils/safe-messages'\nimport ApprovalEditor from '@/components/tx/ApprovalEditor'\nimport { ErrorBoundary } from '@sentry/react'\nimport { isWalletRejection } from '@/utils/wallets'\nimport { useAppSelector } from '@/store'\nimport { selectBlindSigning } from '@/store/settingsSlice'\nimport NextLink from 'next/link'\nimport { AppRoutes } from '@/config/routes'\nimport { useRouter } from 'next/router'\nimport MsgShareLink from '@/components/safe-messages/MsgShareLink'\nimport LinkIcon from '@/public/images/messages/link.svg'\nimport { Blockaid } from '@/components/tx/security/blockaid'\nimport CheckWallet from '@/components/common/CheckWallet'\nimport NetworkWarning from '@/components/new-safe/create/NetworkWarning'\nimport { getDomainHash, getSafeMessageMessageHash } from '@/utils/safe-hashes'\nimport type { SafeVersion } from '@safe-global/safe-core-sdk-types'\n\nconst createSkeletonMessage = (confirmationsRequired: number): MessageItem => {\n  return {\n    confirmations: [],\n    confirmationsRequired,\n    confirmationsSubmitted: 0,\n    creationTimestamp: 0,\n    message: '',\n    logoUri: null,\n    messageHash: '',\n    modifiedTimestamp: 0,\n    name: null,\n    proposedBy: {\n      value: '',\n    },\n    status: 'NEEDS_CONFIRMATION',\n    type: 'MESSAGE',\n  }\n}\n\nconst MessageHashField = ({ label, hashValue }: { label: string; hashValue: string }) => (\n  <>\n    <Typography\n      variant=\"body2\"\n      sx={{\n        fontWeight: 700,\n        mt: 2,\n      }}\n    >\n      {label}:\n    </Typography>\n    <Typography data-testid=\"message-hash\" variant=\"body2\" component=\"div\">\n      <EthHashInfo address={hashValue} showAvatar={false} shortAddress={false} showCopyButton />\n    </Typography>\n  </>\n)\n\nconst DialogHeader = ({ threshold }: { threshold: number }) => (\n  <>\n    <Box\n      sx={{\n        textAlign: 'center',\n        mb: 2,\n      }}\n    >\n      <SvgIcon component={RequiredIcon} viewBox=\"0 0 32 32\" fontSize=\"large\" />\n    </Box>\n    <Typography\n      variant=\"h4\"\n      gutterBottom\n      sx={{\n        textAlign: 'center',\n      }}\n    >\n      Confirm message\n    </Typography>\n    {threshold > 1 && (\n      <Typography\n        variant=\"body1\"\n        sx={{\n          textAlign: 'center',\n          mb: 2,\n        }}\n      >\n        To sign this message, collect signatures from <b>{threshold} signers</b> of your Safe Account.\n      </Typography>\n    )}\n  </>\n)\n\nconst MessageDialogError = ({ isOwner, submitError }: { isOwner: boolean; submitError: Error | undefined }) => {\n  const wallet = useWallet()\n  const onboard = useOnboard()\n\n  const errorMessage =\n    !wallet || !onboard\n      ? 'No wallet is connected.'\n      : !isOwner\n        ? \"You are currently not a signer of this Safe Account and won't be able to confirm this message.\"\n        : submitError && isWalletRejection(submitError)\n          ? 'User rejected signing.'\n          : submitError\n            ? 'Error confirming the message. Please try again.'\n            : null\n\n  if (errorMessage) {\n    return <ErrorMessage>{errorMessage}</ErrorMessage>\n  }\n  return null\n}\n\nconst AlreadySignedByOwnerMessage = ({ hasSigned }: { hasSigned: boolean }) => {\n  const onboard = useOnboard()\n\n  const handleSwitchWallet = () => {\n    if (onboard) {\n      switchWallet(onboard)\n    }\n  }\n  if (!hasSigned) {\n    return null\n  }\n  return (\n    <SuccessMessage>\n      <Grid\n        container\n        direction=\"row\"\n        sx={{\n          justifyContent: 'space-between',\n        }}\n      >\n        <Grid item xs={7}>\n          Your connected wallet has already signed this message.\n        </Grid>\n        <Grid item xs={4}>\n          <Button variant=\"contained\" size=\"small\" onClick={handleSwitchWallet} fullWidth>\n            Switch wallet\n          </Button>\n        </Grid>\n      </Grid>\n    </SuccessMessage>\n  )\n}\n\nconst BlindSigningWarning = ({\n  isBlindSigningEnabled,\n  isBlindSigningPayload,\n}: {\n  isBlindSigningEnabled: boolean\n  isBlindSigningPayload: boolean\n}) => {\n  const router = useRouter()\n  const query = router.query.safe ? { safe: router.query.safe } : undefined\n\n  if (!isBlindSigningPayload) {\n    return null\n  }\n\n  return (\n    <ErrorMessage level={isBlindSigningEnabled ? 'warning' : 'error'}>\n      This request involves{' '}\n      <Link component={NextLink} href={{ pathname: AppRoutes.settings.security, query }}>\n        blind signing\n      </Link>\n      , which can lead to unpredictable outcomes.\n      <br />\n      {isBlindSigningEnabled ? (\n        'Proceed with caution.'\n      ) : (\n        <>\n          If you wish to proceed, you must first{' '}\n          <Link component={NextLink} href={{ pathname: AppRoutes.settings.security, query }}>\n            enable blind signing\n          </Link>\n          .\n        </>\n      )}\n    </ErrorMessage>\n  )\n}\n\nconst SuccessCard = ({ safeMessage, onContinue }: { safeMessage: MessageItem; onContinue: () => void }) => {\n  return (\n    <TxCard>\n      <Typography\n        variant=\"h4\"\n        gutterBottom\n        sx={{\n          textAlign: 'center',\n        }}\n      >\n        Message successfully signed\n      </Typography>\n      <MsgSigners msg={safeMessage} showOnlyConfirmations showMissingSignatures />\n      <CardActions>\n        <Button variant=\"contained\" color=\"primary\" onClick={onContinue} disabled={!safeMessage.preparedSignature}>\n          Continue\n        </Button>\n      </CardActions>\n    </TxCard>\n  )\n}\n\ntype BaseProps = Pick<MessageItem, 'logoUri' | 'name' | 'message'>\n\nexport type SignMessageProps = BaseProps & {\n  origin?: string\n  requestId?: RequestId\n}\n\nconst SignMessage = ({ message, origin, requestId }: SignMessageProps): ReactElement => {\n  // Hooks & variables\n  const { setTxFlow } = useContext(TxModalContext)\n  const { setSafeMessage: setContextSafeMessage } = useContext(SafeTxContext)\n  const { needsRiskConfirmation, isRiskConfirmed, setIsRiskIgnored } = useContext(TxSecurityContext)\n  const { palette } = useTheme()\n  const { safe } = useSafeInfo()\n  const isOwner = useIsSafeOwner()\n  const wallet = useWallet()\n  useHighlightHiddenTab()\n\n  const { decodedMessage, safeMessageMessage, safeMessageHash } = useDecodedSafeMessage(message, safe)\n  const [safeMessage, setSafeMessage] = useSafeMessage(safeMessageHash)\n  const domainHash = getDomainHash({\n    chainId: safe.chainId,\n    safeAddress: safe.address.value,\n    safeVersion: safe.version as SafeVersion,\n  })\n  const messageHash = getSafeMessageMessageHash({ message: decodedMessage, safeVersion: safe.version as SafeVersion })\n  const isPlainTextMessage = typeof decodedMessage === 'string'\n  const decodedMessageAsString = isPlainTextMessage ? decodedMessage : JSON.stringify(decodedMessage, null, 2)\n  const signedByCurrentSafe = !!safeMessage?.confirmations.some(({ owner }) => owner.value === wallet?.address)\n  const hasSignature = safeMessage?.confirmations && safeMessage.confirmations.length > 0\n  const isFullySigned = !!safeMessage?.preparedSignature\n  const isEip712 = isEIP712TypedData(decodedMessage)\n  const isBlindSigningRequest = isBlindSigningPayload(decodedMessage)\n  const isBlindSigningEnabled = useAppSelector(selectBlindSigning)\n  const isDisabled =\n    !isOwner || signedByCurrentSafe || !safe.deployed || (!isBlindSigningEnabled && isBlindSigningRequest)\n\n  const { onSign, submitError } = useSyncSafeMessageSigner(\n    safeMessage,\n    decodedMessage,\n    safeMessageHash,\n    requestId,\n    origin,\n    () => setTxFlow(undefined),\n  )\n\n  const handleSign = async () => {\n    if (needsRiskConfirmation && !isRiskConfirmed) {\n      setIsRiskIgnored(true)\n      return\n    }\n\n    const updatedMessage = await onSign()\n\n    if (updatedMessage) {\n      setSafeMessage(updatedMessage)\n    }\n\n    // Track first signature as creation\n    const isCreation = updatedMessage?.confirmations.length === 1\n    trackEvent({ ...(isCreation ? TX_EVENTS.CREATE : TX_EVENTS.CONFIRM), label: TX_TYPES.typed_message })\n  }\n\n  const onContinue = async () => {\n    if (!safeMessage) {\n      return\n    }\n    await dispatchPreparedSignature(safeMessage, safeMessageHash, () => setTxFlow(undefined), requestId)\n  }\n\n  // Set message for redefine scan\n  useEffect(() => {\n    if (typeof message !== 'string') {\n      setContextSafeMessage(message)\n    }\n  }, [message, setContextSafeMessage])\n\n  return (\n    <>\n      <TxCard>\n        <CardContent>\n          <DialogHeader threshold={safe.threshold} />\n\n          {isEip712 && (\n            <ErrorBoundary fallback={<div>Error parsing data</div>}>\n              <ApprovalEditor safeMessage={decodedMessage} />\n            </ErrorBoundary>\n          )}\n\n          <BlindSigningWarning\n            isBlindSigningEnabled={isBlindSigningEnabled}\n            isBlindSigningPayload={isBlindSigningRequest}\n          />\n\n          <Typography\n            sx={{\n              fontWeight: 700,\n              mt: 2,\n              mb: 1,\n            }}\n          >\n            Message: <CopyButton text={decodedMessageAsString} />\n          </Typography>\n          <DecodedMsg message={decodedMessage} isInModal />\n\n          <Accordion sx={{ mt: 2 }}>\n            <AccordionSummary data-testid=\"message-details\" expandIcon={<ExpandMoreIcon />}>\n              SafeMessage details\n            </AccordionSummary>\n            <AccordionDetails>\n              <MessageHashField label=\"SafeMessage\" hashValue={safeMessageMessage} />\n              <MessageHashField label=\"SafeMessage hash\" hashValue={safeMessageHash} />\n              <MessageHashField label=\"Domain hash\" hashValue={domainHash} />\n              <MessageHashField label=\"Message hash\" hashValue={messageHash} />\n            </AccordionDetails>\n          </Accordion>\n\n          <Box sx={{ '&:not(:empty)': { mt: 2 } }}>\n            <Blockaid />\n          </Box>\n        </CardContent>\n      </TxCard>\n      {isFullySigned ? (\n        <SuccessCard onContinue={onContinue} safeMessage={safeMessage} />\n      ) : (\n        <>\n          <TxCard>\n            <AlreadySignedByOwnerMessage hasSigned={signedByCurrentSafe} />\n\n            <InfoBox\n              title=\"Collect all the confirmations\"\n              message={\n                requestId && !hasSignature\n                  ? 'Please keep this modal open until all signers confirm this message. Closing the modal will abort the signing request.'\n                  : 'The signature will be submitted to the requesting app when the message is fully signed.'\n              }\n            >\n              <MsgSigners\n                msg={safeMessage ?? createSkeletonMessage(safe.threshold)}\n                showOnlyConfirmations\n                showMissingSignatures\n                backgroundColor={palette.info.background}\n              />\n            </InfoBox>\n\n            {hasSignature && (\n              <InfoBox\n                title=\"Share the link with other owners\"\n                message={\n                  <>\n                    <Typography\n                      sx={{\n                        mb: 2,\n                      }}\n                    >\n                      The owners will receive a notification about signing the message. You can also share the link with\n                      them to speed up the process.\n                    </Typography>\n                    <MsgShareLink safeMessageHash={safeMessageHash} button />\n                  </>\n                }\n                icon={LinkIcon}\n              />\n            )}\n\n            <NetworkWarning />\n\n            <MessageDialogError isOwner={isOwner} submitError={submitError} />\n\n            <RiskConfirmationError />\n\n            {!safe.deployed && <ErrorMessage>Your Safe Account is not activated yet.</ErrorMessage>}\n          </TxCard>\n          <TxCard>\n            <CardActions>\n              <CheckWallet checkNetwork={!isDisabled}>\n                {(isOk) => (\n                  <Button variant=\"contained\" color=\"primary\" onClick={handleSign} disabled={!isOk || isDisabled}>\n                    Sign\n                  </Button>\n                )}\n              </CheckWallet>\n            </CardActions>\n          </TxCard>\n        </>\n      )}\n    </>\n  )\n}\n\nexport default SignMessage\n","import { id } from 'ethers'\nimport type { BaseTransaction } from '@safe-global/safe-apps-sdk'\n\nconst WITHDRAW_SIGHASH = id('requestValidatorsExit(bytes)').slice(0, 10)\nconst CLAIM_SIGHASH = id('batchWithdrawCLFee(bytes)').slice(0, 10)\n\nexport const getStakeTitle = (txs: BaseTransaction[] | undefined) => {\n  const hashToLabel = {\n    [WITHDRAW_SIGHASH]: 'Withdraw request',\n    [CLAIM_SIGHASH]: 'Claim',\n  }\n\n  const stakeTitle = txs\n    ?.map((tx) => hashToLabel[tx.data.slice(0, 10)])\n    .filter(Boolean)\n    .join(' and ')\n\n  return stakeTitle\n}\n","import TxLayout from '@/components/tx-flow/common/TxLayout'\nimport SignMessage, { type SignMessageProps } from '@/components/tx-flow/flows/SignMessage/SignMessage'\nimport { getSwapTitle } from '@/features/swap'\nimport { selectSwapParams } from '@/features/swap/store/swapParamsSlice'\nimport { useAppSelector } from '@/store'\nimport { Box, Typography } from '@mui/material'\nimport SafeAppIconCard from '@/components/safe-apps/SafeAppIconCard'\nimport { ErrorBoundary } from '@sentry/react'\nimport { type BaseTransaction } from '@safe-global/safe-apps-sdk'\nimport { SWAP_TITLE } from '@/features/swap/constants'\nimport { STAKE_TITLE } from '@/features/stake/constants'\nimport { getStakeTitle } from '@/features/stake/helpers/utils'\n\nconst APP_LOGO_FALLBACK_IMAGE = '/images/apps/apps-icon.svg'\nconst APP_NAME_FALLBACK = 'Sign message'\n\nexport const AppTitle = ({\n  name,\n  logoUri,\n  txs,\n}: {\n  name?: string | null\n  logoUri?: string | null\n  txs?: BaseTransaction[]\n}) => {\n  const swapParams = useAppSelector(selectSwapParams)\n\n  const appName = name || APP_NAME_FALLBACK\n  const appLogo = logoUri || APP_LOGO_FALLBACK_IMAGE\n\n  let title = appName\n  if (name === SWAP_TITLE) {\n    title = getSwapTitle(swapParams.tradeType, txs) || title\n  }\n\n  if (name === STAKE_TITLE) {\n    title = getStakeTitle(txs) || title\n  }\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <SafeAppIconCard src={appLogo} alt={name || 'The icon of the application'} width={32} height={32} />\n      <Typography variant=\"h4\" pl={2} fontWeight=\"bold\">\n        {title}\n      </Typography>\n    </Box>\n  )\n}\n\nconst SignMessageFlow = ({ ...props }: SignMessageProps) => {\n  return (\n    <TxLayout\n      title=\"Confirm message\"\n      subtitle={<AppTitle name={props.name} logoUri={props.logoUri} />}\n      step={0}\n      hideNonce\n      isMessage\n    >\n      <ErrorBoundary fallback={<div>Error signing message</div>}>\n        <SignMessage {...props} />\n      </ErrorBoundary>\n    </TxLayout>\n  )\n}\n\nexport default SignMessageFlow\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sq4dv\",\"message\":\"styles_message__X3rNR\",\"details\":\"styles_details___XV55\"};"],"names":["TITLE_PREFIX","setFavicon","favicon","href","setDocumentTitle","document","title","isPrefixed","replace","blinkFavicon","originalHref","isBlinking","onBlink","ALT_FAVICON","setInterval","useEffect","useHighlightHiddenTab","interval","querySelector","reset","clearInterval","handleVisibilityChange","hidden","addEventListener","removeEventListener","messages","safeMessage","setSafeMessage","useState","useSafeMessage","safe","useSafeInfo","ongoingMessage","useSafeMessages","page","results","filter","isSafeMessageListItem","find","msg","messageHash","safeMessageHash","updatedMessage","messageError","useAsync","fetchSafeMessage","chainId","messagesTag","InfoBox","message","children","icon","InfoIcon","div","data-testid","className","css","SvgIcon","component","color","inheritViewBox","fontSize","Typography","variant","fontWeight","Divider","dispatchSafeMsgProposal","provider","origin","generateSafeMessageHash","signer","getAssertedChainSigner","signature","tryOffChainMsgSigning","normalizedMessage","isEIP712TypedData","normalizeTypedData","proposeSafeMessage","address","value","error","safeMsgDispatch","SafeMsgEvent","PROPOSE_FAILED","asError","PROPOSE","confirmSafeMessage","CONFIRM_PROPOSE_FAILED","CONFIRM_PROPOSE","getSafeMessage","type","fetchedMessage","err","logError","Errors","_613","decodedMessage","requestId","onClose","submitError","setSubmitError","useSyncSafeMessageSigner","wallet","useWallet","timeout","preparedSignature","setTimeout","dispatchPreparedSignature","HIDE_DELAY","clearTimeout","onSign","useCallback","undefined","dispatchSafeMsgConfirmation","updatedMsg","threshold","e","isMessageFullySigned","confirmationsSubmitted","confirmationsRequired","SIGNATURE_PREPARED","useMemo","getDecodedMessage","useDecodedSafeMessage","safeMessageMessage","generateSafeMessageMessage","SuccessMessage","classNames","CheckIcon","width","isRiskConfirmed","isRiskIgnored","useContext","TxSecurityContext","RiskConfirmationError","ErrorMessage","level","createSkeletonMessage","confirmations","creationTimestamp","logoUri","modifiedTimestamp","name","proposedBy","status","MessageHashField","label","hashValue","sx","mt","EthHashInfo","showAvatar","shortAddress","showCopyButton","DialogHeader","Box","textAlign","mb","RequiredIcon","viewBox","gutterBottom","b","MessageDialogError","isOwner","onboard","useOnboard","errorMessage","isWalletRejection","AlreadySignedByOwnerMessage","hasSigned","Grid","container","direction","justifyContent","item","xs","Button","size","onClick","handleSwitchWallet","switchWallet","fullWidth","BlindSigningWarning","isBlindSigningEnabled","isBlindSigningPayload","router","useRouter","query","Link","NextLink","pathname","AppRoutes","settings","security","br","SuccessCard","onContinue","TxCard","MsgSigners","showOnlyConfirmations","showMissingSignatures","CardActions","disabled","SignMessage","setTxFlow","TxModalContext","setContextSafeMessage","SafeTxContext","needsRiskConfirmation","setIsRiskIgnored","palette","useTheme","useIsSafeOwner","domainHash","getDomainHash","safeAddress","safeVersion","version","getSafeMessageMessageHash","decodedMessageAsString","isPlainTextMessage","JSON","stringify","signedByCurrentSafe","some","owner","hasSignature","length","isFullySigned","isEip712","isBlindSigningRequest","useAppSelector","selectBlindSigning","isDisabled","deployed","handleSign","isCreation","trackEvent","TX_EVENTS","CREATE","CONFIRM","TX_TYPES","typed_message","CardContent","ErrorBoundary","fallback","ApprovalEditor","CopyButton","text","DecodedMsg","isInModal","Accordion","AccordionSummary","expandIcon","ExpandMoreIcon","AccordionDetails","Blockaid","backgroundColor","info","background","MsgShareLink","button","LinkIcon","NetworkWarning","CheckWallet","checkNetwork","isOk","WITHDRAW_SIGHASH","id","slice","CLAIM_SIGHASH","getStakeTitle","hashToLabel","stakeTitle","txs","map","tx","data","Boolean","join","swapParams","selectSwapParams","appName","APP_NAME_FALLBACK","SWAP_TITLE","getSwapTitle","tradeType","STAKE_TITLE","display","alignItems","SafeAppIconCard","src","appLogo","APP_LOGO_FALLBACK_IMAGE","alt","height","pl","props","SignMessageFlow","TxLayout","subtitle","AppTitle","step","hideNonce","isMessage"],"sourceRoot":"","ignoreList":[]}