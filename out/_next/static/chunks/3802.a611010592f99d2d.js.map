{"version":3,"file":"static/chunks/3802.a611010592f99d2d.js","mappings":"qNA2DA,MA1CyB,OAAC,CACxBA,WAAY,KAAEC,CAAG,IAyCJC,IAzCMC,CAAM,CAAE,UAC3BC,CAAQ,CAwCqB,SAvC7BC,CAAQ,CACR,GAAGC,EACmB,GAChB,WAAEC,CAAS,aAAEC,CAAW,gBAAEC,CAAc,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,EAAAA,CAAaA,EAE3EC,CAAAA,EAAAA,EAAAA,CAAAA,CAAqBA,GAErBC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KAcRC,CAbqB,UAEnB,IAAMC,EADcd,EAAIe,MAAM,CAAG,EACR,MAAMC,CAAAA,EAAAA,EAAAA,EAAAA,CAAyBA,CAAChB,GAAO,MAAMiB,CAAAA,EAAAA,EAAAA,EAAAA,CAAQA,CAACjB,CAAG,CAAC,EAAE,EAQrF,aANIE,EAAAA,KAAAA,EAAAA,EAAQgB,QAARhB,CAAQgB,SAAcC,IAGxBL,EAAGM,IAAI,CAACF,SAAS,CAAGhB,EAAOgB,SAAAA,EAGtBJ,EACT,IAEeO,IAAI,CAACf,GAAWgB,KAAK,CAACd,EACvC,EAAG,CAACR,EAAKM,EAAWE,EAAgBN,EAAO,EAE3C,IAAMqB,EAAQ,CAACC,CAAAA,EAAAA,EAAAA,EAAAA,CAASA,CAACxB,GAEzB,MACE,WAACyB,EAAAA,CAAiBA,CAAAA,CAACtB,SAAUA,EAAW,GAAGE,CAAK,WAC7CkB,EACC,UAACG,EAAAA,CAAYA,CAAAA,CAACH,MAAOhB,WAAa,mJAIhC,KACHH,IAGP,kDCIA,MA1CuB,QAoCSgB,EAAyBA,EAM1CO,GA1CS,MACtBP,CAAI,IAyCuBO,EAAA,IAxC3BxB,CAAQ,CAIT,GACOyB,EAA6BC,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAC5C,GACS,UAAC5B,EAAgBA,CAACF,WAAYqB,EAAO,GAAGf,CAAK,GAEtD,CAACe,EAAK,CAFoBnB,CAKtB6B,EAA+BD,CAAAA,EAAAA,EAAAA,WAAAA,CAAWA,CAC9C,IACE,GAAI,CAACE,GAAQ,CAACA,EAAKC,IAAI,CACrB,CADuB,MAIzB,IAAMC,EAAaC,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACH,EAAKC,IAAI,EAE7CC,IAILE,CAAAA,EAAAA,EAAAA,EAAAA,CAJiB,CAIGC,OAAOhB,EAAKiB,KAAK,GACrCC,CAAAA,EAAAA,EAAAA,EAAAA,CAAkBA,CAAC,CAAEC,iBAAkBnB,EAAKoB,SAAS,CAAER,KAAMD,EAAKC,IAAI,YAAEC,CAAW,SACnF9B,GAAAA,EAAW4B,EAAKC,IAAI,CAAEC,GACxB,EACA,CAACb,EAAKiB,CAFJlC,IAES,CAAEiB,EAAKoB,SAAS,CAAErC,EAAS,EAGxC,MACE,UAACsC,EAAAA,CAAMA,CAAAA,CACLtC,SAAU2B,EACVY,SAAU,UAACC,EAAAA,QAAQA,CAAAA,CAACC,IAAI,SAAExB,EAAAA,EAAKyB,GAAAA,GAALzB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAUwB,IAAI,CAAEE,OAAO,SAAE1B,EAAAA,EAAKyB,GAAAA,GAALzB,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,EAAU2B,OAAO,CAAE/C,IAAKoB,EAAKpB,GAAG,GACnF4B,2BAA4BA,GAGlC","sources":["webpack://_N_E/./src/components/tx-flow/flows/SafeAppsTx/ReviewSafeAppsTx.tsx","webpack://_N_E/./src/components/tx-flow/flows/SafeAppsTx/index.tsx"],"sourcesContent":["import { useContext, useEffect } from 'react'\nimport type { ReactElement } from 'react'\nimport type { SafeTransaction } from '@safe-global/safe-core-sdk-types'\nimport type { SafeAppsTxParams } from '.'\nimport { createMultiSendCallOnlyTx, createTx } from '@/services/tx/tx-sender'\nimport useHighlightHiddenTab from '@/hooks/useHighlightHiddenTab'\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport { isTxValid } from '@/components/safe-apps/utils'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport ReviewTransaction from '@/components/tx/ReviewTransactionV2'\nimport { type ReviewTransactionContentProps } from '@/components/tx/ReviewTransactionV2/ReviewTransactionContent'\n\ntype ReviewSafeAppsTxProps = {\n  safeAppsTx: SafeAppsTxParams\n  onSubmit: () => void\n} & ReviewTransactionContentProps\n\nconst ReviewSafeAppsTx = ({\n  safeAppsTx: { txs, params },\n  onSubmit,\n  children,\n  ...props\n}: ReviewSafeAppsTxProps): ReactElement => {\n  const { setSafeTx, safeTxError, setSafeTxError } = useContext(SafeTxContext)\n\n  useHighlightHiddenTab()\n\n  useEffect(() => {\n    const createSafeTx = async (): Promise<SafeTransaction> => {\n      const isMultiSend = txs.length > 1\n      const tx = isMultiSend ? await createMultiSendCallOnlyTx(txs) : await createTx(txs[0])\n\n      if (params?.safeTxGas !== undefined) {\n        // FIXME: do it properly via the Core SDK\n        // @ts-expect-error safeTxGas readonly\n        tx.data.safeTxGas = params.safeTxGas\n      }\n\n      return tx\n    }\n\n    createSafeTx().then(setSafeTx).catch(setSafeTxError)\n  }, [txs, setSafeTx, setSafeTxError, params])\n\n  const error = !isTxValid(txs)\n\n  return (\n    <ReviewTransaction onSubmit={onSubmit} {...props}>\n      {error ? (\n        <ErrorMessage error={safeTxError}>\n          This Safe App initiated a transaction which cannot be processed. Please get in touch with the developer of\n          this Safe App for more information.\n        </ErrorMessage>\n      ) : null}\n      {children}\n    </ReviewTransaction>\n  )\n}\n\nexport default ReviewSafeAppsTx\n","import type { BaseTransaction, RequestId, SendTransactionRequestParams } from '@safe-global/safe-apps-sdk'\nimport type { SafeAppData } from '@safe-global/safe-gateway-typescript-sdk'\nimport ReviewSafeAppsTx from './ReviewSafeAppsTx'\nimport { AppTitle } from '@/components/tx-flow/flows/SignMessage'\nimport { useCallback } from 'react'\nimport { type SubmitCallback, TxFlow } from '../../TxFlow'\nimport { type ReviewTransactionContentProps } from '@/components/tx/ReviewTransactionV2/ReviewTransactionContent'\nimport { dispatchSafeAppsTx } from '@/services/tx/tx-sender'\nimport { trackSafeAppTxCount } from '@/services/safe-apps/track-app-usage-count'\nimport { getSafeTxHashFromTxId } from '@/utils/transactions'\n\nexport type SafeAppsTxParams = {\n  appId?: string\n  app?: Partial<SafeAppData>\n  requestId: RequestId\n  txs: BaseTransaction[]\n  params?: SendTransactionRequestParams\n}\n\nconst SafeAppsTxFlow = ({\n  data,\n  onSubmit,\n}: {\n  data: SafeAppsTxParams\n  onSubmit?: (txId: string, safeTxHash: string) => void\n}) => {\n  const ReviewTransactionComponent = useCallback(\n    (props: ReviewTransactionContentProps) => {\n      return <ReviewSafeAppsTx safeAppsTx={data} {...props} />\n    },\n    [data],\n  )\n\n  const handleSubmit: SubmitCallback = useCallback(\n    (args) => {\n      if (!args || !args.txId) {\n        return\n      }\n\n      const safeTxHash = getSafeTxHashFromTxId(args.txId)\n\n      if (!safeTxHash) {\n        return\n      }\n\n      trackSafeAppTxCount(Number(data.appId))\n      dispatchSafeAppsTx({ safeAppRequestId: data.requestId, txId: args.txId, safeTxHash })\n      onSubmit?.(args.txId, safeTxHash)\n    },\n    [data.appId, data.requestId, onSubmit],\n  )\n\n  return (\n    <TxFlow\n      onSubmit={handleSubmit}\n      subtitle={<AppTitle name={data.app?.name} logoUri={data.app?.iconUrl} txs={data.txs} />}\n      ReviewTransactionComponent={ReviewTransactionComponent}\n    />\n  )\n}\n\nexport default SafeAppsTxFlow\n"],"names":["safeAppsTx","txs","ReviewSafeAppsTx","params","onSubmit","children","props","setSafeTx","safeTxError","setSafeTxError","useContext","SafeTxContext","useHighlightHiddenTab","useEffect","createSafeTx","tx","length","createMultiSendCallOnlyTx","createTx","safeTxGas","undefined","data","then","catch","error","isTxValid","ReviewTransaction","ErrorMessage","SafeAppsTxFlow","ReviewTransactionComponent","useCallback","handleSubmit","args","txId","safeTxHash","getSafeTxHashFromTxId","trackSafeAppTxCount","Number","appId","dispatchSafeAppsTx","safeAppRequestId","requestId","TxFlow","subtitle","AppTitle","name","app","logoUri","iconUrl"],"sourceRoot":"","ignoreList":[]}