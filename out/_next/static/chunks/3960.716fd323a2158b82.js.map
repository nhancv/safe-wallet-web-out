{"version":3,"file":"static/chunks/3960.716fd323a2158b82.js","mappings":"kQAaA,IAAMA,EAA4B,CAChC,CAACC,EAAAA,EAAiBA,CAACC,UAAU,CAAC,CAAE,gBAChC,CAACD,EAAAA,EAAiBA,CAACE,QAAQ,CAAC,CAAE,gBAC9B,CAACF,EAAAA,EAAiBA,CAACG,OAAO,CAAC,CAAE,yBAC7B,CAACH,EAAAA,EAAiBA,CAACI,MAAM,CAAC,CAAE,UAC5B,CAACJ,EAAAA,EAAiBA,CAACK,QAAQ,CAAC,CAAE,2CAChC,EAEA,eAAKC,CAAAA,2DAAAA,GAAAA,GAAAA,CAAAA,GAqDL,MA/CoC,KAClC,IAAMC,EAAWC,CAAAA,EAAAA,EAAAA,EAAAA,CAAcA,GACzBC,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,CAAeA,GACvBC,EAAcC,CAAAA,EAAAA,EAAAA,CAAAA,CAAcA,GAC5B,SAAEC,EAAU,EAAE,CAAE,CAAGC,CAAAA,CA2Ce,CA3CfA,EAAAA,EAAAA,CAASA,IAAM,CAAC,EACnC,SAAEC,CAAO,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAAwBA,CAACH,OAAiBI,EAAAA,EAASA,CAAG,CAAEC,cAAeL,CAAQ,GAEnGM,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,GAAI,CAACV,EAAO,OAIZ,IAAMW,EAFUC,OAAOC,OAAO,CAACvB,GAENwB,GAAG,CAAC,OAAC,CAACC,EAAOC,EAAY,SAChDC,CAAAA,EAAAA,EAAAA,EAAAA,CAAqBA,CAACF,EAAO,MAAOG,IAClC,IAAMC,EAAU,UAAWD,EAC3B,GAAIC,GAAWC,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACF,EAAOG,KAAK,EAAG,OAEhD,IAAMC,EAAYP,IAAUxB,EAAAA,EAAiBA,CAACG,OAAO,CAC/C6B,EAAUJ,EAAU,GAAkBK,MAAAA,CAAfR,EAAY,KAA6B,OAA1BQ,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAACN,EAAOG,KAAK,GAAML,EACpES,EAAS,WAAYP,EAASA,EAAOO,MAAM,MAAGC,EAC9CC,EAAW,aAAcT,GAAUA,EAAOS,QAAQ,CAAGT,EAAOS,QAAQ,CAAGF,GAAU,GACjFG,EAAO5B,GAASyB,EAASI,CAAAA,EAAAA,EAAAA,EAAAA,CAAoBA,CAAC7B,EAAOyB,QAAUC,EAGjEJ,GACFhB,IAGFR,EACEgC,CAAAA,CALa,CAKbA,EAAAA,EAAAA,CAAgBA,CAAC,CACfC,MAAO,kCACPR,EACAS,gBAAiBb,EAAUD,EAAOG,KAAK,CAACE,OAAO,MAAGG,WAClDC,EACAM,QAASd,EAAAA,QAA0BG,EAAAA,UAAAA,OACnCM,MACF,GAEJ,KAGF,MAAO,KACLjB,EAASuB,OAAO,CAAC,GAAWC,IAC9B,CACF,EAAG,CAACrC,EAAUI,EAAaF,EAAOM,EAAQ,CAC5C,iBC9DA,MAP2B,KACzB8B,CAAAA,EAAAA,EAAAA,CAAAA,CAAoBA,GACpBC,IAEO","sources":["webpack://_N_E/./src/features/counterfactual/hooks/usePendingSafeNotifications.ts","webpack://_N_E/./src/features/counterfactual/LazyCounterfactual.tsx"],"sourcesContent":["import { SafeCreationEvent, safeCreationSubscribe } from '@/features/counterfactual/services/safeCreationEvents'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { useGetAllOwnedSafesQuery } from '@/store/api/gateway'\nimport { getBlockExplorerLink } from '@safe-global/utils/utils/chains'\nimport { skipToken } from '@reduxjs/toolkit/query'\nimport { useEffect } from 'react'\nimport { formatError } from '@safe-global/utils/utils/formatters'\nimport { showNotification } from '@/store/notificationsSlice'\nimport { useAppDispatch } from '@/store'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport useSafeAddress from '@/hooks/useSafeAddress'\nimport { isWalletRejection } from '@/utils/wallets'\n\nconst SafeCreationNotifications = {\n  [SafeCreationEvent.PROCESSING]: 'Validating...',\n  [SafeCreationEvent.RELAYING]: 'Validating...',\n  [SafeCreationEvent.INDEXED]: 'Successfully executed.',\n  [SafeCreationEvent.FAILED]: 'Failed.',\n  [SafeCreationEvent.REVERTED]: 'Reverted. Please check your gas settings.',\n}\n\nenum Variant {\n  INFO = 'info',\n  SUCCESS = 'success',\n  ERROR = 'error',\n}\n\nconst usePendingSafeNotifications = (): void => {\n  const dispatch = useAppDispatch()\n  const chain = useCurrentChain()\n  const safeAddress = useSafeAddress()\n  const { address = '' } = useWallet() || {}\n  const { refetch } = useGetAllOwnedSafesQuery(address === '' ? skipToken : { walletAddress: address })\n\n  useEffect(() => {\n    if (!chain) return\n\n    const entries = Object.entries(SafeCreationNotifications) as [keyof typeof SafeCreationNotifications, string][]\n\n    const unsubFns = entries.map(([event, baseMessage]) =>\n      safeCreationSubscribe(event, async (detail) => {\n        const isError = 'error' in detail\n        if (isError && isWalletRejection(detail.error)) return\n\n        const isSuccess = event === SafeCreationEvent.INDEXED\n        const message = isError ? `${baseMessage} ${formatError(detail.error)}` : baseMessage\n        const txHash = 'txHash' in detail ? detail.txHash : undefined\n        const groupKey = 'groupKey' in detail && detail.groupKey ? detail.groupKey : txHash || ''\n        const link = chain && txHash ? getBlockExplorerLink(chain, txHash) : undefined\n\n        // Fetch all owned safes after the Safe has been deployed\n        if (isSuccess) {\n          refetch()\n        }\n\n        dispatch(\n          showNotification({\n            title: 'Safe Account activation',\n            message,\n            detailedMessage: isError ? detail.error.message : undefined,\n            groupKey,\n            variant: isError ? Variant.ERROR : isSuccess ? Variant.SUCCESS : Variant.INFO,\n            link,\n          }),\n        )\n      }),\n    )\n\n    return () => {\n      unsubFns.forEach((unsub) => unsub())\n    }\n  }, [dispatch, safeAddress, chain, refetch])\n}\n\nexport default usePendingSafeNotifications\n","import usePendingSafeNotifications from '@/features/counterfactual/hooks/usePendingSafeNotifications'\nimport usePendingSafeStatus from '@/features/counterfactual/hooks/usePendingSafeStatuses'\n\nconst LazyCounterfactual = () => {\n  usePendingSafeStatus()\n  usePendingSafeNotifications()\n\n  return null\n}\n\nexport default LazyCounterfactual\n"],"names":["SafeCreationNotifications","SafeCreationEvent","PROCESSING","RELAYING","INDEXED","FAILED","REVERTED","Variant","dispatch","useAppDispatch","chain","useCurrentChain","safeAddress","useSafeAddress","address","useWallet","refetch","useGetAllOwnedSafesQuery","skipToken","walletAddress","useEffect","unsubFns","Object","entries","map","event","baseMessage","safeCreationSubscribe","detail","isError","isWalletRejection","error","isSuccess","message","formatError","txHash","undefined","groupKey","link","getBlockExplorerLink","showNotification","title","detailedMessage","variant","forEach","unsub","usePendingSafeStatus","usePendingSafeNotifications"],"sourceRoot":"","ignoreList":[]}