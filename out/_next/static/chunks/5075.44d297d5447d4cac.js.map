{"version":3,"file":"static/chunks/5075.44d297d5447d4cac.js","mappings":"iOA8CA,MA3B0B,OAAC,SAAEA,CAAO,UAAEC,CAAQ,CAAE,GAAGC,EAA+B,GAC1EC,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAUA,CA0BI,EAzBxB,CAAEC,WAAS,gBAAEC,CAAc,UAAEC,CAAQ,eAAEC,CAAa,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACC,EAAAA,CAAaA,EACjF,MAAEC,CAAI,aAAEC,CAAW,cAAEC,CAAY,CAAE,CAAGJ,CAAAA,EAAAA,EAAAA,UAAAA,CAAUA,CAACK,EAAAA,EAAaA,QAEpEC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,UACIC,IAAZhB,GAAyBO,EAASP,GAElCQ,GAAc,EAChB,EAAG,CAACD,EAAUP,EAASQ,EAAc,EAErCO,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACJJ,GACFM,CAAAA,EADQ,EACRA,EAAAA,CAAgBA,CAACd,EAASQ,GAAMO,IAAI,CAACb,GAAWc,KAAK,CAACb,EAE1D,EAAG,CAACK,EAAMR,EAASE,EAAWC,EAAe,EAK3C,WAACc,EAAAA,CAAiBA,CAAAA,CAAE,GAAGlB,CAAK,WAC1B,UAACmB,EAAAA,GAAUA,CAAAA,CAACC,GAAI,WAJP,CAIWC,CAxBL,+CAoBUV,EAnBL,aAmBoBW,oBAAoBC,YAAaC,GArB7D,2BA0BXzB,IAGP,sECRA,MAzBsB,OAAC,IAyBR0B,OAzBUC,CAAS,CAAqC,GAC/D,CAwBoBD,EAAA,GAxBlBJ,CAAI,CAAE,CAAGM,CAAAA,EAAAA,EAAAA,CAAAA,CAAkBA,CAACD,GAC9BE,EAAcC,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACH,EAAUI,MAAM,EAChDC,EAASC,CAAAA,EAAAA,EAAAA,EAAAA,CAASA,GAClB,MAAEC,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GAEtBzB,EAAOiB,EAAUS,EAAE,CACnBrC,EAAUsC,CAAAA,EAAAA,EAAAA,EAAAA,CAAuBA,CAACV,EAAUW,aAAa,EAAIX,EAAUW,aAAa,CAACC,KAAK,CAAGxB,OAC7FyB,EAAa5B,CAAAA,EAAAA,EAAAA,EAAAA,CAAYA,CAACe,EAAWK,OAAAA,EAAAA,KAAAA,EAAAA,EAAQS,OAAAA,CAART,EAAmB,GAAIE,GAC5DQ,EAAUC,CAAAA,EAAAA,EAAAA,EAAAA,CAAYA,CAAChB,EAAWK,OAAAA,EAAAA,KAAAA,EAAAA,EAAQS,OAAAA,CAART,EAAmB,IAE3D,MACE,UAACY,EAAAA,CAAMA,CAAAA,CACLC,KAAMhB,GAAeiB,EAAAA,CAAQA,CAC7BC,SAAU,iCAAGzB,EAAK,UAClBZ,KAAMA,EACNE,aAAc4B,EACd7B,YAAa,CAAC+B,EACdf,UAAWA,EACXqB,2BAA4B,GAAW,UAACC,EAAiBA,CAAClD,QAASA,EAAU,GAAGE,CAAK,GACrFiD,OADyDD,OAC1CE,EAAAA,EAAUA,CAACC,UAAU,EAG1C","sources":["webpack://_N_E/./src/components/tx-flow/flows/ConfirmTx/ConfirmProposedTx.tsx","webpack://_N_E/./src/components/tx-flow/flows/ConfirmTx/index.tsx"],"sourcesContent":["import { type PropsWithChildren, type ReactElement, useContext, useEffect } from 'react'\nimport { Typography } from '@mui/material'\nimport { useChainId } from '@/hooks/useChainId'\nimport { createExistingTx } from '@/services/tx/tx-sender'\nimport ReviewTransaction from '@/components/tx/ReviewTransactionV2'\nimport type { ReviewTransactionContentProps } from '@/components/tx/ReviewTransactionV2/ReviewTransactionContent'\nimport { SafeTxContext } from '@/components/tx-flow/SafeTxProvider'\nimport { TxFlowContext } from '@/components/tx-flow/TxFlowProvider'\n\ntype ConfirmProposedTxProps = PropsWithChildren<\n  {\n    txNonce: number | undefined\n  } & ReviewTransactionContentProps\n>\n\nconst SIGN_TEXT = 'Sign this transaction.'\nconst EXECUTE_TEXT = 'Submit the form to execute this transaction.'\nconst SIGN_EXECUTE_TEXT = 'Sign or immediately execute this transaction.'\n\nconst ConfirmProposedTx = ({ txNonce, children, ...props }: ConfirmProposedTxProps): ReactElement => {\n  const chainId = useChainId()\n  const { setSafeTx, setSafeTxError, setNonce, setIsReadOnly } = useContext(SafeTxContext)\n  const { txId, onlyExecute, isExecutable } = useContext(TxFlowContext)\n\n  useEffect(() => {\n    txNonce !== undefined && setNonce(txNonce)\n    // Data of transactions in the queue should never be editable\n    setIsReadOnly(true)\n  }, [setNonce, txNonce, setIsReadOnly])\n\n  useEffect(() => {\n    if (txId) {\n      createExistingTx(chainId, txId).then(setSafeTx).catch(setSafeTxError)\n    }\n  }, [txId, chainId, setSafeTx, setSafeTxError])\n\n  const text = !onlyExecute ? (isExecutable ? SIGN_EXECUTE_TEXT : SIGN_TEXT) : EXECUTE_TEXT\n\n  return (\n    <ReviewTransaction {...props}>\n      <Typography mb={1}>{text}</Typography>\n      {children}\n    </ReviewTransaction>\n  )\n}\n\nexport default ConfirmProposedTx\n","import { isSwapOrderTxInfo } from '@/utils/transaction-guards'\nimport type { TransactionSummary } from '@safe-global/safe-gateway-typescript-sdk'\nimport ConfirmProposedTx from './ConfirmProposedTx'\nimport { useTransactionType } from '@/hooks/useTransactionType'\nimport SwapIcon from '@/public/images/common/swap.svg'\nimport { isExecutable, isMultisigExecutionInfo, isSignableBy } from '@/utils/transaction-guards'\nimport { useSigner } from '@/hooks/wallets/useWallet'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { TxFlow } from '../../TxFlow'\nimport { TxFlowType } from '@/services/analytics'\n\nconst ConfirmTxFlow = ({ txSummary }: { txSummary: TransactionSummary }) => {\n  const { text } = useTransactionType(txSummary)\n  const isSwapOrder = isSwapOrderTxInfo(txSummary.txInfo)\n  const signer = useSigner()\n  const { safe } = useSafeInfo()\n\n  const txId = txSummary.id\n  const txNonce = isMultisigExecutionInfo(txSummary.executionInfo) ? txSummary.executionInfo.nonce : undefined\n  const canExecute = isExecutable(txSummary, signer?.address || '', safe)\n  const canSign = isSignableBy(txSummary, signer?.address || '')\n\n  return (\n    <TxFlow\n      icon={isSwapOrder && SwapIcon}\n      subtitle={<>{text}&nbsp;</>}\n      txId={txId}\n      isExecutable={canExecute}\n      onlyExecute={!canSign}\n      txSummary={txSummary}\n      ReviewTransactionComponent={(props) => <ConfirmProposedTx txNonce={txNonce} {...props} />}\n      eventCategory={TxFlowType.CONFIRM_TX}\n    />\n  )\n}\n\nexport default ConfirmTxFlow\n"],"names":["txNonce","children","props","chainId","useChainId","setSafeTx","setSafeTxError","setNonce","setIsReadOnly","useContext","SafeTxContext","txId","onlyExecute","isExecutable","TxFlowContext","useEffect","undefined","createExistingTx","then","catch","ReviewTransaction","Typography","mb","text","SIGN_EXECUTE_TEXT","SIGN_TEXT","EXECUTE_TEXT","ConfirmTxFlow","txSummary","useTransactionType","isSwapOrder","isSwapOrderTxInfo","txInfo","signer","useSigner","safe","useSafeInfo","id","isMultisigExecutionInfo","executionInfo","nonce","canExecute","address","canSign","isSignableBy","TxFlow","icon","SwapIcon","subtitle","ReviewTransactionComponent","ConfirmProposedTx","eventCategory","TxFlowType","CONFIRM_TX"],"sourceRoot":"","ignoreList":[]}