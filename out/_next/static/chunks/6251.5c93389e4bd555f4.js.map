{"version":3,"file":"static/chunks/6251.5c93389e4bd555f4.js","mappings":"sSAaO,SAASA,EAAuB,CAQtC,KARsC,sBACrCC,CAAoB,aACpBC,CAAW,OACXC,CAAK,CAKN,CARsC,EAS/BC,EAAOD,CAAK,CAAC,EAAE,CAEfE,EAAQD,EACZ,UAACE,EAAAA,CAAsBA,CAAAA,CAACC,YAAY,aAAaC,SAAUJ,IACzDF,GAAe,CAACD,EAClB,UAACQ,EAAAA,CAAoBA,CAAAA,CAACF,YAAY,eAChC,YAEJ,EAEI,KAFO,GAEP,EAACG,EAAAA,GAAIA,CAAAA,CAACC,IAAI,IAACC,GAAI,YACb,UAACC,EAAAA,EAAeA,CAAAA,UACd,UAACC,EAAAA,EAAUA,CAAAA,UAAET,QAKd,IACT,CAEO,SAASU,IACd,GAAM,CAACC,EAAsBC,EAAwB,CAAGC,CAAAA,EAAAA,EAAAA,QAAAA,CAAQA,EAAC,GAC3Df,EAAQgB,CAAAA,EAAAA,EAAAA,CAAAA,CAAgBA,GAkB9B,MAhBAC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,IAAMC,EAAWC,OAAOC,MAAM,CAACC,EAAAA,EAAaA,EAAEC,GAAG,CAAC,GAChDC,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACC,EAAO,IACvB,IAAMC,EAAa,WAAYC,GAAUA,EAAOC,MAAM,GAAKC,EAAAA,EAAcA,CAACC,QAAQ,CAC5EC,EAAeN,IAAUH,EAAAA,EAAaA,CAACU,UAAU,CACjDC,EAAWhC,EAAMiC,IAAI,CAAC,GAAUzB,EAAK0B,IAAI,CAACC,MAAM,UAAKT,EAAAA,KAAAA,EAAAA,EAAQU,QAARV,MAAQU,GAEnEtB,EAAwBW,IAAeK,GAAgB,CAACE,CAAAA,CAAO,CACjE,GADyCF,CAI3C,MAAO,KACLZ,EAASmB,OAAO,CAAC,GAAWC,IAC9B,CACF,EAAG,CAACtC,EAAM,EAEHa,CACT,CAQA,MANuB0B,CAAAA,EAAAA,EAAAA,CAAAA,CAAQA,CAAC1C,EAAwB,CACtDC,iBAKa0C,IALS5B,EACtBb,QAI2ByC,EAAA,EAJdC,EAAAA,CAAcA,CAC3BzC,MAAOgB,EAAAA,CAAgBA,AACzB","sources":["webpack://_N_E/./src/features/recovery/components/RecoveryHeader/index.tsx"],"sourcesContent":["import { Grid } from '@mui/material'\nimport { useEffect, useState } from 'react'\nimport type { ReactElement } from 'react'\n\nimport { useRecoveryQueue } from '@/features/recovery/hooks/useRecoveryQueue'\nimport { useIsRecoverer } from '@/features/recovery/hooks/useIsRecoverer'\nimport madProps from '@/utils/mad-props'\nimport { RecoveryProposalCard } from '@/features/recovery/components/RecoveryCards/RecoveryProposalCard'\nimport { RecoveryInProgressCard } from '@/features/recovery/components/RecoveryCards/RecoveryInProgressCard'\nimport { WidgetContainer, WidgetBody } from '@/components/dashboard/styled'\nimport { RecoveryEvent, RecoveryTxType, recoverySubscribe } from '@/features/recovery/services/recoveryEvents'\nimport type { RecoveryQueueItem } from '@/features/recovery/services/recovery-state'\n\nexport function InternalRecoveryHeader({\n  isProposalInProgress,\n  isRecoverer,\n  queue,\n}: {\n  isProposalInProgress: boolean\n  isRecoverer: boolean\n  queue: Array<RecoveryQueueItem>\n}): ReactElement | null {\n  const next = queue[0]\n\n  const modal = next ? (\n    <RecoveryInProgressCard orientation=\"horizontal\" recovery={next} />\n  ) : isRecoverer && !isProposalInProgress ? (\n    <RecoveryProposalCard orientation=\"horizontal\" />\n  ) : null\n\n  if (modal) {\n    return (\n      <Grid item xs={12}>\n        <WidgetContainer>\n          <WidgetBody>{modal}</WidgetBody>\n        </WidgetContainer>\n      </Grid>\n    )\n  }\n  return null\n}\n\nexport function useIsProposalInProgress(): boolean {\n  const [isProposalSubmitting, setIsProposalSubmitting] = useState(false)\n  const queue = useRecoveryQueue()\n\n  useEffect(() => {\n    const unsubFns = Object.values(RecoveryEvent).map((event) =>\n      recoverySubscribe(event, (detail) => {\n        const isProposal = 'txType' in detail && detail.txType === RecoveryTxType.PROPOSAL\n        const isProcessing = event === RecoveryEvent.PROCESSING\n        const isLoaded = queue.some((item) => item.args.txHash === detail?.recoveryTxHash)\n\n        setIsProposalSubmitting(isProposal && (isProcessing || !isLoaded))\n      }),\n    )\n\n    return () => {\n      unsubFns.forEach((unsub) => unsub())\n    }\n  }, [queue])\n\n  return isProposalSubmitting\n}\n\nconst RecoveryHeader = madProps(InternalRecoveryHeader, {\n  isProposalInProgress: useIsProposalInProgress,\n  isRecoverer: useIsRecoverer,\n  queue: useRecoveryQueue,\n})\n\nexport default RecoveryHeader\n"],"names":["InternalRecoveryHeader","isProposalInProgress","isRecoverer","queue","next","modal","RecoveryInProgressCard","orientation","recovery","RecoveryProposalCard","Grid","item","xs","WidgetContainer","WidgetBody","useIsProposalInProgress","isProposalSubmitting","setIsProposalSubmitting","useState","useRecoveryQueue","useEffect","unsubFns","Object","values","RecoveryEvent","map","recoverySubscribe","event","isProposal","detail","txType","RecoveryTxType","PROPOSAL","isProcessing","PROCESSING","isLoaded","some","args","txHash","recoveryTxHash","forEach","unsub","madProps","RecoveryHeader","useIsRecoverer"],"sourceRoot":"","ignoreList":[]}