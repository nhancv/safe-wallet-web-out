{"version":3,"file":"static/chunks/6355.4919be4290b38ae8.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./node_modules/@mui/icons-material/esm/ExpandMoreRounded.js","webpack://_N_E/./src/components/tx-flow/flows/NewSpendingLimit/CreateSpendingLimit.tsx","webpack://_N_E/./src/components/tx-flow/flows/NewSpendingLimit/ReviewSpendingLimit.tsx","webpack://_N_E/./src/components/tx-flow/flows/NewSpendingLimit/index.tsx"],"sourcesContent":["export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","\"use client\";\n\nimport createSvgIcon from \"./utils/createSvgIcon.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default createSvgIcon(/*#__PURE__*/_jsx(\"path\", {\n  d: \"M15.88 9.29 12 13.17 8.12 9.29a.996.996 0 0 0-1.41 0c-.39.39-.39 1.02 0 1.41l4.59 4.59c.39.39 1.02.39 1.41 0l4.59-4.59c.39-.39.39-1.02 0-1.41-.39-.38-1.03-.39-1.42 0\"\n}), 'ExpandMoreRounded');","import { useCallback, useContext, useMemo } from 'react'\nimport { Controller, FormProvider, useForm } from 'react-hook-form'\nimport { Button, CardActions, FormControl, InputLabel, MenuItem, Select, Typography } from '@mui/material'\nimport ExpandMoreRoundedIcon from '@mui/icons-material/ExpandMoreRounded'\nimport { parseUnits, AbiCoder } from 'ethers'\n\nimport AddressBookInput from '@/components/common/AddressBookInput'\nimport useChainId from '@/hooks/useChainId'\nimport { getResetTimeOptions } from '@/components/transactions/TxDetails/TxData/SpendingLimits'\nimport { useVisibleBalances } from '@/hooks/useVisibleBalances'\nimport type { NewSpendingLimitFlowProps } from '.'\nimport TxCard from '../../common/TxCard'\nimport css from '@/components/tx/ExecuteCheckbox/styles.module.css'\nimport TokenAmountInput from '@/components/common/TokenAmountInput'\nimport { SpendingLimitFields } from '.'\nimport { validateAmount, validateDecimalLength } from '@safe-global/utils/utils/validation'\nimport { TxFlowContext, type TxFlowContextType } from '../../TxFlowProvider'\n\nexport const _validateSpendingLimit = (val: string, decimals?: number | null) => {\n  // Allowance amount is uint96 https://github.com/safe-global/safe-modules/blob/main/modules/allowances/contracts/AllowanceModule.sol#L52\n  try {\n    const amount = parseUnits(val, decimals ?? 'Gwei')\n    AbiCoder.defaultAbiCoder().encode(['int96'], [amount])\n  } catch (e) {\n    return Number(val) > 1 ? 'Amount is too big' : 'Amount is too small'\n  }\n}\n\nexport const CreateSpendingLimit = () => {\n  const chainId = useChainId()\n  const { balances } = useVisibleBalances()\n  const { onNext, data } = useContext<TxFlowContextType<NewSpendingLimitFlowProps>>(TxFlowContext)\n\n  const resetTimeOptions = useMemo(() => getResetTimeOptions(chainId), [chainId])\n\n  const formMethods = useForm<NewSpendingLimitFlowProps>({\n    defaultValues: data,\n    mode: 'onChange',\n  })\n\n  const { handleSubmit, watch, control } = formMethods\n\n  const tokenAddress = watch(SpendingLimitFields.tokenAddress)\n  const selectedToken = tokenAddress\n    ? balances.items.find((item) => item.tokenInfo.address === tokenAddress)\n    : undefined\n\n  const validateSpendingLimit = useCallback(\n    (value: string) => {\n      return (\n        validateAmount(value) ||\n        validateDecimalLength(value, selectedToken?.tokenInfo.decimals) ||\n        _validateSpendingLimit(value, selectedToken?.tokenInfo.decimals)\n      )\n    },\n    [selectedToken?.tokenInfo.decimals],\n  )\n\n  return (\n    <TxCard>\n      <FormProvider {...formMethods}>\n        <form onSubmit={handleSubmit(onNext)}>\n          <FormControl fullWidth sx={{ mb: 3 }}>\n            <AddressBookInput\n              data-testid=\"beneficiary-section\"\n              name={SpendingLimitFields.beneficiary}\n              label=\"Beneficiary\"\n            />\n          </FormControl>\n\n          <TokenAmountInput balances={balances.items} selectedToken={selectedToken} validate={validateSpendingLimit} />\n\n          <Typography variant=\"h4\" fontWeight={700} mt={3}>\n            Reset Timer\n          </Typography>\n          <Typography>\n            Set a reset time so the allowance automatically refills after the defined time period.\n          </Typography>\n          <FormControl fullWidth className={css.select}>\n            <InputLabel shrink={false}>Time Period</InputLabel>\n            <Controller\n              rules={{ required: true }}\n              control={control}\n              name={SpendingLimitFields.resetTime}\n              render={({ field }) => (\n                <Select\n                  data-testid=\"time-period-section\"\n                  {...field}\n                  sx={{ textAlign: 'right', fontWeight: 700 }}\n                  IconComponent={ExpandMoreRoundedIcon}\n                >\n                  {resetTimeOptions.map((resetTime) => (\n                    <MenuItem\n                      data-testid=\"time-period-item\"\n                      key={resetTime.value}\n                      value={resetTime.value}\n                      sx={{ overflow: 'hidden' }}\n                    >\n                      {resetTime.label}\n                    </MenuItem>\n                  ))}\n                </Select>\n              )}\n            />\n          </FormControl>\n\n          <CardActions>\n            <Button data-testid=\"next-btn\" variant=\"contained\" type=\"submit\">\n              Next\n            </Button>\n          </CardActions>\n        </form>\n      </FormProvider>\n    </TxCard>\n  )\n}\n","import { useCurrentChain } from '@/hooks/useChains'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport { useEffect, useMemo, useContext } from 'react'\nimport { useSelector } from 'react-redux'\nimport { Typography, Alert, Box } from '@mui/material'\n\nimport SpendingLimitLabel from '@/components/common/SpendingLimitLabel'\nimport { getResetTimeOptions } from '@/components/transactions/TxDetails/TxData/SpendingLimits'\nimport SendAmountBlock from '@/components/tx-flow/flows/TokenTransfer/SendAmountBlock'\nimport useBalances from '@/hooks/useBalances'\nimport useChainId from '@/hooks/useChainId'\nimport { trackEvent, SETTINGS_EVENTS } from '@/services/analytics'\nimport { createNewSpendingLimitTx } from '@/services/tx/tx-sender'\nimport { selectSpendingLimits } from '@/store/spendingLimitsSlice'\nimport { formatVisualAmount, safeParseUnits } from '@safe-global/utils/utils/formatters'\nimport type { NewSpendingLimitFlowProps } from '.'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { SafeTxContext } from '../../SafeTxProvider'\nimport ReviewTransaction, { type ReviewTransactionProps } from '@/components/tx/ReviewTransactionV2'\nimport { TxFlowContext, type TxFlowContextType } from '../../TxFlowProvider'\nimport TxDetailsRow from '@/components/tx/ConfirmTxDetails/TxDetailsRow'\n\nexport const ReviewSpendingLimit = ({ onSubmit, children }: ReviewTransactionProps) => {\n  const { data } = useContext<TxFlowContextType<NewSpendingLimitFlowProps>>(TxFlowContext)\n  const spendingLimits = useSelector(selectSpendingLimits)\n  const { safe } = useSafeInfo()\n  const chainId = useChainId()\n  const chain = useCurrentChain()\n  const { balances } = useBalances()\n  const { setSafeTx, setSafeTxError } = useContext(SafeTxContext)\n  const token = balances.items.find((item) => item.tokenInfo.address === data?.tokenAddress)\n  const { decimals } = token?.tokenInfo || {}\n\n  const amountInWei = useMemo(\n    () => safeParseUnits(data?.amount || '0', token?.tokenInfo.decimals)?.toString() || '0',\n    [data?.amount, token?.tokenInfo.decimals],\n  )\n\n  const existingSpendingLimit = useMemo(() => {\n    return spendingLimits.find(\n      (spendingLimit) =>\n        spendingLimit.beneficiary === data?.beneficiary && spendingLimit.token.address === data?.tokenAddress,\n    )\n  }, [spendingLimits, data])\n\n  useEffect(() => {\n    if (!chain || !data) return\n\n    createNewSpendingLimitTx(\n      data,\n      spendingLimits,\n      chainId,\n      chain,\n      safe.modules,\n      safe.deployed,\n      decimals,\n      existingSpendingLimit,\n    )\n      .then(setSafeTx)\n      .catch(setSafeTxError)\n  }, [\n    chain,\n    chainId,\n    decimals,\n    existingSpendingLimit,\n    data,\n    safe.modules,\n    safe.deployed,\n    setSafeTx,\n    setSafeTxError,\n    spendingLimits,\n  ])\n\n  const isOneTime = data?.resetTime === '0'\n  const resetTime = useMemo(() => {\n    return isOneTime\n      ? 'One-time spending limit'\n      : getResetTimeOptions(chainId).find((time) => time.value === data?.resetTime)?.label\n  }, [isOneTime, data?.resetTime, chainId])\n\n  const onFormSubmit = () => {\n    trackEvent({\n      ...SETTINGS_EVENTS.SPENDING_LIMIT.RESET_PERIOD,\n      label: resetTime,\n    })\n\n    onSubmit()\n  }\n\n  const existingAmount = existingSpendingLimit\n    ? formatVisualAmount(BigInt(existingSpendingLimit?.amount), decimals)\n    : undefined\n\n  const oldResetTime = existingSpendingLimit\n    ? getResetTimeOptions(chainId).find((time) => time.value === existingSpendingLimit?.resetTimeMin)?.label\n    : undefined\n\n  return (\n    <ReviewTransaction onSubmit={onFormSubmit} withDecodedData={false}>\n      {token && (\n        <SendAmountBlock amountInWei={amountInWei} tokenInfo={token.tokenInfo} title=\"Amount\">\n          {existingAmount && existingAmount !== data?.amount && (\n            <>\n              <Typography\n                data-testid=\"old-token-amount\"\n                color=\"error\"\n                sx={{ textDecoration: 'line-through' }}\n                component=\"span\"\n              >\n                {existingAmount}\n              </Typography>\n              →\n            </>\n          )}\n        </SendAmountBlock>\n      )}\n\n      <TxDetailsRow label=\"Beneficiary\" grid>\n        <Box data-testid=\"beneficiary-address\">\n          <EthHashInfo\n            address={data?.beneficiary || ''}\n            shortAddress={false}\n            hasExplorer\n            showCopyButton\n            showAvatar={false}\n          />\n        </Box>\n      </TxDetailsRow>\n\n      <TxDetailsRow label=\"Reset time\" grid>\n        {existingSpendingLimit ? (\n          <>\n            <SpendingLimitLabel\n              label={\n                <>\n                  {existingSpendingLimit.resetTimeMin !== data?.resetTime && (\n                    <>\n                      <Typography\n                        data-testid=\"old-reset-time\"\n                        color=\"error\"\n                        component=\"span\"\n                        sx={{\n                          textDecoration: 'line-through',\n                        }}\n                      >\n                        {oldResetTime}\n                      </Typography>\n                      {' → '}\n                    </>\n                  )}\n                  <Typography component=\"span\">{resetTime}</Typography>\n                </>\n              }\n              isOneTime={existingSpendingLimit.resetTimeMin === '0'}\n            />\n          </>\n        ) : (\n          <SpendingLimitLabel\n            data-testid=\"spending-limit-label\"\n            label={resetTime || 'One-time spending limit'}\n            isOneTime={!!resetTime && isOneTime}\n          />\n        )}\n      </TxDetailsRow>\n\n      {existingSpendingLimit && (\n        <Alert severity=\"warning\" sx={{ border: 'unset' }}>\n          <Typography data-testid=\"limit-replacement-warning\" fontWeight={700}>\n            You are about to replace an existing spending limit\n          </Typography>\n        </Alert>\n      )}\n\n      {children}\n    </ReviewTransaction>\n  )\n}\n","import { CreateSpendingLimit } from './CreateSpendingLimit'\nimport { ReviewSpendingLimit } from './ReviewSpendingLimit'\nimport SaveAddressIcon from '@/public/images/common/save-address.svg'\nimport { ZERO_ADDRESS } from '@safe-global/protocol-kit/dist/src/utils/constants'\nimport { TokenAmountFields } from '@/components/common/TokenAmountInput'\nimport { TxFlowType } from '@/services/analytics'\nimport { TxFlow } from '../../TxFlow'\nimport { TxFlowStep } from '../../TxFlowStep'\n\nenum Fields {\n  beneficiary = 'beneficiary',\n  resetTime = 'resetTime',\n}\n\nexport const SpendingLimitFields = { ...Fields, ...TokenAmountFields }\n\nexport type NewSpendingLimitFlowProps = {\n  [SpendingLimitFields.beneficiary]: string\n  [SpendingLimitFields.tokenAddress]: string\n  [SpendingLimitFields.amount]: string\n  [SpendingLimitFields.resetTime]: string\n}\n\nconst defaultValues: NewSpendingLimitFlowProps = {\n  beneficiary: '',\n  tokenAddress: ZERO_ADDRESS,\n  amount: '',\n  resetTime: '0',\n}\n\nconst NewSpendingLimitFlow = () => {\n  return (\n    <TxFlow\n      icon={SaveAddressIcon}\n      subtitle=\"Spending limit\"\n      ReviewTransactionComponent={ReviewSpendingLimit}\n      eventCategory={TxFlowType.SETUP_SPENDING_LIMIT}\n      initialData={defaultValues}\n    >\n      <TxFlowStep title=\"New transaction\">\n        <CreateSpendingLimit />\n      </TxFlowStep>\n    </TxFlow>\n  )\n}\n\nexport default NewSpendingLimitFlow\n"],"names":["createSvgIcon","_jsx","d","_validateSpendingLimit","val","decimals","amount","parseUnits","AbiCoder","defaultAbiCoder","encode","e","Number","chainId","useChainId","balances","useVisibleBalances","onNext","data","useContext","TxFlowContext","resetTimeOptions","useMemo","getResetTimeOptions","formMethods","useForm","defaultValues","mode","handleSubmit","watch","control","tokenAddress","SpendingLimitFields","selectedToken","items","find","item","tokenInfo","address","undefined","validateSpendingLimit","useCallback","validateAmount","value","validateDecimalLength","TxCard","FormProvider","form","onSubmit","FormControl","fullWidth","sx","mb","AddressBookInput","data-testid","name","beneficiary","label","TokenAmountInput","validate","Typography","variant","fontWeight","mt","className","css","InputLabel","shrink","Controller","rules","required","resetTime","render","field","Select","textAlign","IconComponent","ExpandMoreRoundedIcon","map","MenuItem","overflow","CardActions","Button","type","ReviewSpendingLimit","children","spendingLimits","useSelector","selectSpendingLimits","safe","useSafeInfo","chain","useCurrentChain","useBalances","setSafeTx","setSafeTxError","SafeTxContext","token","amountInWei","safeParseUnits","toString","existingSpendingLimit","spendingLimit","useEffect","createNewSpendingLimitTx","modules","deployed","then","catch","isOneTime","time","existingAmount","formatVisualAmount","BigInt","oldResetTime","resetTimeMin","ReviewTransaction","onFormSubmit","trackEvent","SETTINGS_EVENTS","SPENDING_LIMIT","RESET_PERIOD","withDecodedData","SendAmountBlock","title","color","textDecoration","component","TxDetailsRow","grid","Box","EthHashInfo","shortAddress","hasExplorer","showCopyButton","showAvatar","SpendingLimitLabel","Alert","severity","border","Fields","TokenAmountFields","ZERO_ADDRESS","TxFlow","icon","SaveAddressIcon","subtitle","NewSpendingLimitFlow","ReviewTransactionComponent","eventCategory","TxFlowType","SETUP_SPENDING_LIMIT","initialData","TxFlowStep","CreateSpendingLimit"],"sourceRoot":"","ignoreList":[1]}