{"version":3,"file":"static/chunks/7214-94d01f6966306023.js","mappings":"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","sources":["webpack://_N_E/./src/components/new-safe/ReviewRow/index.tsx","webpack://_N_E/./src/components/new-safe/create/logic/utils.ts","webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/features/counterfactual/PayNowPayLater.tsx","webpack://_N_E/./src/components/new-safe/create/steps/ReviewStep/index.tsx","webpack://_N_E/./src/components/new-safe/create/useSyncSafeCreationStep.ts","webpack://_N_E/./src/components/new-safe/create/styles.module.css","webpack://_N_E/./src/components/new-safe/create/steps/ReviewStep/styles.module.css","webpack://_N_E/./src/components/new-safe/create/useEstimateSafeCreationGas.ts"],"sourcesContent":["import React, { type ReactElement } from 'react'\nimport { Grid, Typography } from '@mui/material'\n\nconst ReviewRow = ({ name, value }: { name?: string; value: ReactElement }) => {\n  return (\n    <>\n      {name && (\n        <Grid item xs={3}>\n          <Typography variant=\"body2\">{name}</Typography>\n        </Grid>\n      )}\n      <Grid item xs={name ? 9 : 12}>\n        {value}\n      </Grid>\n    </>\n  )\n}\n\nexport default ReviewRow\n","import { isSmartContract } from '@/utils/wallets'\nimport { type ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport { sameAddress } from '@safe-global/utils/utils/addresses'\nimport { createWeb3ReadOnly, getRpcServiceUrl } from '@/hooks/wallets/web3'\nimport { type ReplayedSafeProps } from '@safe-global/utils/features/counterfactual/store/types'\nimport { predictAddressBasedOnReplayData } from '@/features/multichain/utils/utils'\nimport chains from '@/config/chains'\nimport { computeNewSafeAddress } from '.'\n\nexport const getAvailableSaltNonce = async (\n  customRpcs: {\n    [chainId: string]: string\n  },\n  replayedSafe: ReplayedSafeProps,\n  chainInfos: ChainInfo[],\n  // All addresses from the sidebar disregarding the chain. This is an optimization to reduce RPC calls\n  knownSafeAddresses: string[],\n): Promise<string> => {\n  let isAvailableOnAllChains = true\n  const allRPCs = chainInfos.map((chain) => {\n    const rpcUrl = customRpcs?.[chain.chainId] || getRpcServiceUrl(chain.rpcUri)\n    // Turn into Eip1993Provider\n    return {\n      rpcUrl,\n      chainId: chain.chainId,\n    }\n  })\n\n  for (const chain of chainInfos) {\n    const rpcUrl = allRPCs.find((rpc) => chain.chainId === rpc.chainId)?.rpcUrl\n    if (!rpcUrl) {\n      throw new Error(`No RPC available for  ${chain.chainName}`)\n    }\n    const web3ReadOnly = createWeb3ReadOnly(chain, rpcUrl)\n    if (!web3ReadOnly) {\n      throw new Error('Could not initiate RPC')\n    }\n    let safeAddress: string\n    // FIXME a new check to indicate ZKsync chain will be added to the config service and available under ChainInfo\n    if (chain.chainId === chains['zksync'] || chain.chainId === chains['lens']) {\n      // ZK-sync is using a different create2 method which is supported by the SDK\n      safeAddress = await computeNewSafeAddress(\n        rpcUrl,\n        {\n          safeAccountConfig: replayedSafe.safeAccountConfig,\n          saltNonce: replayedSafe.saltNonce,\n        },\n        chain,\n        replayedSafe.safeVersion,\n      )\n    } else {\n      safeAddress = await predictAddressBasedOnReplayData(replayedSafe, web3ReadOnly)\n    }\n    const isKnown = knownSafeAddresses.some((knownAddress) => sameAddress(knownAddress, safeAddress))\n    if (isKnown || (await isSmartContract(safeAddress, web3ReadOnly))) {\n      // We found a chain where the nonce is used up\n      isAvailableOnAllChains = false\n      break\n    }\n  }\n\n  // Safe is already deployed so we try the next saltNonce\n  if (!isAvailableOnAllChains) {\n    return getAvailableSaltNonce(\n      customRpcs,\n      { ...replayedSafe, saltNonce: (Number(replayedSafe.saltNonce) + 1).toString() },\n      chainInfos,\n      knownSafeAddresses,\n    )\n  }\n\n  return replayedSafe.saltNonce\n}\n","export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import type { ChangeEvent, Dispatch, SetStateAction } from 'react'\nimport classnames from 'classnames'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport CheckRoundedIcon from '@mui/icons-material/CheckRounded'\nimport {\n  FormControl,\n  FormControlLabel,\n  List,\n  ListItem,\n  ListItemIcon,\n  Radio,\n  RadioGroup,\n  Typography,\n} from '@mui/material'\n\nimport css from './styles.module.css'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport { PayMethod } from '@safe-global/utils/features/counterfactual/types'\n\nconst PayNowPayLater = ({\n  totalFee,\n  canRelay,\n  isMultiChain,\n  payMethod,\n  setPayMethod,\n}: {\n  totalFee: string\n  canRelay: boolean\n  isMultiChain: boolean\n  payMethod: PayMethod\n  setPayMethod: Dispatch<SetStateAction<PayMethod>>\n}) => {\n  const chain = useCurrentChain()\n\n  const onChoosePayMethod = (_: ChangeEvent<HTMLInputElement>, newPayMethod: string) => {\n    setPayMethod(newPayMethod as PayMethod)\n  }\n\n  return (\n    <>\n      <Typography variant=\"h4\" fontWeight=\"bold\">\n        Before we continue...\n      </Typography>\n      {isMultiChain && (\n        <ErrorMessage level=\"info\">\n          You will need to <b>activate your account</b> separately on each network. Make sure you have funds on your\n          wallet to pay the network fee.\n        </ErrorMessage>\n      )}\n      <List>\n        {isMultiChain && (\n          <ListItem disableGutters>\n            <ListItemIcon className={css.listItem}>\n              <CheckRoundedIcon fontSize=\"small\" color=\"inherit\" />\n            </ListItemIcon>\n            <Typography variant=\"body2\">\n              Start exploring the accounts now, and activate them later to start making transactions\n            </Typography>\n          </ListItem>\n        )}\n        <ListItem disableGutters>\n          <ListItemIcon className={css.listItem}>\n            <CheckRoundedIcon fontSize=\"small\" color=\"inherit\" />\n          </ListItemIcon>\n          <Typography variant=\"body2\">There will be a one-time activation fee</Typography>\n        </ListItem>\n        {!isMultiChain && (\n          <ListItem disableGutters>\n            <ListItemIcon className={css.listItem}>\n              <CheckRoundedIcon fontSize=\"small\" color=\"inherit\" />\n            </ListItemIcon>\n            <Typography variant=\"body2\">\n              If you choose to pay later, the fee will be included with the first transaction you make.\n            </Typography>\n          </ListItem>\n        )}\n        <ListItem disableGutters>\n          <ListItemIcon className={css.listItem}>\n            <CheckRoundedIcon fontSize=\"small\" color=\"inherit\" />\n          </ListItemIcon>\n          <Typography variant=\"body2\">Safe doesn&apos;t profit from the fees.</Typography>\n        </ListItem>\n      </List>\n      {!isMultiChain && (\n        <FormControl fullWidth>\n          <RadioGroup row value={payMethod} onChange={onChoosePayMethod} className={css.radioGroup}>\n            <FormControlLabel\n              data-testid=\"pay-now-execution-method\"\n              sx={{ flex: 1 }}\n              value={PayMethod.PayNow}\n              className={classnames(css.radioContainer, { [css.active]: payMethod === PayMethod.PayNow })}\n              label={\n                <>\n                  <Typography className={css.radioTitle}>Pay now</Typography>\n                  <Typography className={css.radioSubtitle} variant=\"body2\" color=\"text.secondary\">\n                    {canRelay ? (\n                      'Sponsored free transaction'\n                    ) : (\n                      <>\n                        &asymp; {totalFee} {chain?.nativeCurrency.symbol}\n                      </>\n                    )}\n                  </Typography>\n                </>\n              }\n              control={<Radio />}\n            />\n\n            <FormControlLabel\n              data-testid=\"connected-wallet-execution-method\"\n              sx={{ flex: 1 }}\n              value={PayMethod.PayLater}\n              className={classnames(css.radioContainer, { [css.active]: payMethod === PayMethod.PayLater })}\n              label={\n                <>\n                  <Typography className={css.radioTitle}>Pay later</Typography>\n                  <Typography className={css.radioSubtitle} variant=\"body2\" color=\"text.secondary\">\n                    with the first transaction\n                  </Typography>\n                </>\n              }\n              control={<Radio />}\n            />\n          </RadioGroup>\n        </FormControl>\n      )}\n    </>\n  )\n}\n\nexport default PayNowPayLater\n","import type { NamedAddress } from '@/components/new-safe/create/types'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { safeCreationDispatch, SafeCreationEvent } from '@/features/counterfactual/services/safeCreationEvents'\nimport NetworkLogosList from '@/features/multichain/components/NetworkLogosList'\nimport { getTotalFeeFormatted } from '@/hooks/useGasPrice'\nimport type { StepRenderProps } from '@/components/new-safe/CardStepper/useCardStepper'\nimport type { NewSafeFormData } from '@/components/new-safe/create'\nimport {\n  computeNewSafeAddress,\n  createNewSafe,\n  createNewUndeployedSafeWithoutSalt,\n  relaySafeCreation,\n} from '@/components/new-safe/create/logic'\nimport { getAvailableSaltNonce } from '@/components/new-safe/create/logic/utils'\nimport css from '@/components/new-safe/create/steps/ReviewStep/styles.module.css'\nimport layoutCss from '@/components/new-safe/create/styles.module.css'\nimport { useEstimateSafeCreationGas } from '@/components/new-safe/create/useEstimateSafeCreationGas'\nimport useSyncSafeCreationStep from '@/components/new-safe/create/useSyncSafeCreationStep'\nimport ReviewRow from '@/components/new-safe/ReviewRow'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\nimport { ExecutionMethod, ExecutionMethodSelector } from '@/components/tx/ExecutionMethodSelector'\nimport PayNowPayLater from '@/features/counterfactual/PayNowPayLater'\nimport { CF_TX_GROUP_KEY, replayCounterfactualSafeDeployment } from '@/features/counterfactual/utils'\nimport { useCurrentChain, useHasFeature } from '@/hooks/useChains'\nimport useGasPrice from '@/hooks/useGasPrice'\nimport useIsWrongChain from '@/hooks/useIsWrongChain'\nimport { useLeastRemainingRelays } from '@/hooks/useRemainingRelays'\nimport useWalletCanPay from '@/hooks/useWalletCanPay'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { CREATE_SAFE_CATEGORY, CREATE_SAFE_EVENTS, OVERVIEW_EVENTS, trackEvent } from '@/services/analytics'\nimport { gtmSetChainId, gtmSetSafeAddress } from '@/services/analytics/gtm'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport { useAppDispatch, useAppSelector } from '@/store'\nimport { hasRemainingRelays } from '@/utils/relaying'\nimport { isWalletRejection } from '@/utils/wallets'\nimport ArrowBackIcon from '@mui/icons-material/ArrowBack'\nimport { Box, Button, CircularProgress, Divider, Grid, Tooltip, Typography } from '@mui/material'\nimport { type ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport classnames from 'classnames'\nimport { useRouter } from 'next/router'\nimport { useMemo, useState } from 'react'\nimport ChainIndicator from '@/components/common/ChainIndicator'\nimport NetworkWarning from '../../NetworkWarning'\nimport useAllSafes from '@/features/myAccounts/hooks/useAllSafes'\nimport uniq from 'lodash/uniq'\nimport { selectRpc } from '@/store/settingsSlice'\nimport { AppRoutes } from '@/config/routes'\nimport { type ReplayedSafeProps } from '@safe-global/utils/features/counterfactual/store/types'\nimport { predictAddressBasedOnReplayData } from '@/features/multichain/utils/utils'\nimport { createWeb3ReadOnly, getRpcServiceUrl } from '@/hooks/wallets/web3'\nimport { type DeploySafeProps } from '@safe-global/protocol-kit'\nimport { updateAddressBook } from '../../logic/address-book'\nimport chains from '@/config/chains'\nimport { FEATURES, hasFeature } from '@safe-global/utils/utils/chains'\nimport { PayMethod } from '@safe-global/utils/features/counterfactual/types'\n\nexport const NetworkFee = ({\n  totalFee,\n  chain,\n  isWaived,\n  inline = false,\n}: {\n  totalFee: string\n  chain: ChainInfo | undefined\n  isWaived: boolean\n  inline?: boolean\n}) => {\n  return (\n    <Box className={classnames(css.networkFee, { [css.networkFeeInline]: inline })}>\n      <Typography className={classnames({ [css.strikethrough]: isWaived })}>\n        <b>\n          &asymp; {totalFee} {chain?.nativeCurrency.symbol}\n        </b>\n      </Typography>\n    </Box>\n  )\n}\n\nexport const SafeSetupOverview = ({\n  name,\n  owners,\n  threshold,\n  networks,\n}: {\n  name?: string\n  owners: NamedAddress[]\n  threshold: number\n  networks: ChainInfo[]\n}) => {\n  return (\n    <Grid container spacing={3}>\n      <ReviewRow\n        name={networks.length > 1 ? 'Networks' : 'Network'}\n        value={\n          <Tooltip\n            title={\n              <Box>\n                {networks.map((safeItem) => (\n                  <Box\n                    key={safeItem.chainId}\n                    sx={{\n                      p: '4px 0px',\n                    }}\n                  >\n                    <ChainIndicator chainId={safeItem.chainId} />\n                  </Box>\n                ))}\n              </Box>\n            }\n            arrow\n          >\n            <Box\n              data-testid=\"network-list\"\n              sx={{\n                display: 'inline-block',\n              }}\n            >\n              <NetworkLogosList networks={networks} />\n            </Box>\n          </Tooltip>\n        }\n      />\n      {name && <ReviewRow name=\"Name\" value={<Typography data-testid=\"review-step-safe-name\">{name}</Typography>} />}\n      <ReviewRow\n        name=\"Signers\"\n        value={\n          <Box data-testid=\"review-step-owner-info\" className={css.ownersArray}>\n            {owners.map((owner, index) => (\n              <EthHashInfo\n                address={owner.address}\n                name={owner.name || owner.ens}\n                shortAddress={false}\n                showPrefix={false}\n                showName\n                hasExplorer\n                showCopyButton\n                key={index}\n              />\n            ))}\n          </Box>\n        }\n      />\n      <ReviewRow\n        name=\"Threshold\"\n        value={\n          <Typography data-testid=\"review-step-threshold\">\n            {threshold} out of {owners.length} {owners.length > 1 ? 'signers' : 'signer'}\n          </Typography>\n        }\n      />\n    </Grid>\n  )\n}\n\nconst ReviewStep = ({ data, onSubmit, onBack, setStep }: StepRenderProps<NewSafeFormData>) => {\n  const isWrongChain = useIsWrongChain()\n  useSyncSafeCreationStep(setStep, data.networks)\n  const chain = useCurrentChain()\n  const wallet = useWallet()\n  const dispatch = useAppDispatch()\n  const router = useRouter()\n  const [gasPrice] = useGasPrice()\n  const customRpc = useAppSelector(selectRpc)\n  const [payMethod, setPayMethod] = useState(PayMethod.PayLater)\n  const [executionMethod, setExecutionMethod] = useState(ExecutionMethod.RELAY)\n  const [isCreating, setIsCreating] = useState<boolean>(false)\n  const [submitError, setSubmitError] = useState<string>()\n  const isCounterfactualEnabled = useHasFeature(FEATURES.COUNTERFACTUAL)\n  const isEIP1559 = chain && hasFeature(chain, FEATURES.EIP1559)\n\n  const ownerAddresses = useMemo(() => data.owners.map((owner) => owner.address), [data.owners])\n  const [minRelays] = useLeastRemainingRelays(ownerAddresses)\n\n  const isMultiChainDeployment = data.networks.length > 1\n\n  // Every owner has remaining relays and relay method is selected\n  const canRelay = hasRemainingRelays(minRelays)\n  const willRelay = canRelay && executionMethod === ExecutionMethod.RELAY\n\n  const newSafeProps = useMemo(\n    () =>\n      chain\n        ? createNewUndeployedSafeWithoutSalt(\n            data.safeVersion,\n            {\n              owners: data.owners.map((owner) => owner.address),\n              threshold: data.threshold,\n              paymentReceiver: data.paymentReceiver,\n            },\n            chain,\n          )\n        : undefined,\n    [chain, data.owners, data.safeVersion, data.threshold, data.paymentReceiver],\n  )\n\n  const safePropsForGasEstimation = useMemo(() => {\n    return newSafeProps\n      ? {\n          ...newSafeProps,\n          saltNonce: Date.now().toString(),\n        }\n      : undefined\n  }, [newSafeProps])\n\n  // We estimate with a random nonce as we'll just slightly overestimates like this\n  const { gasLimit } = useEstimateSafeCreationGas(safePropsForGasEstimation, data.safeVersion)\n\n  const maxFeePerGas = gasPrice?.maxFeePerGas\n  const maxPriorityFeePerGas = gasPrice?.maxPriorityFeePerGas\n\n  const walletCanPay = useWalletCanPay({ gasLimit, maxFeePerGas })\n\n  const totalFee = getTotalFeeFormatted(maxFeePerGas, gasLimit, chain)\n\n  const allSafes = useAllSafes()\n  const knownAddresses = useMemo(() => uniq(allSafes?.map((safe) => safe.address)), [allSafes])\n\n  const customRPCs = useAppSelector(selectRpc)\n\n  const handleBack = () => {\n    onBack(data)\n  }\n\n  const handleCreateSafeClick = async () => {\n    try {\n      if (!wallet || !chain || !newSafeProps) return\n\n      setIsCreating(true)\n\n      // Figure out the shared available nonce across chains\n      const nextAvailableNonce =\n        data.saltNonce !== undefined\n          ? data.saltNonce.toString()\n          : await getAvailableSaltNonce(customRPCs, { ...newSafeProps, saltNonce: '0' }, data.networks, knownAddresses)\n\n      const replayedSafeWithNonce = { ...newSafeProps, saltNonce: nextAvailableNonce }\n\n      const customRpcUrl = customRpc[chain.chainId]\n      const provider = createWeb3ReadOnly(chain, customRpcUrl)\n      if (!provider) return\n\n      let safeAddress: string\n\n      // FIXME a new check to indicate ZKsync chain will be added to the config service and available under ChainInfo\n      if (chain.chainId === chains['zksync'] || chain.chainId === chains['lens']) {\n        safeAddress = await computeNewSafeAddress(\n          customRpcUrl || getRpcServiceUrl(chain.rpcUri),\n          {\n            safeAccountConfig: replayedSafeWithNonce.safeAccountConfig,\n            saltNonce: nextAvailableNonce,\n          },\n          chain,\n          replayedSafeWithNonce.safeVersion,\n        )\n      } else {\n        safeAddress = await predictAddressBasedOnReplayData(replayedSafeWithNonce, provider)\n      }\n\n      for (const network of data.networks) {\n        await createSafe(network, replayedSafeWithNonce, safeAddress)\n      }\n\n      // Update addressbook with owners and Safe on all chosen networks\n      dispatch(\n        updateAddressBook(\n          data.networks.map((network) => network.chainId),\n          safeAddress,\n          data.name,\n          data.owners,\n          data.threshold,\n        ),\n      )\n\n      gtmSetChainId(chain.chainId)\n\n      if (isCounterfactualEnabled && payMethod === PayMethod.PayLater) {\n        await router?.push({\n          pathname: AppRoutes.home,\n          query: { safe: `${data.networks[0].shortName}:${safeAddress}` },\n        })\n        safeCreationDispatch(SafeCreationEvent.AWAITING_EXECUTION, {\n          groupKey: CF_TX_GROUP_KEY,\n          safeAddress,\n          networks: data.networks,\n        })\n      }\n    } catch (err) {\n      console.error(err)\n      setSubmitError('Error creating the Safe Account. Please try again later.')\n    } finally {\n      setIsCreating(false)\n    }\n  }\n\n  const createSafe = async (chain: ChainInfo, props: ReplayedSafeProps, safeAddress: string) => {\n    if (!wallet) return\n\n    gtmSetChainId(chain.chainId)\n\n    try {\n      if (isCounterfactualEnabled && payMethod === PayMethod.PayLater) {\n        gtmSetSafeAddress(safeAddress)\n\n        trackEvent({ ...OVERVIEW_EVENTS.PROCEED_WITH_TX, label: 'counterfactual', category: CREATE_SAFE_CATEGORY })\n        replayCounterfactualSafeDeployment(chain.chainId, safeAddress, props, data.name, dispatch, payMethod)\n        trackEvent({ ...CREATE_SAFE_EVENTS.CREATED_SAFE, label: 'counterfactual' })\n        return\n      }\n\n      const options: DeploySafeProps['options'] = isEIP1559\n        ? {\n            maxFeePerGas: maxFeePerGas?.toString(),\n            maxPriorityFeePerGas: maxPriorityFeePerGas?.toString(),\n            gasLimit: gasLimit?.toString(),\n          }\n        : { gasPrice: maxFeePerGas?.toString(), gasLimit: gasLimit?.toString() }\n\n      const onSubmitCallback = async (taskId?: string, txHash?: string) => {\n        // Create a counterfactual Safe\n        replayCounterfactualSafeDeployment(chain.chainId, safeAddress, props, data.name, dispatch, payMethod)\n\n        if (taskId) {\n          safeCreationDispatch(SafeCreationEvent.RELAYING, { groupKey: CF_TX_GROUP_KEY, taskId, safeAddress })\n        }\n\n        if (txHash) {\n          safeCreationDispatch(SafeCreationEvent.PROCESSING, {\n            groupKey: CF_TX_GROUP_KEY,\n            txHash,\n            safeAddress,\n          })\n        }\n\n        trackEvent(CREATE_SAFE_EVENTS.SUBMIT_CREATE_SAFE)\n        trackEvent({ ...OVERVIEW_EVENTS.PROCEED_WITH_TX, label: 'deployment', category: CREATE_SAFE_CATEGORY })\n\n        onSubmit(data)\n      }\n\n      if (willRelay) {\n        const taskId = await relaySafeCreation(chain, props)\n        onSubmitCallback(taskId)\n      } else {\n        await createNewSafe(\n          wallet.provider,\n          props,\n          data.safeVersion,\n          chain,\n          options,\n          (txHash) => {\n            onSubmitCallback(undefined, txHash)\n          },\n          true,\n        )\n      }\n    } catch (_err) {\n      const error = asError(_err)\n      const submitError = isWalletRejection(error)\n        ? 'User rejected signing.'\n        : 'Error creating the Safe Account. Please try again later.'\n      setSubmitError(submitError)\n\n      if (isWalletRejection(error)) {\n        trackEvent(CREATE_SAFE_EVENTS.REJECT_CREATE_SAFE)\n      }\n    }\n\n    setIsCreating(false)\n  }\n\n  const showNetworkWarning =\n    (isWrongChain && payMethod === PayMethod.PayNow && !willRelay && !isMultiChainDeployment) ||\n    (isWrongChain && !isCounterfactualEnabled && !isMultiChainDeployment)\n\n  const isDisabled = showNetworkWarning || isCreating\n\n  return (\n    <>\n      <Box data-testid=\"safe-setup-overview\" className={layoutCss.row}>\n        <SafeSetupOverview name={data.name} owners={data.owners} threshold={data.threshold} networks={data.networks} />\n      </Box>\n      {isCounterfactualEnabled && (\n        <>\n          <Divider />\n          <Box data-testid=\"pay-now-later-message-box\" className={layoutCss.row}>\n            <PayNowPayLater\n              totalFee={totalFee}\n              isMultiChain={isMultiChainDeployment}\n              canRelay={canRelay}\n              payMethod={payMethod}\n              setPayMethod={setPayMethod}\n            />\n\n            {canRelay && payMethod === PayMethod.PayNow && (\n              <>\n                <Grid\n                  container\n                  spacing={3}\n                  sx={{\n                    pt: 2,\n                  }}\n                >\n                  <ReviewRow\n                    value={\n                      <ExecutionMethodSelector\n                        executionMethod={executionMethod}\n                        setExecutionMethod={setExecutionMethod}\n                        relays={minRelays}\n                      />\n                    }\n                  />\n                </Grid>\n              </>\n            )}\n\n            {showNetworkWarning && (\n              <Box sx={{ '&:not(:empty)': { mt: 3 } }}>\n                <NetworkWarning action=\"create a Safe Account\" />\n              </Box>\n            )}\n\n            {payMethod === PayMethod.PayNow && (\n              <Grid item>\n                <Typography\n                  component=\"div\"\n                  sx={{\n                    mt: 2,\n                  }}\n                >\n                  You will have to confirm a transaction and pay an estimated fee of{' '}\n                  <NetworkFee totalFee={totalFee} isWaived={willRelay} chain={chain} inline /> with your connected\n                  wallet\n                </Typography>\n              </Grid>\n            )}\n          </Box>\n        </>\n      )}\n      {!isCounterfactualEnabled && (\n        <>\n          <Divider />\n          <Box\n            className={layoutCss.row}\n            sx={{\n              display: 'flex',\n              flexDirection: 'column',\n              gap: 3,\n            }}\n          >\n            {canRelay && (\n              <Grid container spacing={3}>\n                <ReviewRow\n                  name=\"Execution method\"\n                  value={\n                    <ExecutionMethodSelector\n                      executionMethod={executionMethod}\n                      setExecutionMethod={setExecutionMethod}\n                      relays={minRelays}\n                    />\n                  }\n                />\n              </Grid>\n            )}\n\n            <Grid data-testid=\"network-fee-section\" container spacing={3}>\n              <ReviewRow\n                name=\"Est. network fee\"\n                value={\n                  <>\n                    <NetworkFee totalFee={totalFee} isWaived={willRelay} chain={chain} />\n\n                    {!willRelay && (\n                      <Typography\n                        variant=\"body2\"\n                        sx={{\n                          color: 'text.secondary',\n                          mt: 1,\n                        }}\n                      >\n                        You will have to confirm a transaction with your connected wallet.\n                      </Typography>\n                    )}\n                  </>\n                }\n              />\n            </Grid>\n\n            {showNetworkWarning && <NetworkWarning action=\"create a Safe Account\" />}\n\n            {!walletCanPay && !willRelay && (\n              <ErrorMessage>\n                Your connected wallet doesn&apos;t have enough funds to execute this transaction\n              </ErrorMessage>\n            )}\n          </Box>\n        </>\n      )}\n      <Divider />\n      <Box className={layoutCss.row}>\n        {submitError && <ErrorMessage className={css.errorMessage}>{submitError}</ErrorMessage>}\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'space-between',\n            gap: 3,\n          }}\n        >\n          <Button\n            data-testid=\"back-btn\"\n            variant=\"outlined\"\n            size=\"small\"\n            onClick={handleBack}\n            startIcon={<ArrowBackIcon fontSize=\"small\" />}\n          >\n            Back\n          </Button>\n          <Button\n            data-testid=\"review-step-next-btn\"\n            onClick={handleCreateSafeClick}\n            variant=\"contained\"\n            size=\"stretched\"\n            disabled={isDisabled}\n          >\n            {isCreating ? <CircularProgress size={18} /> : 'Create account'}\n          </Button>\n        </Box>\n      </Box>\n    </>\n  )\n}\n\nexport default ReviewStep\n","import { useEffect } from 'react'\nimport type { StepRenderProps } from '@/components/new-safe/CardStepper/useCardStepper'\nimport type { NewSafeFormData } from '@/components/new-safe/create/index'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport type { ChainInfo } from '@safe-global/safe-gateway-typescript-sdk'\nimport { useCurrentChain } from '@/hooks/useChains'\n\nconst useSyncSafeCreationStep = (setStep: StepRenderProps<NewSafeFormData>['setStep'], networks: ChainInfo[]) => {\n  const wallet = useWallet()\n  const currentChain = useCurrentChain()\n\n  useEffect(() => {\n    // Jump to choose name and network step if there is no pending Safe or if the selected network does not match the connected network\n    if (!wallet || (networks.length === 1 && currentChain?.chainId !== networks[0].chainId)) {\n      setStep(0)\n      return\n    }\n  }, [currentChain?.chainId, networks, setStep, wallet])\n}\n\nexport default useSyncSafeCreationStep\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"styles_row__UGXjL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ownersArray\":\"styles_ownersArray__Lwugg\",\"strikethrough\":\"styles_strikethrough__dsfcO\",\"errorMessage\":\"styles_errorMessage__EgiJf\",\"networkFee\":\"styles_networkFee__s25eL\",\"networkFeeInline\":\"styles_networkFeeInline__o4u72\"};","import { useWeb3ReadOnly } from '@/hooks/wallets/web3'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport useAsync from '@safe-global/utils/hooks/useAsync'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport { estimateSafeCreationGas } from '@/components/new-safe/create/logic'\nimport { type SafeVersion } from '@safe-global/safe-core-sdk-types'\nimport { type UndeployedSafeProps } from '@safe-global/utils/features/counterfactual/store/types'\n\nexport const useEstimateSafeCreationGas = (\n  undeployedSafe: UndeployedSafeProps | undefined,\n  safeVersion?: SafeVersion,\n): {\n  gasLimit?: bigint\n  gasLimitError?: Error\n  gasLimitLoading: boolean\n} => {\n  const web3ReadOnly = useWeb3ReadOnly()\n  const chain = useCurrentChain()\n  const wallet = useWallet()\n\n  const [gasLimit, gasLimitError, gasLimitLoading] = useAsync<bigint>(() => {\n    if (!wallet?.address || !chain || !web3ReadOnly || !undeployedSafe) return\n\n    return estimateSafeCreationGas(chain, web3ReadOnly, wallet.address, undeployedSafe, safeVersion)\n  }, [wallet?.address, chain, web3ReadOnly, undeployedSafe, safeVersion])\n\n  return { gasLimit, gasLimitError, gasLimitLoading }\n}\n"],"names":["name","value","ReviewRow","Grid","item","xs","Typography","variant","getAvailableSaltNonce","customRpcs","replayedSafe","chainInfos","knownSafeAddresses","isAvailableOnAllChains","allRPCs","map","rpcUrl","chain","chainId","getRpcServiceUrl","rpcUri","safeAddress","find","rpc","chainName","web3ReadOnly","createWeb3ReadOnly","chains","computeNewSafeAddress","safeAccountConfig","saltNonce","safeVersion","predictAddressBasedOnReplayData","some","knownAddress","sameAddress","isSmartContract","Number","toString","totalFee","canRelay","PayNowPayLater","isMultiChain","payMethod","setPayMethod","useCurrentChain","fontWeight","ErrorMessage","level","b","List","ListItem","disableGutters","ListItemIcon","className","css","CheckRoundedIcon","fontSize","color","FormControl","fullWidth","RadioGroup","row","onChange","onChoosePayMethod","newPayMethod","FormControlLabel","data-testid","sx","flex","PayMethod","PayNow","classnames","label","nativeCurrency","symbol","control","Radio","PayLater","NetworkFee","isWaived","inline","Box","owners","threshold","networks","container","spacing","length","Tooltip","title","safeItem","p","ChainIndicator","arrow","display","NetworkLogosList","owner","index","EthHashInfo","address","ens","shortAddress","showPrefix","showName","hasExplorer","showCopyButton","data","ReviewStep","onSubmit","onBack","setStep","isWrongChain","useIsWrongChain","useSyncSafeCreationStep","wallet","useWallet","dispatch","useAppDispatch","router","useRouter","gasPrice","useGasPrice","customRpc","useAppSelector","selectRpc","useState","executionMethod","setExecutionMethod","ExecutionMethod","RELAY","isCreating","setIsCreating","submitError","setSubmitError","isCounterfactualEnabled","useHasFeature","FEATURES","COUNTERFACTUAL","isEIP1559","hasFeature","EIP1559","ownerAddresses","useMemo","minRelays","useLeastRemainingRelays","isMultiChainDeployment","hasRemainingRelays","willRelay","newSafeProps","createNewUndeployedSafeWithoutSalt","paymentReceiver","undefined","safePropsForGasEstimation","Date","now","gasLimit","useEstimateSafeCreationGas","maxFeePerGas","maxPriorityFeePerGas","walletCanPay","useWalletCanPay","getTotalFeeFormatted","allSafes","useAllSafes","knownAddresses","uniq","safe","customRPCs","handleCreateSafeClick","nextAvailableNonce","replayedSafeWithNonce","customRpcUrl","provider","network","createSafe","updateAddressBook","gtmSetChainId","push","pathname","AppRoutes","home","query","shortName","safeCreationDispatch","SafeCreationEvent","AWAITING_EXECUTION","groupKey","CF_TX_GROUP_KEY","err","console","error","props","gtmSetSafeAddress","trackEvent","OVERVIEW_EVENTS","PROCEED_WITH_TX","category","CREATE_SAFE_CATEGORY","replayCounterfactualSafeDeployment","CREATE_SAFE_EVENTS","CREATED_SAFE","options","onSubmitCallback","taskId","txHash","RELAYING","PROCESSING","SUBMIT_CREATE_SAFE","relaySafeCreation","createNewSafe","_err","asError","isWalletRejection","REJECT_CREATE_SAFE","showNetworkWarning","isDisabled","layoutCss","SafeSetupOverview","Divider","pt","ExecutionMethodSelector","relays","mt","NetworkWarning","action","component","flexDirection","gap","justifyContent","Button","size","onClick","handleBack","startIcon","ArrowBackIcon","disabled","CircularProgress","currentChain","useEffect","undeployedSafe","useWeb3ReadOnly","gasLimitError","gasLimitLoading","useAsync","estimateSafeCreationGas"],"sourceRoot":"","ignoreList":[]}