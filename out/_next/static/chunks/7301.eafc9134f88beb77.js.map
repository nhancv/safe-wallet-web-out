{"version":3,"file":"static/chunks/7301.eafc9134f88beb77.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/WidgetDisclaimer/index.tsx","webpack://_N_E/./src/hooks/useConsent.ts","webpack://_N_E/./src/features/stake/hooks/useGetStakeWidgetUrl.ts","webpack://_N_E/./src/features/stake/components/StakingWidget/index.tsx","webpack://_N_E/./src/features/stake/components/StakePage/index.tsx","webpack://_N_E/./src/hooks/useBlockedAddress.ts","webpack://_N_E/./src/components/common/WidgetDisclaimer/styles.module.css"],"sourcesContent":["import ExternalLink from '@/components/common/ExternalLink'\nimport { AppRoutes } from '@/config/routes'\nimport { Typography } from '@mui/material'\n\nimport css from './styles.module.css'\n\nconst linkSx = {\n  textDecoration: 'none',\n}\n\nconst WidgetDisclaimer = ({ widgetName }: { widgetName: string }) => (\n  <div className={css.disclaimerContainer}>\n    <div className={css.disclaimerInner}>\n      <Typography mb={4} mt={4}>\n        You are now accessing a third party widget.\n      </Typography>\n\n      <Typography mb={4}>\n        Please note that we do not own, control, maintain or audit the {widgetName}. Use of the widget is subject to\n        third party terms & conditions. We are not liable for any loss you may suffer in connection with interacting\n        with the widget, which is at your own risk.\n      </Typography>\n\n      <Typography mb={4}>\n        Our{' '}\n        <ExternalLink href={AppRoutes.terms} sx={linkSx}>\n          terms\n        </ExternalLink>{' '}\n        contain more detailed provisions binding on you relating to such third party content.\n      </Typography>\n      <Typography>\n        By clicking &quot;continue&quot; you re-confirm to have read and understood our{' '}\n        <ExternalLink href={AppRoutes.terms} sx={linkSx}>\n          terms\n        </ExternalLink>{' '}\n        and this message, and agree to them.\n      </Typography>\n    </div>\n  </div>\n)\n\nexport default WidgetDisclaimer\n","import useLocalStorage from '@/services/local-storage/useLocalStorage'\nimport { useCallback } from 'react'\n\nconst useConsent = (storageKey: string) => {\n  const [isConsentAccepted = false, setIsConsentAccepted] = useLocalStorage<boolean>(storageKey)\n\n  const onAccept = useCallback(() => {\n    setIsConsentAccepted(true)\n  }, [setIsConsentAccepted])\n\n  return {\n    isConsentAccepted,\n    onAccept,\n  }\n}\n\nexport default useConsent\n","import { useDarkMode } from '@/hooks/useDarkMode'\nimport useChainId from '@/hooks/useChainId'\nimport useChains from '@/hooks/useChains'\nimport { useMemo } from 'react'\nimport { WIDGET_PRODUCTION_URL, WIDGET_TESTNET_URL } from '@/features/stake/constants'\n\nexport const useGetStakeWidgetUrl = (asset?: string) => {\n  let url = WIDGET_PRODUCTION_URL\n  const isDarkMode = useDarkMode()\n  const currentChainId = useChainId()\n  const { configs } = useChains()\n  const testChains = useMemo(() => configs.filter((chain) => chain.isTestnet), [configs])\n  if (testChains.some((chain) => chain.chainId === currentChainId)) {\n    url = WIDGET_TESTNET_URL\n  }\n  const params = new URLSearchParams()\n  params.append('theme', isDarkMode ? 'dark' : 'light')\n\n  if (asset) {\n    params.append('asset', asset)\n  }\n\n  return url + '?' + params.toString()\n}\n","import { useMemo } from 'react'\nimport AppFrame from '@/components/safe-apps/AppFrame'\nimport { getEmptySafeApp } from '@/components/safe-apps/utils'\nimport { useGetStakeWidgetUrl } from '@/features/stake/hooks/useGetStakeWidgetUrl'\nimport { widgetAppData } from '@/features/stake/constants'\nimport { useDarkMode } from '@/hooks/useDarkMode'\n\nconst StakingWidget = ({ asset }: { asset?: string }) => {\n  const url = useGetStakeWidgetUrl(asset)\n  const isDarkMode = useDarkMode()\n\n  const appData = useMemo(\n    () => ({\n      ...getEmptySafeApp(),\n      ...widgetAppData,\n      iconUrl: isDarkMode ? '/images/common/stake-light.svg' : '/images/common/stake.svg',\n      url,\n    }),\n    [url, isDarkMode],\n  )\n\n  return (\n    <AppFrame\n      appUrl={appData.url}\n      allowedFeaturesList=\"clipboard-read; clipboard-write\"\n      safeAppFromManifest={appData}\n      isNativeEmbed\n    />\n  )\n}\n\nexport default StakingWidget\n","import { Stack } from '@mui/material'\nimport Disclaimer from '@/components/common/Disclaimer'\nimport WidgetDisclaimer from '@/components/common/WidgetDisclaimer'\nimport StakingWidget from '../StakingWidget'\nimport { useRouter } from 'next/router'\nimport BlockedAddress from '@/components/common/BlockedAddress'\nimport useBlockedAddress from '@/hooks/useBlockedAddress'\nimport useConsent from '@/hooks/useConsent'\nimport { STAKE_CONSENT_STORAGE_KEY } from '@/features/stake/constants'\n\nconst StakePage = () => {\n  const { isConsentAccepted, onAccept } = useConsent(STAKE_CONSENT_STORAGE_KEY)\n  const router = useRouter()\n  const { asset } = router.query\n\n  const blockedAddress = useBlockedAddress()\n\n  if (blockedAddress) {\n    return (\n      <Stack\n        direction=\"column\"\n        sx={{\n          alignItems: 'center',\n          justifyContent: 'center',\n          flex: 1,\n        }}\n      >\n        <BlockedAddress address={blockedAddress} featureTitle=\"stake feature with Kiln\" />\n      </Stack>\n    )\n  }\n\n  return (\n    <>\n      {isConsentAccepted === undefined ? null : isConsentAccepted ? (\n        <StakingWidget asset={String(asset)} />\n      ) : (\n        <Stack\n          direction=\"column\"\n          sx={{\n            alignItems: 'center',\n            justifyContent: 'center',\n            flex: 1,\n          }}\n        >\n          <Disclaimer\n            title=\"Note\"\n            content={<WidgetDisclaimer widgetName=\"Stake Widget by Kiln\" />}\n            onAccept={onAccept}\n            buttonText=\"Continue\"\n          />\n        </Stack>\n      )}\n    </>\n  )\n}\n\nexport default StakePage\n","import useSafeInfo from '@/hooks/useSafeInfo'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { useGetIsSanctionedQuery } from '@/store/api/ofac'\nimport { skipToken } from '@reduxjs/toolkit/query/react'\nimport { getKeyWithTrueValue } from '@/utils/helpers'\n\n/**\n * Checks the connected wallet and current safe address\n * against OFAC and returns either address if on the list\n */\nconst useBlockedAddress = () => {\n  const { safeAddress } = useSafeInfo()\n  const wallet = useWallet()\n\n  const { data: isSafeAddressBlocked } = useGetIsSanctionedQuery(safeAddress || skipToken)\n  const { data: isWalletAddressBlocked } = useGetIsSanctionedQuery(wallet?.address || skipToken)\n  const blockedAddresses = {\n    [safeAddress]: !!isSafeAddressBlocked,\n    [wallet?.address || '']: !!isWalletAddressBlocked,\n  }\n\n  return getKeyWithTrueValue(blockedAddresses)\n}\n\nexport default useBlockedAddress\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"disclaimerContainer\":\"styles_disclaimerContainer__rduxs\",\"disclaimerInner\":\"styles_disclaimerInner__LMD0U\"};"],"names":["linkSx","textDecoration","widgetName","WidgetDisclaimer","div","className","css","Typography","mb","mt","ExternalLink","href","AppRoutes","terms","sx","isConsentAccepted","setIsConsentAccepted","useLocalStorage","storageKey","useConsent","onAccept","useCallback","useGetStakeWidgetUrl","url","WIDGET_PRODUCTION_URL","isDarkMode","useDarkMode","currentChainId","useChainId","configs","useChains","testChains","useMemo","filter","chain","isTestnet","some","chainId","WIDGET_TESTNET_URL","URLSearchParams","params","append","asset","toString","appData","StakingWidget","getEmptySafeApp","widgetAppData","iconUrl","AppFrame","appUrl","allowedFeaturesList","safeAppFromManifest","isNativeEmbed","StakePage","STAKE_CONSENT_STORAGE_KEY","useRouter","query","blockedAddress","useBlockedAddress","Stack","direction","alignItems","justifyContent","flex","BlockedAddress","address","featureTitle","undefined","String","Disclaimer","title","content","buttonText","safeAddress","useSafeInfo","wallet","useWallet","data","isSafeAddressBlocked","useGetIsSanctionedQuery","skipToken","isWalletAddressBlocked","blockedAddresses","getKeyWithTrueValue"],"sourceRoot":"","ignoreList":[]}