{"version":3,"file":"static/chunks/8212-97c9959fa37afb97.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/hooks/messages/useIsSafeMessageSignableBy.ts","webpack://_N_E/./src/components/safe-messages/SignMsgButton/index.tsx","webpack://_N_E/./src/components/safe-messages/MsgDetails/index.tsx","webpack://_N_E/./src/components/safe-messages/MsgType/index.tsx","webpack://_N_E/./src/hooks/messages/useIsSafeMessagePending.ts","webpack://_N_E/./src/hooks/messages/useSafeMessageStatus.ts","webpack://_N_E/./src/components/safe-messages/MsgSummary/index.tsx","webpack://_N_E/./src/components/safe-messages/MsgListItem/ExpandableMsgItem.tsx"],"sourcesContent":["export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\n\nimport useIsSafeOwner from '@/hooks/useIsSafeOwner'\n\nconst useIsSafeMessageSignableBy = (message: MessageItem, walletAddress: string): boolean => {\n  const isSafeOwner = useIsSafeOwner()\n  return isSafeOwner && message.confirmations.every(({ owner }) => owner.value !== walletAddress)\n}\n\nexport default useIsSafeMessageSignableBy\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { Button, Tooltip } from '@mui/material'\nimport { useContext } from 'react'\nimport type { SyntheticEvent, ReactElement } from 'react'\n\nimport useWallet from '@/hooks/wallets/useWallet'\nimport Track from '@/components/common/Track'\nimport { MESSAGE_EVENTS } from '@/services/analytics/events/txList'\nimport useIsSafeMessageSignableBy from '@/hooks/messages/useIsSafeMessageSignableBy'\nimport { TxModalContext } from '@/components/tx-flow'\nimport { SignMessageFlow } from '@/components/tx-flow/flows'\nimport CheckWallet from '@/components/common/CheckWallet'\n\nconst SignMsgButton = ({ msg, compact = false }: { msg: MessageItem; compact?: boolean }): ReactElement => {\n  const wallet = useWallet()\n  const isSignable = useIsSafeMessageSignableBy(msg, wallet?.address || '')\n  const { setTxFlow } = useContext(TxModalContext)\n\n  const onClick = (e: SyntheticEvent) => {\n    e.stopPropagation()\n    setTxFlow(<SignMessageFlow {...msg} origin={msg.origin || undefined} />)\n  }\n\n  return (\n    <CheckWallet>\n      {(isOk) => (\n        <Tooltip title={isOk && !isSignable ? \"You've already signed this message\" : ''}>\n          <span>\n            <Track {...MESSAGE_EVENTS.SIGN}>\n              <Button\n                onClick={onClick}\n                variant={isSignable ? 'contained' : 'outlined'}\n                disabled={!isOk || !isSignable}\n                size={compact ? 'small' : 'stretched'}\n                sx={compact ? { py: 0.8 } : undefined}\n              >\n                Sign\n              </Button>\n            </Track>\n          </span>\n        </Tooltip>\n      )}\n    </CheckWallet>\n  )\n}\n\nexport default SignMsgButton\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { useMemo, type ReactElement } from 'react'\nimport { Accordion, AccordionSummary, Typography, AccordionDetails, Box } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport CodeIcon from '@mui/icons-material/Code'\nimport classNames from 'classnames'\nimport { ErrorBoundary } from '@sentry/react'\n\nimport { formatDateTime } from '@safe-global/utils/utils/date'\nimport EthHashInfo from '@/components/common/EthHashInfo'\nimport { InfoDetails } from '@/components/transactions/InfoDetails'\nimport { generateDataRowValue, TxDataRow } from '@/components/transactions/TxDetails/Summary/TxDataRow'\nimport MsgSigners from '@/components/safe-messages/MsgSigners'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport SignMsgButton from '@/components/safe-messages/SignMsgButton'\nimport { generateSafeMessageMessage, isEIP712TypedData } from '@safe-global/utils/utils/safe-messages'\n\nimport txDetailsCss from '@/components/transactions/TxDetails/styles.module.css'\nimport singleTxDecodedCss from '@/components/transactions/TxDetails/TxData/DecodedData/SingleTxDecoded/styles.module.css'\nimport infoDetailsCss from '@/components/transactions/InfoDetails/styles.module.css'\nimport { DecodedMsg } from '../DecodedMsg'\nimport CopyButton from '@/components/common/CopyButton'\nimport NamedAddressInfo from '@/components/common/NamedAddressInfo'\nimport MsgShareLink from '../MsgShareLink'\n\nconst MsgDetails = ({ msg }: { msg: MessageItem }): ReactElement => {\n  const wallet = useWallet()\n  const isConfirmed = msg.status === 'CONFIRMED'\n  const safeMessage = useMemo(() => {\n    try {\n      return generateSafeMessageMessage(msg.message)\n    } catch (e) {\n      return ''\n    }\n  }, [msg.message])\n  const verifyingContract = isEIP712TypedData(msg.message) ? msg.message.domain.verifyingContract : undefined\n\n  return (\n    <div className={txDetailsCss.container}>\n      <div className={txDetailsCss.details}>\n        <div className={txDetailsCss.shareLink}>\n          <MsgShareLink safeMessageHash={msg.messageHash} />\n        </div>\n        <div className={txDetailsCss.txData}>\n          <InfoDetails title=\"Created by:\">\n            <EthHashInfo\n              address={msg.proposedBy.value || ''}\n              name={msg.proposedBy.name}\n              customAvatar={msg.proposedBy.logoUri || undefined}\n              shortAddress={false}\n              showCopyButton\n              hasExplorer\n            />\n          </InfoDetails>\n        </div>\n\n        {verifyingContract && (\n          <div className={txDetailsCss.txData}>\n            <InfoDetails title=\"Verifying contract:\">\n              <NamedAddressInfo address={verifyingContract} shortAddress={false} showCopyButton hasExplorer />\n            </InfoDetails>\n          </div>\n        )}\n\n        <div className={txDetailsCss.txData}>\n          <InfoDetails\n            title={\n              <>\n                Message <CopyButton text={JSON.stringify(msg.message, null, 2)} />\n              </>\n            }\n          >\n            <ErrorBoundary fallback={<div>Error decoding message</div>}>\n              <DecodedMsg message={msg.message} />\n            </ErrorBoundary>\n          </InfoDetails>\n        </div>\n\n        <div className={txDetailsCss.txSummary}>\n          <TxDataRow title=\"Created\">{formatDateTime(msg.creationTimestamp)}</TxDataRow>\n          <TxDataRow title=\"Last modified\">{formatDateTime(msg.modifiedTimestamp)}</TxDataRow>\n          <TxDataRow title=\"Message hash\">{generateDataRowValue(msg.messageHash, 'hash')}</TxDataRow>\n          {safeMessage && <TxDataRow title=\"SafeMessage\">{generateDataRowValue(safeMessage, 'hash')}</TxDataRow>}\n        </div>\n\n        {msg.preparedSignature && (\n          <div className={classNames(txDetailsCss.txSummary, txDetailsCss.multiSend)}>\n            <TxDataRow title=\"Prepared signature:\">{generateDataRowValue(msg.preparedSignature, 'hash')}</TxDataRow>\n          </div>\n        )}\n\n        <div className={txDetailsCss.multiSend}>\n          {msg.confirmations.map((confirmation, i) => (\n            <Accordion\n              variant=\"elevation\"\n              key={confirmation.signature}\n              defaultExpanded={confirmation.owner.value === wallet?.address}\n            >\n              <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                <div className={singleTxDecodedCss.summary}>\n                  <CodeIcon />\n                  <Typography>{`Confirmation ${i + 1}`}</Typography>\n                </div>\n              </AccordionSummary>\n\n              <AccordionDetails>\n                <div className={infoDetailsCss.container}>\n                  <EthHashInfo\n                    address={confirmation.owner.value || ''}\n                    name={confirmation.owner.name}\n                    customAvatar={confirmation.owner.logoUri || undefined}\n                    shortAddress={false}\n                    showCopyButton\n                    hasExplorer\n                  />\n                </div>\n                <TxDataRow title=\"Signature:\">\n                  <EthHashInfo address={confirmation.signature} showAvatar={false} showCopyButton />\n                </TxDataRow>\n              </AccordionDetails>\n            </Accordion>\n          ))}\n        </div>\n      </div>\n      <div className={txDetailsCss.txSigners}>\n        <MsgSigners msg={msg} />\n        {wallet && !isConfirmed && (\n          <Box display=\"flex\" alignItems=\"center\" justifyContent=\"center\" gap={1} mt={2}>\n            <SignMsgButton msg={msg} />\n          </Box>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default MsgDetails\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { Box, SvgIcon } from '@mui/material'\nimport RequiredIcon from '@/public/images/messages/required.svg'\nimport ImageFallback from '@/components/common/ImageFallback'\nimport txTypeCss from '@/components/transactions/TxType/styles.module.css'\nimport { isEIP712TypedData } from '@safe-global/utils/utils/safe-messages'\n\nconst FALLBACK_LOGO_URI = '/images/transactions/custom.svg'\nconst MAX_TRIMMED_LENGTH = 20\n\nconst getMessageName = (msg: MessageItem) => {\n  if (msg.name != null) return msg.name\n\n  if (isEIP712TypedData(msg.message)) {\n    return msg.message.domain?.name || ''\n  }\n\n  const firstLine = msg.message.split('\\n')[0]\n  let trimmed = firstLine.slice(0, MAX_TRIMMED_LENGTH)\n  if (trimmed.length < firstLine.length) {\n    trimmed += '…'\n  }\n  return trimmed\n}\n\nconst MsgType = ({ msg }: { msg: MessageItem }) => {\n  return (\n    <Box className={txTypeCss.txType}>\n      {msg.logoUri ? (\n        <ImageFallback\n          src={msg.logoUri || FALLBACK_LOGO_URI}\n          fallbackSrc={FALLBACK_LOGO_URI}\n          alt=\"Message type\"\n          width={16}\n          height={16}\n        />\n      ) : (\n        <SvgIcon component={RequiredIcon} viewBox=\"0 0 32 32\" fontSize=\"small\" />\n      )}\n      {getMessageName(msg)}\n    </Box>\n  )\n}\n\nexport default MsgType\n","import { useAppSelector } from '@/store'\nimport { selectPendingSafeMessageByHash } from '@/store/pendingSafeMessagesSlice'\n\nconst useIsSafeMessagePending = (messageHash: string): boolean => {\n  return useAppSelector((state) => selectPendingSafeMessageByHash(state, messageHash))\n}\n\nexport default useIsSafeMessagePending\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport type { SafeMessageStatus } from '@safe-global/store/gateway/types'\n\nimport useIsSafeMessagePending from './useIsSafeMessagePending'\nimport useWallet from '../wallets/useWallet'\n\nconst ConfirmingStatus = 'CONFIRMING'\nconst AwaitingConfirmationsStatus = 'AWAITING_CONFIRMATIONS'\nconst ConfirmedStatus = 'CONFIRMED'\nconst NeedsConfirmationStatus = 'NEEDS_CONFIRMATION'\ntype SafeMessageLocalStatus =\n  | SafeMessageStatus\n  | typeof ConfirmingStatus\n  | typeof AwaitingConfirmationsStatus\n  | typeof ConfirmedStatus\n  | typeof NeedsConfirmationStatus\n\nconst STATUS_LABELS: { [_key in SafeMessageLocalStatus]: string } = {\n  [ConfirmingStatus]: 'Confirming',\n  [AwaitingConfirmationsStatus]: 'Awaiting confirmations',\n  [ConfirmedStatus]: 'Confirmed',\n  [NeedsConfirmationStatus]: 'Needs confirmation',\n}\n\nconst useSafeMessageStatus = (msg: MessageItem) => {\n  const isPending = useIsSafeMessagePending(msg.messageHash)\n  const wallet = useWallet()\n\n  if (isPending) {\n    return STATUS_LABELS[ConfirmingStatus]\n  }\n\n  const hasWalletSigned = wallet && msg.confirmations.some(({ owner }) => owner.value === wallet.address)\n  const isConfirmed = msg.status === ConfirmedStatus\n  if (hasWalletSigned && !isConfirmed) {\n    return STATUS_LABELS[AwaitingConfirmationsStatus]\n  }\n\n  return STATUS_LABELS[msg.status]\n}\n\nexport default useSafeMessageStatus\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport type { SafeMessageStatus } from '@safe-global/store/gateway/types'\nimport { Box, CircularProgress, type Palette, Typography } from '@mui/material'\nimport type { ReactElement } from 'react'\n\nimport DateTime from '@/components/common/DateTime'\nimport MsgType from '@/components/safe-messages/MsgType'\nimport SignMsgButton from '@/components/safe-messages/SignMsgButton'\nimport useSafeMessageStatus from '@/hooks/messages/useSafeMessageStatus'\nimport TxConfirmations from '@/components/transactions/TxConfirmations'\n\nimport css from '@/components/transactions/TxSummary/styles.module.css'\nimport useIsSafeMessagePending from '@/hooks/messages/useIsSafeMessagePending'\nimport { isEIP712TypedData } from '@safe-global/utils/utils/safe-messages'\n\nconst getStatusColor = (value: SafeMessageStatus, palette: Palette): string => {\n  switch (value) {\n    case 'CONFIRMED':\n      return palette.success.main\n    case 'NEEDS_CONFIRMATION':\n      return palette.warning.main\n    default:\n      return palette.text.primary\n  }\n}\n\nconst MsgSummary = ({ msg }: { msg: MessageItem }): ReactElement => {\n  const { confirmationsSubmitted, confirmationsRequired } = msg\n  const txStatusLabel = useSafeMessageStatus(msg)\n  const isConfirmed = msg.status === 'CONFIRMED'\n  const isPending = useIsSafeMessagePending(msg.messageHash)\n  let type = ''\n  if (isEIP712TypedData(msg.message)) {\n    type = (msg.message as unknown as { primaryType: string }).primaryType\n  }\n\n  return (\n    <Box className={[css.gridContainer, css.message].join(' ')}>\n      <Box gridArea=\"type\">\n        <MsgType msg={msg} />\n      </Box>\n\n      <Box gridArea=\"info\">{type || 'Signature'}</Box>\n\n      <Box gridArea=\"date\" className={css.date}>\n        <DateTime value={msg.modifiedTimestamp} />\n      </Box>\n\n      <Box gridArea=\"confirmations\">\n        {confirmationsRequired > 0 && (\n          <TxConfirmations\n            submittedConfirmations={confirmationsSubmitted}\n            requiredConfirmations={confirmationsRequired}\n          />\n        )}\n      </Box>\n\n      <Box gridArea=\"status\">\n        {isConfirmed || isPending ? (\n          <Typography\n            variant=\"caption\"\n            fontWeight=\"bold\"\n            display=\"flex\"\n            alignItems=\"center\"\n            gap={1}\n            sx={{ color: ({ palette }) => getStatusColor(msg.status, palette) }}\n          >\n            {isPending && <CircularProgress size={14} color=\"inherit\" />}\n\n            {txStatusLabel}\n          </Typography>\n        ) : (\n          <SignMsgButton msg={msg} compact />\n        )}\n      </Box>\n    </Box>\n  )\n}\n\nexport default MsgSummary\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { Accordion, AccordionDetails, AccordionSummary, Box } from '@mui/material'\nimport ExpandMoreIcon from '@mui/icons-material/ExpandMore'\nimport type { ReactElement } from 'react'\nimport { ErrorBoundary } from '@sentry/react'\n\nimport MsgDetails from '@/components/safe-messages/MsgDetails'\nimport MsgSummary from '@/components/safe-messages/MsgSummary'\n\nimport txListItemCss from '@/components/transactions/TxListItem/styles.module.css'\n\nconst ExpandableMsgItem = ({ msg, expanded = false }: { msg: MessageItem; expanded?: boolean }): ReactElement => {\n  return (\n    <Accordion\n      defaultExpanded={expanded}\n      disableGutters\n      elevation={0}\n      className={txListItemCss.accordion}\n      sx={{ border: 'none', '&:before': { display: 'none' } }}\n    >\n      <AccordionSummary\n        data-testid=\"message-item\"\n        expandIcon={<ExpandMoreIcon />}\n        sx={{ justifyContent: 'flex-start', overflowX: 'auto' }}\n      >\n        <MsgSummary msg={msg} />\n      </AccordionSummary>\n\n      <AccordionDetails sx={{ padding: 0 }}>\n        <ErrorBoundary fallback={<Box sx={{ p: 2 }}>Failed to render message details</Box>}>\n          <MsgDetails msg={msg} />\n        </ErrorBoundary>\n      </AccordionDetails>\n    </Accordion>\n  )\n}\n\nexport default ExpandableMsgItem\n"],"names":["message","walletAddress","isSafeOwner","useIsSafeOwner","confirmations","every","useIsSafeMessageSignableBy","owner","value","msg","compact","SignMsgButton","wallet","useWallet","isSignable","address","setTxFlow","useContext","TxModalContext","onClick","e","stopPropagation","SignMessageFlow","origin","undefined","CheckWallet","Tooltip","title","isOk","span","Track","MESSAGE_EVENTS","SIGN","Button","variant","disabled","size","sx","py","isConfirmed","MsgDetails","status","safeMessage","useMemo","generateSafeMessageMessage","verifyingContract","isEIP712TypedData","domain","div","className","txDetailsCss","MsgShareLink","safeMessageHash","messageHash","InfoDetails","EthHashInfo","proposedBy","name","customAvatar","logoUri","shortAddress","showCopyButton","hasExplorer","NamedAddressInfo","CopyButton","text","JSON","stringify","ErrorBoundary","fallback","DecodedMsg","TxDataRow","formatDateTime","creationTimestamp","modifiedTimestamp","generateDataRowValue","preparedSignature","classNames","map","confirmation","i","Accordion","defaultExpanded","AccordionSummary","expandIcon","ExpandMoreIcon","singleTxDecodedCss","CodeIcon","Typography","AccordionDetails","infoDetailsCss","signature","showAvatar","MsgSigners","Box","display","alignItems","justifyContent","gap","mt","FALLBACK_LOGO_URI","getMessageName","firstLine","split","trimmed","slice","MAX_TRIMMED_LENGTH","length","MsgType","txTypeCss","ImageFallback","src","fallbackSrc","alt","width","height","SvgIcon","component","RequiredIcon","viewBox","fontSize","useAppSelector","selectPendingSafeMessageByHash","state","ConfirmingStatus","useIsSafeMessagePending","AwaitingConfirmationsStatus","ConfirmedStatus","STATUS_LABELS","isPending","useSafeMessageStatus","hasWalletSigned","some","getStatusColor","palette","success","main","warning","primary","MsgSummary","confirmationsSubmitted","confirmationsRequired","txStatusLabel","type","primaryType","css","join","gridArea","DateTime","TxConfirmations","submittedConfirmations","requiredConfirmations","fontWeight","color","CircularProgress","expanded","ExpandableMsgItem","disableGutters","elevation","txListItemCss","border","data-testid","overflowX","padding","p"],"sourceRoot":"","ignoreList":[]}