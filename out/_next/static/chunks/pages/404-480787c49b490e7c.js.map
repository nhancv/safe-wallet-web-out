{"version":3,"file":"static/chunks/pages/404-480787c49b490e7c.js","mappings":"gFACA,4CACA,OACA,WACA,OAAe,EAAQ,KAA4B,CACnD,EACA,SAFsB,0HCEf,IAAMA,EAAkB,IAC7B,GAAM,UAAEC,CAAQ,QAAEC,CAAM,CAAE,CAAGC,EACvBC,EAAK,8BACL,EAAGC,EAAS,CAAGJ,EAASK,KAAK,CAACF,IAAO,EAAE,CAE7C,GAAIC,EAAU,CACZ,IAAIE,EAAUN,EAASO,OAAO,CAACJ,EAAI,KAAOK,EAAAA,CAASA,CAACC,IAAI,CACpDC,EAAYT,EAAS,IAAMA,EAAOU,KAAK,CAAC,GAAK,GAGjD,GAAIL,EAAQM,UAAU,CAACJ,EAAAA,CAASA,CAACK,YAAY,CAACC,KAAK,GAAG,CAC/BC,OAAOC,MAAM,CAACR,EAAAA,CAASA,CAACK,YAAY,EAAEI,IAAI,CAAC,GAAWC,IAAUZ,GAClE,KACJA,EAAb,IAAMa,EAAAA,QAAOb,EAAAA,EAAQD,KAAK,CAAC,6BAAdC,KAAAA,IAAAA,EAAAA,KAAAA,EAAAA,CAA0C,CAAC,EAAE,CAC1DA,EAAUE,EAAAA,CAASA,CAACK,YAAY,CAACO,EAAE,CACnCV,EAAY,GAAmBS,MAAAA,CAAhBT,EAAU,QAAW,OAALS,EACjC,CAGF,GAAIb,IAAYN,EACd,MAAO,EADiB,CACEI,MAAAA,CAAhBE,EAAQ,UAAmBI,MAAAA,CAAXN,GAAqB,OAAVM,EAEzC,CACF,EAAC,EAE2B,KAC1B,IAAMW,EAASC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,EAkBXC,CAjBP,CAACC,EAAeC,EAAiB,CAAGC,CAAAA,CAiBpBH,CAjBoBG,CAiBpB,CAjBoBA,QAAAA,CAAQA,EAAU,GAc5D,MAZAC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,GAAwB,aAApB,OAAOzB,SAA0B,OAErC,IAAM0B,EAAc7B,EAAgBG,UAEhC0B,EACFP,EAAOd,OAAO,CAACqB,CADA,EAGfH,GAAiB,EAErB,EAAG,CAACJ,EAAO,EAEJ,UAACQ,OAAAA,UAAM,CAACL,GAAiB,UAACM,KAAAA,UAAG,0BACtC","sources":["webpack://_N_E/?1666","webpack://_N_E/./src/pages/404.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/404\",\n      function () {\n        return require(\"private-next-pages/404.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/404\"])\n      });\n    }\n  ","import { useEffect, useState } from 'react'\nimport type { NextPage } from 'next'\nimport { useRouter } from 'next/router'\nimport { AppRoutes } from '@/config/routes'\n\n// Rewrite the URL to put the Safe address into the query.\nexport const _getRedirectUrl = (location: Location): string | undefined => {\n  const { pathname, search } = location\n  const re = /^\\/([^/]+?:0x[0-9a-f]{40})/i\n  const [, pathSafe] = pathname.match(re) || []\n\n  if (pathSafe) {\n    let newPath = pathname.replace(re, '') || AppRoutes.home\n    let newSearch = search ? '&' + search.slice(1) : ''\n\n    // TxId used to be in the path, rewrite it to the query\n    if (newPath.startsWith(AppRoutes.transactions.index)) {\n      const isStaticPath = Object.values(AppRoutes.transactions).some((route) => route === newPath)\n      if (!isStaticPath) {\n        const txId = newPath.match(/\\/transactions\\/([^/]+)/)?.[1]\n        newPath = AppRoutes.transactions.tx\n        newSearch = `${newSearch}&id=${txId}`\n      }\n    }\n\n    if (newPath !== pathname) {\n      return `${newPath}?safe=${pathSafe}${newSearch}`\n    }\n  }\n}\n\nconst Custom404: NextPage = () => {\n  const router = useRouter()\n  const [isRedirecting, setIsRedirecting] = useState<boolean>(true)\n\n  useEffect(() => {\n    if (typeof location === 'undefined') return\n\n    const redirectUrl = _getRedirectUrl(location)\n\n    if (redirectUrl) {\n      router.replace(redirectUrl)\n    } else {\n      setIsRedirecting(false)\n    }\n  }, [router])\n\n  return <main>{!isRedirecting && <h1>404 - Page not found</h1>}</main>\n}\n\nexport default Custom404\n"],"names":["_getRedirectUrl","pathname","search","location","re","pathSafe","match","newPath","replace","AppRoutes","home","newSearch","slice","startsWith","transactions","index","Object","values","some","route","txId","tx","router","useRouter","Custom404","isRedirecting","setIsRedirecting","useState","useEffect","redirectUrl","main","h1"],"sourceRoot":"","ignoreList":[]}