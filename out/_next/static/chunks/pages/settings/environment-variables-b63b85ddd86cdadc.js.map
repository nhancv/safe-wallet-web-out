{"version":3,"file":"static/chunks/pages/settings/environment-variables-b63b85ddd86cdadc.js","mappings":"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","sources":["webpack://_N_E/./src/components/common/Mui/index.tsx","webpack://_N_E/./src/components/settings/EnvironmentVariables/index.tsx","webpack://_N_E/./src/pages/settings/environment-variables.tsx","webpack://_N_E/./src/components/common/NavTabs/index.tsx","webpack://_N_E/./src/components/common/NavTabs/styles.module.css","webpack://_N_E/?e326","webpack://_N_E/./src/components/common/PageHeader/index.tsx","webpack://_N_E/./src/components/settings/SettingsHeader/index.tsx","webpack://_N_E/./src/components/common/PageHeader/styles.module.css"],"sourcesContent":["export * from \"/app/apps/web/src/components/common/Mui/index.tsx\"","import { useForm, FormProvider } from 'react-hook-form'\nimport { Paper, Grid, Typography, TextField, Button, Tooltip, IconButton, SvgIcon } from '@mui/material'\nimport InputAdornment from '@mui/material/InputAdornment'\nimport RotateLeftIcon from '@mui/icons-material/RotateLeft'\nimport { useAppDispatch, useAppSelector } from '@/store'\nimport { selectSettings, setRpc, setTenderly } from '@/store/settingsSlice'\nimport useChainId from '@/hooks/useChainId'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport { SETTINGS_EVENTS, trackEvent } from '@/services/analytics'\nimport InfoIcon from '@/public/images/notifications/info.svg'\nimport ExternalLink from '@/components/common/ExternalLink'\nimport { TENDERLY_SIMULATE_ENDPOINT_URL } from '@safe-global/utils/config/constants'\n\nexport enum EnvVariablesField {\n  rpc = 'rpc',\n  tenderlyURL = 'tenderlyURL',\n  tenderlyToken = 'tenderlyToken',\n}\n\nexport type EnvVariablesFormData = {\n  [EnvVariablesField.rpc]: string\n  [EnvVariablesField.tenderlyURL]: string\n  [EnvVariablesField.tenderlyToken]: string\n}\n\nconst EnvironmentVariables = () => {\n  const chainId = useChainId()\n  const chain = useCurrentChain()\n  const settings = useAppSelector(selectSettings)\n  const dispatch = useAppDispatch()\n\n  const formMethods = useForm<EnvVariablesFormData>({\n    mode: 'onChange',\n    values: {\n      [EnvVariablesField.rpc]: settings.env?.rpc[chainId] ?? '',\n      [EnvVariablesField.tenderlyURL]: settings.env?.tenderly.url ?? '',\n      [EnvVariablesField.tenderlyToken]: settings.env?.tenderly.accessToken ?? '',\n    },\n  })\n\n  const { register, handleSubmit, setValue, watch } = formMethods\n\n  const rpc = watch(EnvVariablesField.rpc)\n  const tenderlyURL = watch(EnvVariablesField.tenderlyURL)\n  const tenderlyToken = watch(EnvVariablesField.tenderlyToken)\n\n  const onSubmit = handleSubmit((data) => {\n    trackEvent({ ...SETTINGS_EVENTS.ENV_VARIABLES.SAVE })\n\n    dispatch(\n      setRpc({\n        chainId,\n        rpc: data[EnvVariablesField.rpc],\n      }),\n    )\n\n    dispatch(\n      setTenderly({\n        url: data[EnvVariablesField.tenderlyURL],\n        accessToken: data[EnvVariablesField.tenderlyToken],\n      }),\n    )\n\n    location.reload()\n  })\n\n  const onReset = (name: EnvVariablesField) => {\n    setValue(name, '')\n  }\n\n  return (\n    <Paper sx={{ padding: 4 }}>\n      <Grid\n        container\n        direction=\"row\"\n        spacing={3}\n        sx={{\n          justifyContent: 'space-between',\n          mb: 2,\n        }}\n      >\n        <Grid item lg={4} xs={12}>\n          <Typography\n            variant=\"h4\"\n            sx={{\n              fontWeight: 700,\n            }}\n          >\n            Environment variables\n          </Typography>\n        </Grid>\n\n        <Grid item xs>\n          <Typography\n            sx={{\n              mb: 3,\n            }}\n          >\n            You can override some of our default APIs here in case you need to. Proceed at your own risk.\n          </Typography>\n\n          <FormProvider {...formMethods}>\n            <form onSubmit={onSubmit}>\n              <Typography\n                sx={{\n                  fontWeight: 700,\n                  mb: 2,\n                  mt: 3,\n                }}\n              >\n                RPC provider\n                <Tooltip\n                  placement=\"top\"\n                  arrow\n                  title=\"Any provider that implements the Ethereum JSON-RPC standard can be used.\"\n                >\n                  <span>\n                    <SvgIcon\n                      component={InfoIcon}\n                      inheritViewBox\n                      fontSize=\"small\"\n                      color=\"border\"\n                      sx={{ verticalAlign: 'middle', ml: 0.5 }}\n                    />\n                  </span>\n                </Tooltip>\n              </Typography>\n\n              <TextField\n                {...register(EnvVariablesField.rpc)}\n                variant=\"outlined\"\n                type=\"url\"\n                placeholder={chain?.rpcUri.value}\n                InputProps={{\n                  endAdornment: rpc ? (\n                    <InputAdornment position=\"end\">\n                      <Tooltip title=\"Reset to default value\">\n                        <IconButton onClick={() => onReset(EnvVariablesField.rpc)} size=\"small\" color=\"primary\">\n                          <RotateLeftIcon />\n                        </IconButton>\n                      </Tooltip>\n                    </InputAdornment>\n                  ) : null,\n                }}\n                fullWidth\n              />\n\n              <Typography\n                sx={{\n                  fontWeight: 700,\n                  mb: 2,\n                  mt: 3,\n                }}\n              >\n                Tenderly\n                <Tooltip\n                  placement=\"top\"\n                  arrow\n                  title={\n                    <>\n                      You can use your own Tenderly project to keep track of all your transaction simulations.{' '}\n                      <ExternalLink\n                        color=\"secondary\"\n                        href=\"https://docs.tenderly.co/simulations-and-forks/simulation-api/configuration-of-api-access\"\n                      >\n                        Read more\n                      </ExternalLink>\n                    </>\n                  }\n                >\n                  <span>\n                    <SvgIcon\n                      component={InfoIcon}\n                      inheritViewBox\n                      fontSize=\"small\"\n                      color=\"border\"\n                      sx={{ verticalAlign: 'middle', ml: 0.5 }}\n                    />\n                  </span>\n                </Tooltip>\n              </Typography>\n\n              <Grid container spacing={2}>\n                <Grid item xs={12} md={6}>\n                  <TextField\n                    {...register(EnvVariablesField.tenderlyURL)}\n                    type=\"url\"\n                    variant=\"outlined\"\n                    label=\"Tenderly API URL\"\n                    placeholder={TENDERLY_SIMULATE_ENDPOINT_URL}\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      endAdornment: tenderlyURL ? (\n                        <InputAdornment position=\"end\">\n                          <Tooltip title=\"Reset to default value\">\n                            <IconButton\n                              onClick={() => onReset(EnvVariablesField.tenderlyURL)}\n                              size=\"small\"\n                              color=\"primary\"\n                            >\n                              <RotateLeftIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      ) : null,\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n\n                <Grid item xs={12} md={6}>\n                  <TextField\n                    {...register(EnvVariablesField.tenderlyToken)}\n                    variant=\"outlined\"\n                    label=\"Tenderly access token\"\n                    InputLabelProps={{\n                      shrink: true,\n                    }}\n                    InputProps={{\n                      endAdornment: tenderlyToken ? (\n                        <InputAdornment position=\"end\">\n                          <Tooltip title=\"Reset to default value\">\n                            <IconButton\n                              onClick={() => onReset(EnvVariablesField.tenderlyToken)}\n                              size=\"small\"\n                              color=\"primary\"\n                            >\n                              <RotateLeftIcon />\n                            </IconButton>\n                          </Tooltip>\n                        </InputAdornment>\n                      ) : null,\n                    }}\n                    fullWidth\n                  />\n                </Grid>\n              </Grid>\n\n              <Button type=\"submit\" variant=\"contained\" color=\"primary\" sx={{ mt: 2 }}>\n                Save\n              </Button>\n            </form>\n          </FormProvider>\n        </Grid>\n      </Grid>\n    </Paper>\n  )\n}\n\nexport default EnvironmentVariables\n","import type { NextPage } from 'next'\nimport Head from 'next/head'\nimport SettingsHeader from '@/components/settings/SettingsHeader'\nimport EnvironmentVariables from '@/components/settings/EnvironmentVariables'\nimport { BRAND_NAME } from '@/config/constants'\n\nconst EnvironmentVariablesPage: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>{`${BRAND_NAME} – Settings – Environment variables`}</title>\n      </Head>\n\n      <SettingsHeader />\n\n      <main>\n        <EnvironmentVariables />\n      </main>\n    </>\n  )\n}\n\nexport default EnvironmentVariablesPage\n","import React from 'react'\nimport NextLink from 'next/link'\nimport { Tab, Tabs, Typography } from '@mui/material'\nimport { useRouter } from 'next/router'\nimport type { NavItem } from '@/components/sidebar/SidebarNavigation/config'\nimport css from './styles.module.css'\n\nconst NavTabs = ({ tabs }: { tabs: NavItem[] }) => {\n  const router = useRouter()\n  const activeTab = Math.max(0, tabs.map((tab) => tab.href).indexOf(router.pathname))\n  const query = router.query.safe ? { safe: router.query.safe } : undefined\n\n  return (\n    <Tabs value={activeTab} variant=\"scrollable\" allowScrollButtonsMobile className={css.tabs}>\n      {tabs.map((tab, idx) => (\n        <Tab\n          key={tab.href}\n          href={{ pathname: tab.href, query }}\n          component={NextLink}\n          tabIndex={0}\n          className={css.tab}\n          label={\n            <Typography\n              variant=\"body2\"\n              fontWeight={700}\n              color={activeTab === idx ? 'primary' : 'primary.light'}\n              className={css.label}\n            >\n              {tab.label}\n            </Typography>\n          }\n        />\n      ))}\n    </Tabs>\n  )\n}\n\nexport default NavTabs\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabs\":\"styles_tabs__8AoqD\",\"tab\":\"styles_tab__WjqMe\",\"label\":\"styles_label__D53iN\"};","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/settings/environment-variables\",\n      function () {\n        return require(\"private-next-pages/settings/environment-variables.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/settings/environment-variables\"])\n      });\n    }\n  ","import { Box, Typography } from '@mui/material'\nimport classNames from 'classnames'\n\nimport type { ReactElement } from 'react'\n\nimport css from './styles.module.css'\n\nconst PageHeader = ({\n  title,\n  action,\n  noBorder,\n}: {\n  title: string\n  action?: ReactElement\n  noBorder?: boolean\n}): ReactElement => {\n  return (\n    <Box className={classNames(css.container, { [css.border]: !noBorder })}>\n      <Typography variant=\"h3\" className={css.title}>\n        {title}\n      </Typography>\n      {action}\n    </Box>\n  )\n}\n\nexport default PageHeader\n","import type { ReactElement } from 'react'\n\nimport NavTabs from '@/components/common/NavTabs'\nimport PageHeader from '@/components/common/PageHeader'\nimport { generalSettingsNavItems, settingsNavItems } from '@/components/sidebar/SidebarNavigation/config'\nimport css from '@/components/common/PageHeader/styles.module.css'\nimport useSafeAddress from '@/hooks/useSafeAddress'\nimport { useCurrentChain } from '@/hooks/useChains'\nimport { isRouteEnabled } from '@/utils/chains'\nimport madProps from '@/utils/mad-props'\n\nexport const SettingsHeader = ({\n  safeAddress,\n  chain,\n}: {\n  safeAddress: ReturnType<typeof useSafeAddress>\n  chain: ReturnType<typeof useCurrentChain>\n}): ReactElement => {\n  const navItems = safeAddress\n    ? settingsNavItems.filter((route) => isRouteEnabled(route.href, chain))\n    : generalSettingsNavItems\n\n  return (\n    <PageHeader\n      title={safeAddress ? 'Settings' : 'Preferences'}\n      action={\n        <div className={css.navWrapper}>\n          <NavTabs tabs={navItems} />\n        </div>\n      }\n    />\n  )\n}\n\nexport default madProps(SettingsHeader, {\n  safeAddress: useSafeAddress,\n  chain: useCurrentChain,\n})\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"styles_container__sGid8\",\"title\":\"styles_title___s0jt\",\"border\":\"styles_border__BkX1U\",\"pageHeader\":\"styles_pageHeader__fRL7d\",\"actionsWrapper\":\"styles_actionsWrapper__g_Tq2\",\"navWrapper\":\"styles_navWrapper__XNqgs\"};"],"names":["settings","chainId","useChainId","EnvironmentVariables","chain","useCurrentChain","useAppSelector","selectSettings","dispatch","useAppDispatch","formMethods","useForm","mode","values","env","rpc","tenderly","url","accessToken","register","handleSubmit","setValue","watch","tenderlyURL","tenderlyToken","onSubmit","data","trackEvent","SETTINGS_EVENTS","ENV_VARIABLES","SAVE","setRpc","setTenderly","location","reload","onReset","name","Paper","sx","padding","Grid","container","direction","spacing","justifyContent","mb","item","lg","xs","Typography","variant","fontWeight","FormProvider","form","mt","Tooltip","placement","arrow","title","span","SvgIcon","component","InfoIcon","inheritViewBox","fontSize","color","verticalAlign","ml","TextField","type","placeholder","rpcUri","InputProps","endAdornment","InputAdornment","position","IconButton","onClick","size","RotateLeftIcon","fullWidth","ExternalLink","href","md","label","TENDERLY_SIMULATE_ENDPOINT_URL","InputLabelProps","shrink","Button","EnvironmentVariablesPage","Head","BRAND_NAME","SettingsHeader","main","tabs","router","useRouter","activeTab","Math","max","map","tab","indexOf","pathname","query","safe","undefined","Tabs","value","allowScrollButtonsMobile","className","css","idx","Tab","NextLink","tabIndex","action","PageHeader","noBorder","Box","classNames","madProps","safeAddress","navItems","settingsNavItems","filter","isRouteEnabled","route","generalSettingsNavItems","div","NavTabs","useSafeAddress"],"sourceRoot":"","ignoreList":[]}