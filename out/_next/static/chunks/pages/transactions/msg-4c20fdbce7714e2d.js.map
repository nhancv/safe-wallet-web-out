{"version":3,"file":"static/chunks/pages/transactions/msg-4c20fdbce7714e2d.js","mappings":"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","sources":["webpack://_N_E/./src/hooks/messages/useSafeMessage.ts","webpack://_N_E/./src/services/safe-messages/safeMsgSender.ts","webpack://_N_E/./src/hooks/messages/useSyncSafeMessageSigner.ts","webpack://_N_E/./src/services/safe-messages/safeMsgNotifications.ts","webpack://_N_E/?4cc4","webpack://_N_E/./src/components/safe-messages/SingleMsg/index.tsx","webpack://_N_E/./src/pages/transactions/msg.tsx"],"sourcesContent":["import { isSafeMessageListItem } from '@/utils/safe-message-guards'\nimport { useState, useEffect } from 'react'\nimport useSafeMessages from './useSafeMessages'\nimport useAsync from '@safe-global/utils/hooks/useAsync'\nimport useSafeInfo from '../useSafeInfo'\nimport { fetchSafeMessage } from './useSyncSafeMessageSigner'\nimport type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\n\nconst useSafeMessage = (safeMessageHash: string | undefined) => {\n  const [safeMessage, setSafeMessage] = useState<MessageItem | undefined>()\n\n  const { safe } = useSafeInfo()\n\n  const messages = useSafeMessages()\n\n  const ongoingMessage = messages.page?.results\n    ?.filter(isSafeMessageListItem)\n    .find((msg) => msg.messageHash === safeMessageHash)\n\n  const [updatedMessage, messageError] = useAsync(async () => {\n    if (!safeMessageHash) return\n    return fetchSafeMessage(safeMessageHash, safe.chainId)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [safeMessageHash, safe.chainId, safe.messagesTag])\n\n  useEffect(() => {\n    setSafeMessage(updatedMessage ?? ongoingMessage)\n  }, [ongoingMessage, updatedMessage])\n\n  return [safeMessage, setSafeMessage, messageError] as const\n}\n\nexport default useSafeMessage\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { proposeSafeMessage, confirmSafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { type SafeState } from '@safe-global/store/gateway/AUTO_GENERATED/safes'\nimport type { Eip1193Provider } from 'ethers'\n\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\nimport {\n  generateSafeMessageHash,\n  isEIP712TypedData,\n  tryOffChainMsgSigning,\n} from '@safe-global/utils/utils/safe-messages'\nimport { normalizeTypedData } from '@safe-global/utils/utils/web3'\nimport { getAssertedChainSigner } from '@/services/tx/tx-sender/sdk'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\n\nexport const dispatchSafeMsgProposal = async ({\n  provider,\n  safe,\n  message,\n  origin = '',\n}: {\n  provider: Eip1193Provider\n  safe: SafeState\n  message: MessageItem['message']\n  origin: string | undefined\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(provider)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    let normalizedMessage = message\n    if (isEIP712TypedData(message)) {\n      normalizedMessage = normalizeTypedData(message)\n    }\n\n    await proposeSafeMessage(safe.chainId, safe.address.value, {\n      message: normalizedMessage,\n      signature,\n      origin,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.PROPOSE, {\n    messageHash,\n  })\n}\n\nexport const dispatchSafeMsgConfirmation = async ({\n  provider,\n  safe,\n  message,\n}: {\n  provider: Eip1193Provider\n  safe: SafeState\n  message: MessageItem['message']\n}): Promise<void> => {\n  const messageHash = generateSafeMessageHash(safe, message)\n\n  try {\n    const signer = await getAssertedChainSigner(provider)\n    const signature = await tryOffChainMsgSigning(signer, safe, message)\n\n    await confirmSafeMessage(safe.chainId, messageHash, {\n      signature,\n    })\n  } catch (error) {\n    safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE_FAILED, {\n      messageHash,\n      error: asError(error),\n    })\n\n    throw error\n  }\n\n  safeMsgDispatch(SafeMsgEvent.CONFIRM_PROPOSE, {\n    messageHash,\n  })\n}\n","import type { TypedData, MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport useWallet from '@/hooks/wallets/useWallet'\nimport { Errors, logError } from '@/services/exceptions'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\nimport { dispatchPreparedSignature } from '@/services/safe-messages/safeMsgNotifications'\nimport { dispatchSafeMsgProposal, dispatchSafeMsgConfirmation } from '@/services/safe-messages/safeMsgSender'\nimport { getSafeMessage } from '@safe-global/safe-gateway-typescript-sdk'\nimport { useEffect, useCallback, useState } from 'react'\nimport useSafeInfo from '../useSafeInfo'\n\nconst HIDE_DELAY = 3000\n\nexport const fetchSafeMessage = async (safeMessageHash: string, chainId: string): Promise<MessageItem | undefined> => {\n  let message: MessageItem | undefined\n  try {\n    // fetchedMessage does not have a type because it is explicitly a message\n    const fetchedMessage = await getSafeMessage(chainId, safeMessageHash)\n    // @ts-expect-error - the getSafeMessage type from the safe-gateway-typescript-sdk is wrong. The gateway returns a MessageItem\n    message = { ...fetchedMessage, type: 'MESSAGE' }\n  } catch (err) {\n    logError(Errors._613, err)\n    throw err\n  }\n\n  return message\n}\n\nconst useSyncSafeMessageSigner = (\n  message: MessageItem | undefined,\n  decodedMessage: string | TypedData,\n  safeMessageHash: string,\n  requestId: string | undefined,\n  origin: string | undefined,\n  onClose: () => void,\n) => {\n  const [submitError, setSubmitError] = useState<Error | undefined>()\n  const wallet = useWallet()\n  const { safe } = useSafeInfo()\n\n  // If the message gets updated in the messageSlice we dispatch it if the signature is complete\n  useEffect(() => {\n    let timeout: NodeJS.Timeout | undefined\n    if (message?.preparedSignature) {\n      timeout = setTimeout(() => dispatchPreparedSignature(message, safeMessageHash, onClose, requestId), HIDE_DELAY)\n    }\n    return () => clearTimeout(timeout)\n  }, [message, safe.chainId, safeMessageHash, onClose, requestId])\n\n  const onSign = useCallback(async () => {\n    // Error is shown when no wallet is connected, this appeases TypeScript\n    if (!wallet) {\n      return\n    }\n\n    setSubmitError(undefined)\n\n    try {\n      // When collecting the first signature\n      if (!message) {\n        await dispatchSafeMsgProposal({ provider: wallet.provider, safe, message: decodedMessage, origin })\n\n        // Fetch updated message\n        const updatedMsg = await fetchSafeMessage(safeMessageHash, safe.chainId)\n\n        // If threshold 1, we do not want to wait for polling\n        if (safe.threshold === 1 && updatedMsg) {\n          setTimeout(() => dispatchPreparedSignature(updatedMsg, safeMessageHash, onClose, requestId), HIDE_DELAY)\n        }\n        return updatedMsg\n      } else {\n        await dispatchSafeMsgConfirmation({ provider: wallet.provider, safe, message: decodedMessage })\n\n        // No requestID => we are in the confirm message dialog and do not need to leave the window open\n        if (!requestId) {\n          onClose()\n          return\n        }\n\n        const updatedMsg = await fetchSafeMessage(safeMessageHash, safe.chainId)\n        if (updatedMsg) {\n          setTimeout(() => dispatchPreparedSignature(updatedMsg, safeMessageHash, onClose, requestId), HIDE_DELAY)\n        }\n        return updatedMsg\n      }\n    } catch (e) {\n      setSubmitError(asError(e))\n    }\n  }, [wallet, safe, message, decodedMessage, origin, safeMessageHash, onClose, requestId])\n\n  return { submitError, onSign }\n}\n\nexport default useSyncSafeMessageSigner\n","import type { MessageItem } from '@safe-global/store/gateway/AUTO_GENERATED/messages'\nimport { safeMsgDispatch, SafeMsgEvent } from './safeMsgEvents'\n\nconst isMessageFullySigned = (message: MessageItem): message is MessageItem & { preparedSignature: string } => {\n  return message.confirmationsSubmitted >= message.confirmationsRequired && !!message.preparedSignature\n}\n\n/**\n * Dispatches a notification including the `preparedSignature` of the message if it is fully signed.\n *\n * @param chainId\n * @param safeMessageHash\n * @param onClose\n * @param requestId\n */\nexport const dispatchPreparedSignature = async (\n  message: MessageItem,\n  safeMessageHash: string,\n  onClose: () => void,\n  requestId?: string,\n) => {\n  if (isMessageFullySigned(message)) {\n    safeMsgDispatch(SafeMsgEvent.SIGNATURE_PREPARED, {\n      messageHash: safeMessageHash,\n      requestId,\n      signature: message.preparedSignature,\n    })\n    onClose()\n  }\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/transactions/msg\",\n      function () {\n        return require(\"private-next-pages/transactions/msg.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/transactions/msg\"])\n      });\n    }\n  ","import { useRouter } from 'next/router'\nimport { TxListGrid } from '@/components/transactions/TxList'\nimport { TransactionSkeleton } from '@/components/transactions/TxListItem/ExpandableTransactionItem'\nimport ExpandableMsgItem from '../MsgListItem/ExpandableMsgItem'\nimport useSafeMessage from '@/hooks/messages/useSafeMessage'\nimport ErrorMessage from '@/components/tx/ErrorMessage'\n\nconst SingleMsg = () => {\n  const router = useRouter()\n  const { messageHash } = router.query\n  const safeMessageHash = Array.isArray(messageHash) ? messageHash[0] : messageHash\n  const [safeMessage, , messageError] = useSafeMessage(safeMessageHash)\n\n  if (safeMessage) {\n    return (\n      <TxListGrid>\n        <ExpandableMsgItem msg={safeMessage} expanded />\n      </TxListGrid>\n    )\n  }\n\n  if (messageError) {\n    return <ErrorMessage error={messageError}>Failed to load message</ErrorMessage>\n  }\n\n  // Loading skeleton\n  return <TransactionSkeleton />\n}\n\nexport default SingleMsg\n","import type { NextPage } from 'next'\nimport Head from 'next/head'\n\nimport Typography from '@mui/material/Typography'\nimport SingleMsg from '@/components/safe-messages/SingleMsg'\nimport { BRAND_NAME } from '@/config/constants'\n\nconst SingleTransaction: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>{`${BRAND_NAME} – Message details`}</title>\n      </Head>\n\n      <main>\n        <Typography data-testid=\"tx-details\" variant=\"h3\" fontWeight={700} pt={1} mb={3}>\n          Message details\n        </Typography>\n\n        <SingleMsg />\n      </main>\n    </>\n  )\n}\n\nexport default SingleTransaction\n"],"names":["messages","safeMessage","setSafeMessage","useState","useSafeMessage","safe","useSafeInfo","ongoingMessage","useSafeMessages","page","results","filter","isSafeMessageListItem","find","msg","messageHash","safeMessageHash","updatedMessage","messageError","useAsync","fetchSafeMessage","chainId","messagesTag","useEffect","dispatchSafeMsgProposal","provider","message","origin","generateSafeMessageHash","signer","getAssertedChainSigner","signature","tryOffChainMsgSigning","normalizedMessage","isEIP712TypedData","normalizeTypedData","proposeSafeMessage","address","value","error","safeMsgDispatch","SafeMsgEvent","PROPOSE_FAILED","asError","PROPOSE","confirmSafeMessage","CONFIRM_PROPOSE_FAILED","CONFIRM_PROPOSE","getSafeMessage","type","fetchedMessage","err","logError","Errors","_613","decodedMessage","requestId","onClose","submitError","setSubmitError","useSyncSafeMessageSigner","wallet","useWallet","timeout","preparedSignature","setTimeout","dispatchPreparedSignature","HIDE_DELAY","clearTimeout","onSign","useCallback","undefined","dispatchSafeMsgConfirmation","updatedMsg","threshold","e","isMessageFullySigned","confirmationsSubmitted","confirmationsRequired","SIGNATURE_PREPARED","useRouter","SingleMsg","query","Array","isArray","TxListGrid","ExpandableMsgItem","expanded","ErrorMessage","TransactionSkeleton","SingleTransaction","Head","title","BRAND_NAME","main","Typography","data-testid","variant","fontWeight","pt","mb"],"sourceRoot":"","ignoreList":[]}