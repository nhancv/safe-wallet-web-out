{"version":3,"file":"static/chunks/pages/transactions/tx-c6d66f8e4d1f93cc.js","mappings":"+EACA,4CACA,mBACA,WACA,OAAe,EAAQ,KAAwC,CAC/D,EACA,SAFsB,iPCetB,IAAMA,EAAe,OAAC,WAAEC,CAAS,CAAqC,GAC9DC,EAAkBC,CAAAA,EAAAA,EAAAA,EAAAA,CAAiBA,CAACF,GAGpC,MAAEG,CAAI,CAAE,CAAGC,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GACtBC,EAAQC,CAAAA,EAAAA,EAAAA,EAAAA,CAA+BA,OAACN,EAAAA,KAAAA,EAAAA,EAAWO,WAAXP,UAAgC,QAC1EA,EAAAA,KAAAA,EAAAA,EAAWO,WAAXP,UAAgC,CAACK,KAAK,CACtC,CAAC,EACCG,EAAQH,IAAUF,EAAKE,KAAK,CAAGI,EAAAA,UAAUA,CAACC,IAAI,CAAGL,EAAQF,EAAKE,KAAK,CAAGI,EAAAA,UAAUA,CAACE,MAAM,MAAGC,EAEhG,MACE,WAACC,EAAAA,CAAUA,CAAAA,WACRL,EAAQ,UAACM,EAAAA,CAAUA,CAAAA,CAACC,KAAM,OAAEP,CAAM,IAAiB,KAEpD,UAACQ,EAAAA,EAAyBA,CAAAA,CAACD,KAAMd,EAAID,UAAWA,MAGtD,EA0CA,EAxCiB,KAEf,GAAM,IAAEiB,CAAE,CAAE,CAAGC,CADAC,EAAAA,EAAAA,GAuCFC,MAvCED,CAASA,CAuCHC,EAtCCC,KAAK,CACrBC,EAAgBC,MAAMC,OAAO,CAACP,GAAMA,CAAE,CAAC,EAAE,CAAGA,EAC5C,MAAEd,CAAI,CAAEsB,aAAW,CAAE,CAAGrB,CAAAA,EAAAA,EAAAA,CAAAA,CAAWA,GAErC,CACFsB,KAAM1B,CAAS,CACf2B,MAAOC,CAAc,SACrBC,CAAO,iBACPC,CAAe,CAChB,CAAGC,CAAAA,EAAAA,EAAAA,EAAAA,CAA6BA,CAC/BT,GAAiBnB,EAAK6B,OAAO,CACzB,CACEA,QAAS7B,EAAK6B,OAAO,CACrBC,KAAMX,CACR,EACAY,EAAAA,EAASA,QAWf,CARAC,CAAAA,EAAAA,EAAAA,SAAAA,CAASA,CAAC,KACR,GAAoBN,GACtB,EAAG,CAAC1B,EAAKiC,YAAY,CAAEjC,EAAKkC,WAAW,CAAEZ,EAAaI,EAASC,EAAgB,EAE3E9B,GAAa,CAACsC,CAAAA,EAAAA,EAAAA,EAAAA,CAAWA,CAACtC,EAAUyB,WAAW,CAAEA,KACnDG,EAAiB,MAAU,CADsC,6DACtC,EAGzBA,GACK,UAACW,EAAAA,CADU,CACEA,CAACZ,MAAOa,CAAAA,EAAAA,EAAAA,CAAAA,CAAOA,CAACZ,YAAiB,+BAGnD5B,EACK,SADM,CACLD,EAAAA,CAAaC,UAAWA,IAI3B,UAACyC,EAAAA,EAAmBA,CAAAA,CAAAA,EAC7B,4BCnDA,MAlBoC,IAEhC,iBAgB4BC,EAAA,EAhB5B,YACE,UAACC,IAAIA,UACH,CADGA,EACH,OAACC,QAAAA,UAAO,GAAc,OAAXC,EAAAA,EAAUA,CAAC,8BAGxB,WAACC,OAAAA,WACC,UAACC,EAAAA,CAAUA,CAAAA,CAACC,cAAY,aAAaC,QAAQ,KAAKC,WAAY,IAAKC,GAAI,EAAGC,GAAI,WAAG,wBAIjF,UAAChC,EAAQA,CAAAA,kBAAAA","sources":["webpack://_N_E/?b652","webpack://_N_E/./src/components/transactions/SingleTx/index.tsx","webpack://_N_E/./src/pages/transactions/tx.tsx"],"sourcesContent":["\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/transactions/tx\",\n      function () {\n        return require(\"private-next-pages/transactions/tx.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/transactions/tx\"])\n      });\n    }\n  ","import ErrorMessage from '@/components/tx/ErrorMessage'\nimport { useRouter } from 'next/router'\nimport useSafeInfo from '@/hooks/useSafeInfo'\nimport type { Label, Transaction, TransactionDetails } from '@safe-global/safe-gateway-typescript-sdk'\nimport { LabelValue } from '@safe-global/safe-gateway-typescript-sdk'\nimport { sameAddress } from '@safe-global/utils/utils/addresses'\nimport type { ReactElement } from 'react'\nimport { useEffect } from 'react'\nimport { makeTxFromDetails } from '@/utils/transactions'\nimport { TxListGrid } from '@/components/transactions/TxList'\nimport ExpandableTransactionItem, {\n  TransactionSkeleton,\n} from '@/components/transactions/TxListItem/ExpandableTransactionItem'\nimport GroupLabel from '../GroupLabel'\nimport { isMultisigDetailedExecutionInfo } from '@/utils/transaction-guards'\nimport { useGetTransactionDetailsQuery } from '@/store/api/gateway'\nimport { skipToken } from '@reduxjs/toolkit/query/react'\nimport { asError } from '@safe-global/utils/services/exceptions/utils'\n\nconst SingleTxGrid = ({ txDetails }: { txDetails: TransactionDetails }): ReactElement => {\n  const tx: Transaction = makeTxFromDetails(txDetails)\n\n  // Show a label for the transaction if it's a queued transaction\n  const { safe } = useSafeInfo()\n  const nonce = isMultisigDetailedExecutionInfo(txDetails?.detailedExecutionInfo)\n    ? txDetails?.detailedExecutionInfo.nonce\n    : -1\n  const label = nonce === safe.nonce ? LabelValue.Next : nonce > safe.nonce ? LabelValue.Queued : undefined\n\n  return (\n    <TxListGrid>\n      {label ? <GroupLabel item={{ label } as Label} /> : null}\n\n      <ExpandableTransactionItem item={tx} txDetails={txDetails} />\n    </TxListGrid>\n  )\n}\n\nconst SingleTx = () => {\n  const router = useRouter()\n  const { id } = router.query\n  const transactionId = Array.isArray(id) ? id[0] : id\n  const { safe, safeAddress } = useSafeInfo()\n\n  let {\n    data: txDetails,\n    error: txDetailsError,\n    refetch,\n    isUninitialized,\n  } = useGetTransactionDetailsQuery(\n    transactionId && safe.chainId\n      ? {\n          chainId: safe.chainId,\n          txId: transactionId,\n        }\n      : skipToken,\n  )\n\n  useEffect(() => {\n    !isUninitialized && refetch()\n  }, [safe.txHistoryTag, safe.txQueuedTag, safeAddress, refetch, isUninitialized])\n\n  if (txDetails && !sameAddress(txDetails.safeAddress, safeAddress)) {\n    txDetailsError = new Error('Transaction with this id was not found in this Safe Account')\n  }\n\n  if (txDetailsError) {\n    return <ErrorMessage error={asError(txDetailsError)}>Failed to load transaction</ErrorMessage>\n  }\n\n  if (txDetails) {\n    return <SingleTxGrid txDetails={txDetails} />\n  }\n\n  // Loading skeleton\n  return <TransactionSkeleton />\n}\n\nexport default SingleTx\n","import type { NextPage } from 'next'\nimport Head from 'next/head'\n\nimport SingleTx from '@/components/transactions/SingleTx'\nimport Typography from '@mui/material/Typography'\nimport { BRAND_NAME } from '@/config/constants'\n\nconst SingleTransaction: NextPage = () => {\n  return (\n    <>\n      <Head>\n        <title>{`${BRAND_NAME} â€“ Transaction details`}</title>\n      </Head>\n\n      <main>\n        <Typography data-testid=\"tx-details\" variant=\"h3\" fontWeight={700} pt={1} mb={3}>\n          Transaction details\n        </Typography>\n\n        <SingleTx />\n      </main>\n    </>\n  )\n}\n\nexport default SingleTransaction\n"],"names":["SingleTxGrid","txDetails","tx","makeTxFromDetails","safe","useSafeInfo","nonce","isMultisigDetailedExecutionInfo","detailedExecutionInfo","label","LabelValue","Next","Queued","undefined","TxListGrid","GroupLabel","item","ExpandableTransactionItem","id","router","useRouter","SingleTx","query","transactionId","Array","isArray","safeAddress","data","error","txDetailsError","refetch","isUninitialized","useGetTransactionDetailsQuery","chainId","txId","skipToken","useEffect","txHistoryTag","txQueuedTag","sameAddress","ErrorMessage","asError","TransactionSkeleton","SingleTransaction","Head","title","BRAND_NAME","main","Typography","data-testid","variant","fontWeight","pt","mb"],"sourceRoot":"","ignoreList":[]}